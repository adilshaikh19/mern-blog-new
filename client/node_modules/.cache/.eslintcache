[{"D:\\MERN-blog\\client\\src\\index.js":"1","D:\\MERN-blog\\client\\src\\UserContex.js":"2","D:\\MERN-blog\\client\\src\\App.jsx":"3","D:\\MERN-blog\\client\\src\\Layout.js":"4","D:\\MERN-blog\\client\\src\\pages\\RegisterPage.jsx":"5","D:\\MERN-blog\\client\\src\\pages\\LoginPage.jsx":"6","D:\\MERN-blog\\client\\src\\pages\\IndexPage.jsx":"7","D:\\MERN-blog\\client\\src\\pages\\PostPage.jsx":"8","D:\\MERN-blog\\client\\src\\pages\\CreatePost.jsx":"9","D:\\MERN-blog\\client\\src\\pages\\EditPost.jsx":"10","D:\\MERN-blog\\client\\src\\components\\Header.jsx":"11","D:\\MERN-blog\\client\\src\\components\\Post.jsx":"12"},{"size":422,"mtime":1724158641983,"results":"13","hashOfConfig":"14"},{"size":425,"mtime":1724158641980,"results":"15","hashOfConfig":"14"},{"size":874,"mtime":1724158641979,"results":"16","hashOfConfig":"14"},{"size":222,"mtime":1724158641980,"results":"17","hashOfConfig":"14"},{"size":1064,"mtime":1724158641988,"results":"18","hashOfConfig":"14"},{"size":1411,"mtime":1724158641987,"results":"19","hashOfConfig":"14"},{"size":506,"mtime":1724158641987,"results":"20","hashOfConfig":"14"},{"size":3002,"mtime":1724160339581,"results":"21","hashOfConfig":"14"},{"size":1540,"mtime":1724158641984,"results":"22","hashOfConfig":"14"},{"size":1934,"mtime":1724158641985,"results":"23","hashOfConfig":"14"},{"size":1159,"mtime":1724158641981,"results":"24","hashOfConfig":"14"},{"size":788,"mtime":1724158641982,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"19xk0mz",{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},"D:\\MERN-blog\\client\\src\\index.js",[],[],"D:\\MERN-blog\\client\\src\\UserContex.js",[],[],"D:\\MERN-blog\\client\\src\\App.jsx",[],[],"D:\\MERN-blog\\client\\src\\Layout.js",[],[],"D:\\MERN-blog\\client\\src\\pages\\RegisterPage.jsx",[],[],"D:\\MERN-blog\\client\\src\\pages\\LoginPage.jsx",[],[],"D:\\MERN-blog\\client\\src\\pages\\IndexPage.jsx",[],[],"D:\\MERN-blog\\client\\src\\pages\\PostPage.jsx",["66"],[],"import { formatISO9075 } from \"date-fns\";\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\r\nimport { UserContext } from \"../UserContex\";\r\n\r\nconst PostPage = () => {\r\n  const [postInfo, setPostInfo] = useState();\r\n  const { userInfo } = useContext(UserContext);\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    fetch(`http://localhost:4000/post/${id}`).then((response) => {\r\n      response.json().then((postInfo) => {\r\n        setPostInfo(postInfo);\r\n      });\r\n    });\r\n  }, [id]);\r\n\r\n  const handleDelete = async () => {\r\n    const confirmDelete = window.confirm(\"Are you sure you want to delete this post?\");\r\n    if (confirmDelete) {\r\n      const response = await fetch(`http://localhost:4000/post/${id}`, {\r\n        method: \"DELETE\",\r\n        credentials: \"include\",\r\n      });\r\n\r\n      if (response.ok) {\r\n        navigate(\"/\"); // Redirect to the homepage after deletion\r\n      } else {\r\n        alert(\"Failed to delete the post.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  if (!postInfo) return \"\";\r\n\r\n  return (\r\n    <div className=\"post-page\">\r\n      <h1>{postInfo.title}</h1>\r\n      <time>{formatISO9075(new Date(postInfo.createdAt))}</time>\r\n      <div className=\"author\">by @{postInfo.author.username}</div>\r\n      {userInfo.id === postInfo.author._id && (\r\n        <div className=\"edit-row\">\r\n          <Link to={`/edit/${postInfo._id}`} className=\"edit-btn\">\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              fill=\"none\"\r\n              viewBox=\"0 0 24 24\"\r\n              strokeWidth={1.5}\r\n              stroke=\"currentColor\"\r\n              className=\"w-6 h-6\"\r\n            >\r\n              <path\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                d=\"M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0115.75 21H5.25A2.25 2.25 0 013 18.75V8.25A2.25 2.25 0 015.25 6H10\"\r\n              />\r\n            </svg>\r\n            Edit this post\r\n          </Link>\r\n          <button onClick={handleDelete} className=\"delete-btn\">\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              fill=\"none\"\r\n              viewBox=\"0 0 24 24\"\r\n              strokeWidth={1.5}\r\n              stroke=\"currentColor\"\r\n              className=\"w-6 h-6\"\r\n            >\r\n              <path\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                d=\"M6 18L18 6M6 6l12 12\"\r\n              />\r\n            </svg>\r\n            Delete this post\r\n          </button>\r\n        </div>\r\n      )}\r\n      <div className=\"image\">\r\n        <img src={`http://localhost:4000/${postInfo.cover}`} alt=\"blog-image\" />\r\n      </div>\r\n      <div dangerouslySetInnerHTML={{ __html: postInfo.content }} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostPage;\r\n","D:\\MERN-blog\\client\\src\\pages\\CreatePost.jsx",[],[],"D:\\MERN-blog\\client\\src\\pages\\EditPost.jsx",["67"],[],"import { useState, useEffect } from \"react\";\r\nimport ReactQuill from \"react-quill\";\r\nimport \"react-quill/dist/quill.snow.css\";\r\nimport { Navigate, useParams } from \"react-router-dom\";\r\n\r\nconst CreatePost = () => {\r\n  const { id } = useParams();\r\n  const [title, setTitle] = useState(\"\");\r\n  const [summary, setSummary] = useState(\"\");\r\n  const [content, setContent] = useState(\"\");\r\n  const [files, setFiles] = useState(\"\");\r\n  const [redirect, setRedirect] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetch(\"http://localhost:4000/post/\" + id).then((response) => {\r\n      response.json().then((postInfo) => {\r\n        setTitle(postInfo.title);\r\n        setContent(postInfo.content);\r\n        setSummary(postInfo.summary);\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  async function updatePost(e) {\r\n    e.preventDefault();\r\n    const data = new FormData();\r\n    data.set(\"title\", title);\r\n    data.set(\"summary\", summary);\r\n    data.set(\"content\", content);\r\n    data.set(\"id\", id);\r\n    if (files?.[0]) {\r\n      data.set(\"file\", files?.[0]);\r\n    }\r\n\r\n    const response = await fetch(\"http://localhost:4000/post\", {\r\n      method: \"PUT\",\r\n      body: data,\r\n      credentials: \"include\",\r\n    });\r\n\r\n    if (response.ok) {\r\n      setRedirect(true);\r\n    }\r\n  }\r\n\r\n  if (redirect) {\r\n    return <Navigate to={\"/post/\" + id} />;\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={updatePost}>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Title\"\r\n        value={title}\r\n        onChange={(e) => setTitle(e.target.value)}\r\n      />\r\n      <input\r\n        type=\"summary\"\r\n        placeholder=\"Summary\"\r\n        value={summary}\r\n        onChange={(e) => setSummary(e.target.value)}\r\n      />\r\n      <input type=\"file\" onChange={(e) => setFiles(e.target.files)} />\r\n      <ReactQuill value={content} onChange={setContent} />\r\n      <button style={{ marginTop: \"5px\" }}>Update Post</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default CreatePost;\r\n","D:\\MERN-blog\\client\\src\\components\\Header.jsx",["68","69"],[],"import { Link } from \"react-router-dom\";\r\nimport { useContext, useEffect } from \"react\";\r\nimport { UserContext } from \"../UserContex\";\r\n\r\nexport default function Header() {\r\n  const { setUserInfo, userInfo } = useContext(UserContext);\r\n  useEffect(() => {\r\n    fetch(\"http://localhost:4000/profile\", {\r\n      credentials: \"include\",\r\n    }).then((response) => {\r\n      response.json().then((userInfo) => {\r\n        setUserInfo(userInfo);\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  function logout() {\r\n    fetch(\"http://localhost:4000/logout\", {\r\n      credentials: \"include\",\r\n      method: \"POST\",\r\n    });\r\n    setUserInfo(null);\r\n  }\r\n\r\n  const username = userInfo?.username;\r\n\r\n  return (\r\n    <header>\r\n      <Link to=\"/\" className=\"logo\">\r\n        MyBlog\r\n      </Link>\r\n      <nav>\r\n        {username && (\r\n          <>\r\n            <Link to=\"/create\">Create new post</Link>\r\n            <a onClick={logout}>Logout ({username})</a>\r\n          </>\r\n        )}\r\n        {!username && (\r\n          <>\r\n            <Link to=\"/login\">Login</Link>\r\n            <Link to=\"/register\">Register</Link>\r\n          </>\r\n        )}\r\n      </nav>\r\n    </header>\r\n  );\r\n}\r\n","D:\\MERN-blog\\client\\src\\components\\Post.jsx",["70"],[],"import { format } from \"date-fns\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Post = ({ _id, title, summary, cover, createdAt, author }) => {\r\n  return (\r\n    <div className=\"post\">\r\n      <div className=\"image\">\r\n        <Link to={`post/${_id}`}>\r\n          <img src={\"http://localhost:4000/\" + cover} alt=\"postImage\" />\r\n        </Link>\r\n      </div>\r\n      <div className=\"texts\">\r\n        <Link to={`post/${_id}`}>\r\n          <h2>{title}</h2>\r\n        </Link>\r\n        <p className=\"info\">\r\n          <a href=\"#\" className=\"author\">\r\n            {author.username}\r\n          </a>\r\n          <time>{format(new Date(createdAt), \"MMM d, yyyy HH:mm\")}</time>\r\n        </p>\r\n        <p className=\"summary\">{summary}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n",{"ruleId":"71","severity":1,"message":"72","line":82,"column":9,"nodeType":"73","endLine":82,"endColumn":81},{"ruleId":"74","severity":1,"message":"75","line":22,"column":6,"nodeType":"76","endLine":22,"endColumn":8,"suggestions":"77"},{"ruleId":"74","severity":1,"message":"78","line":15,"column":6,"nodeType":"76","endLine":15,"endColumn":8,"suggestions":"79"},{"ruleId":"80","severity":1,"message":"81","line":36,"column":13,"nodeType":"73","endLine":36,"endColumn":33},{"ruleId":"80","severity":1,"message":"82","line":17,"column":11,"nodeType":"73","endLine":17,"endColumn":42},"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["83"],"React Hook useEffect has a missing dependency: 'setUserInfo'. Either include it or remove the dependency array.",["84"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md",{"desc":"85","fix":"86"},{"desc":"87","fix":"88"},"Update the dependencies array to be: [id]",{"range":"89","text":"90"},"Update the dependencies array to be: [setUserInfo]",{"range":"91","text":"92"},[751,753],"[id]",[464,466],"[setUserInfo]"]