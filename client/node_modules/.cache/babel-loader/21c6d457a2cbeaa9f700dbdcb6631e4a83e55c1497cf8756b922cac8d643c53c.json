{"ast":null,"code":"/**\n * @remix-run/router v1.2.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexports.Action = void 0;\n/**\n * The pathname, search, and hash values of a URL.\n */\n\n(function (Action) {\n  Action[\"Pop\"] = \"POP\";\n  Action[\"Push\"] = \"PUSH\";\n  Action[\"Replace\"] = \"REPLACE\";\n})(exports.Action || (exports.Action = {}));\nconst PopStateEventType = \"popstate\"; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = exports.Action.Pop;\n  let listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push(to, state) {\n      action = exports.Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation\n        });\n      }\n    },\n    replace(to, state) {\n      action = exports.Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation\n        });\n      }\n    },\n    go(delta) {\n      action = exports.Action.Pop;\n      index = clampIndex(index + delta);\n      if (listener) {\n        listener({\n          action,\n          location: getCurrentLocation()\n        });\n      }\n    },\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n  };\n  return history;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\n\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning$1(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\nfunction getHistoryState(location) {\n  return {\n    usr: location.state,\n    key: location.key\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\nfunction parsePath(path) {\n  let parsedPath = {};\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction createClientSideURL(location) {\n  // window.location.origin is \"null\" (the literal string value) in Firefox\n  // under certain conditions, notably when serving from a local HTML file\n  // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n  let base = typeof window !== \"undefined\" && typeof window.location !== \"undefined\" && window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n  let href = typeof location === \"string\" ? location : createPath(location);\n  invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n  return new URL(href, base);\n}\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = exports.Action.Pop;\n  let listener = null;\n  function handlePop() {\n    action = exports.Action.Pop;\n    if (listener) {\n      listener({\n        action,\n        location: history.location\n      });\n    }\n  }\n  function push(to, state) {\n    action = exports.Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location\n      });\n    }\n  }\n  function replace(to, state) {\n    action = exports.Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location\n      });\n    }\n  }\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createClientSideURL(typeof to === \"string\" ? to : createPath(to));\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n} //#endregion\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\n\nlet ResultType;\n/**\n * Successful result from a loader or action\n */\n\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\nfunction convertRoutesToDataRoutes(routes, parentPath, allIds) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (allIds === void 0) {\n    allIds = new Set();\n  }\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!allIds.has(id), \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    allIds.add(id);\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, {\n        id\n      });\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, {\n        id,\n        children: route.children ? convertRoutesToDataRoutes(route.children, treePath, allIds) : undefined\n      });\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i],\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n  return matches;\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n  routes.forEach((route, index) => {\n    var _route$path;\n\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\n\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments; // Optional path segments are denoted by a trailing `?`\n\n  let isOptional = first.endsWith(\"?\"); // Compute the corresponding required segment: `foo?` -> `foo`\n\n  let required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = []; // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\"))); // Then if this is an optional value, add all child versions without\n\n  if (isOptional) {\n    result.push(...restExploded);\n  } // for absolute paths, ensure `/` instead of empty segment\n\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = s => s === \"*\";\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\n\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n  return path.replace(/^:(\\w+)/g, (_, key) => {\n    invariant(params[key] != null, \"Missing \\\":\" + key + \"\\\" param\");\n    return params[key];\n  }).replace(/\\/:(\\w+)/g, (_, key) => {\n    invariant(params[key] != null, \"Missing \\\":\" + key + \"\\\" param\");\n    return \"/\" + params[key];\n  }).replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n    const star = \"*\";\n    if (params[star] == null) {\n      // If no splat was provided, trim the trailing slash _unless_ it's\n      // the entire path\n      return str === \"/*\" ? \"/\" : \"\";\n    } // Apply the splat\n\n    return \"\" + prefix + params[star];\n  });\n}\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"/([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * @private\n */\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\n\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n/**\n * @private\n */\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  let to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data) {\n    this.pendingKeys = new Set();\n    this.subscriber = undefined;\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref) => {\n      let [key, value] = _ref;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n  }\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n    this.pendingKeys.add(key); // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, null, data), error => this.onSettle(promise, key, error)); // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n    this.pendingKeys.delete(key);\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n    const subscriber = this.subscriber;\n    if (error) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      subscriber && subscriber(false);\n      return Promise.reject(error);\n    }\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    subscriber && subscriber(false);\n    return data;\n  }\n  subscribe(fn) {\n    this.subscriber = fn;\n  }\n  cancel() {\n    this.controller.abort();\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    let subscriber = this.subscriber;\n    subscriber && subscriber(true);\n  }\n  async resolveData(signal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n}\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\nfunction defer(data) {\n  return new DeferredData(data);\n}\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\n\nclass ErrorResponse {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\n\nfunction isRouteErrorResponse(e) {\n  return e instanceof ErrorResponse;\n}\n\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let dataRoutes = convertRoutesToDataRoutes(init.routes); // Cleanup function for history\n\n  let unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  let subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  let savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  let getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  let getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, init.basename);\n  let initialErrors = null;\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n  let initialized = !initialMatches.some(m => m.route.loader) || init.hydrationData != null;\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  let pendingAction = exports.Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  let pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  let pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  let isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n\n  let isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  let cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  let cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  let fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  let incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  let pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  let fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations from their actions\n\n  let fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  let fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  let activeDeferreds = new Map(); // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location\n      } = _ref;\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n\n    if (!state.initialized) {\n      startNavigation(exports.Action.Pop, state.location);\n    }\n    return router;\n  } // Clean up a router and it's side effects\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  } // Subscribe to state updates for the router\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  } // Update our state and notify the calling context of the change\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(subscriber => subscriber(state));\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n  function completeNavigation(location, newState) {\n    var _location$state;\n\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    } // Always preserve any existing loaderData from re-used routes\n\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;\n    updateState(_extends({}, newState, {\n      // matches, errors, fetchers go through as-is\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData ? false : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset\n    }));\n    if (isUninterruptedRevalidation) ;else if (pendingAction === exports.Action.Pop) ;else if (pendingAction === exports.Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === exports.Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n    pendingAction = exports.Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(to, opts);\n    let location = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n\n    location = _extends({}, location, init.history.encodeLocation(location));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = exports.Action.Push;\n    if (userReplace === true) {\n      historyAction = exports.Action.Replace;\n    } else if (userReplace === false) ;else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = exports.Action.Replace;\n    }\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace\n    });\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename); // Short circuit with a 404 on the root error boundary if we match nothing\n\n    if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes); // Cancel all pending deferred on 404s since we don't keep any routes\n\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      });\n      return;\n    } // Short circuit if it's only a hash change\n\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(location, {\n        matches\n      });\n      return;\n    } // Create a controller/Request for this navigation\n\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace\n      });\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n      let navigation = _extends({\n        state: \"loading\",\n        location\n      }, opts.submission);\n      loadingNavigation = navigation; // Create a GET request for the loaders\n\n      request = new Request(request.url, {\n        signal: request.signal\n      });\n    } // Call loaders\n\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.replace, pendingActionData, pendingError);\n    if (shortCircuited) {\n      return;\n    } // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches\n    }, pendingActionData ? {\n      actionData: pendingActionData\n    } : {}, {\n      loaderData,\n      errors\n    }));\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n  async function handleAction(request, location, submission, matches, opts) {\n    interruptActiveLoads(); // Put us in a submitting state\n\n    let navigation = _extends({\n      state: \"submitting\",\n      location\n    }, submission);\n    updateState({\n      navigation\n    }); // Call our action and get the result\n\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n    if (!actionMatch.route.action) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, router.basename);\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n    if (isRedirectResult(result)) {\n      let replace;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace = result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n\n      if ((opts && opts.replace) !== true) {\n        pendingAction = exports.Action.Push;\n      }\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, replace, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation = _extends({\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      }, submission);\n      loadingNavigation = navigation;\n    } // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n\n    let activeSubmission = submission ? submission : loadingNavigation.formMethod && loadingNavigation.formAction && loadingNavigation.formData && loadingNavigation.formEncType ? {\n      formMethod: loadingNavigation.formMethod,\n      formAction: loadingNavigation.formAction,\n      formData: loadingNavigation.formData,\n      formEncType: loadingNavigation.formEncType\n    } : undefined;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches); // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId)); // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null\n      }, pendingActionData ? {\n        actionData: pendingActionData\n      } : {}));\n      return {\n        shortCircuited: true\n      };\n    } // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(_ref2 => {\n        let [key] = _ref2;\n        let fetcher = state.fetchers.get(key);\n        let revalidatingFetcher = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(_extends({\n        navigation: loadingNavigation\n      }, actionData ? Object.keys(actionData).length === 0 ? {\n        actionData: null\n      } : {\n        actionData\n      } : {}, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n    }\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(_ref3 => {\n      let [key] = _ref3;\n      return fetchControllers.set(key, pendingNavigationController);\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    } // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n\n    revalidatingFetchers.forEach(_ref4 => {\n      let [key] = _ref4;\n      return fetchControllers.delete(key);\n    }); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    } // Process and commit output from loaders\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds); // Wire up subscribers to update loaderData as promises settle\n\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    return _extends({\n      loaderData,\n      errors\n    }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: href\n      }));\n      return;\n    }\n    let {\n      path,\n      submission\n    } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n    fetchLoadMatches.set(key, [path, match, matches]);\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n    if (!match.route.action) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    } // Put this fetcher into it's submitting state\n\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher = _extends({\n      state: \"submitting\"\n    }, submission, {\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true\n    });\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the action for the fetcher\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, router.basename);\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher = _extends({\n        state: \"loading\"\n      }, submission, {\n        data: undefined,\n        \" _hasFetcherDoneAnything \": true\n      });\n      state.fetchers.set(key, loadingFetcher);\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n      return startRedirectNavigation(state, actionResult, {\n        isFetchActionRedirect: true\n      });\n    } // Process any non-redirect errors thrown\n\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"defer() is not supported in actions\");\n    } // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(nextLocation, abortController.signal);\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(dataRoutes, state.navigation.location, init.basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = _extends({\n      state: \"loading\",\n      data: actionResult.data\n    }, submission, {\n      \" _hasFetcherDoneAnything \": true\n    });\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, {\n      [match.route.id]: actionResult.data\n    }, undefined,\n    // No need to send through errors since we short circuit above\n    fetchLoadMatches); // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n\n    revalidatingFetchers.filter(_ref5 => {\n      let [staleKey] = _ref5;\n      return staleKey !== key;\n    }).forEach(_ref6 => {\n      let [staleKey] = _ref6;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = {\n        state: \"loading\",\n        data: existingFetcher && existingFetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      fetchControllers.set(staleKey, abortController);\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n    if (abortController.signal.aborted) {\n      return;\n    }\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(_ref7 => {\n      let [staleKey] = _ref7;\n      return fetchControllers.delete(staleKey);\n    });\n    let redirect = findRedirect(results);\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    } // Process and commit output from loaders\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    let doneFetcher = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true\n    };\n    state.fetchers.set(key, doneFetcher);\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState(_extends({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors)\n      }, didAbortFetchLoads ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      isRevalidationRequired = false;\n    }\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n  async function handleFetcherLoader(key, routeId, path, match, matches, submission) {\n    let existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n\n    let loadingFetcher = _extends({\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    }, submission, {\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true\n    });\n    state.fetchers.set(key, loadingFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the loader for this fetcher route match\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match, matches, router.basename); // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    } // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n    if (fetchRequest.signal.aborted) {\n      return;\n    } // If the loader threw a redirect Response, start a new REPLACE navigation\n\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result);\n      return;\n    } // Process any non-redirect errors thrown\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error\n        }\n      });\n      return;\n    }\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n    let doneFetcher = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n  async function startRedirectNavigation(state, redirect, _temp) {\n    var _window;\n    let {\n      submission,\n      replace,\n      isFetchActionRedirect\n    } = _temp === void 0 ? {} : _temp;\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    let redirectLocation = createLocation(state.location, redirect.location,\n    // TODO: This can be removed once we get rid of useTransition in Remix v2\n    _extends({\n      _isRedirect: true\n    }, isFetchActionRedirect ? {\n      _isFetchActionRedirect: true\n    } : {}));\n    invariant(redirectLocation, \"Expected a location on the redirect navigation\"); // Check if this an external redirect that goes to a new origin\n\n    if (typeof ((_window = window) == null ? void 0 : _window.location) !== \"undefined\") {\n      let newOrigin = createClientSideURL(redirect.location).origin;\n      if (window.location.origin !== newOrigin) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n        return;\n      }\n    } // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? exports.Action.Replace : exports.Action.Push; // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n\n    let {\n      formMethod,\n      formAction,\n      formEncType,\n      formData\n    } = state.navigation;\n    if (!submission && formMethod && formAction && formData && formEncType) {\n      submission = {\n        formMethod,\n        formAction,\n        formEncType,\n        formData\n      };\n    } // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n\n    if (redirectPreserveMethodStatusCodes.has(redirect.status) && submission && isMutationMethod(submission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, submission, {\n          formAction: redirect.location\n        })\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: submission ? submission.formMethod : undefined,\n          formAction: submission ? submission.formAction : undefined,\n          formEncType: submission ? submission.formEncType : undefined,\n          formData: submission ? submission.formData : undefined\n        }\n      });\n    }\n  }\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, router.basename)), ...fetchersToLoad.map(_ref8 => {\n      let [, href, match, fetchMatches] = _ref8;\n      return callLoaderOrAction(\"loader\", createClientSideRequest(href, request.signal), match, fetchMatches, router.basename);\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, request.signal, false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(_ref9 => {\n      let [,, match] = _ref9;\n      return match;\n    }), fetcherResults, request.signal, true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds()); // Abort in-flight fetcher loads\n\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n  function setFetcherError(key, routeId, error) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || (location => location.key); // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n  let basename = (opts ? opts.basename : null) || \"/\";\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n\n  async function query(request, _temp2) {\n    let {\n      requestContext\n    } = _temp2 === void 0 ? {} : _temp2;\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"head\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    }\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    } // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n\n  async function queryRoute(request, _temp3) {\n    let {\n      routeId,\n      requestContext\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"head\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let result = await queryImpl(request, location, matches, requestContext, match);\n    if (isResponse(result)) {\n      return result;\n    }\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    } // Pick off the right state value to return\n\n    let routeData = [result.actionData, result.loaderData].find(v => v);\n    return Object.values(routeData || {})[0];\n  }\n  async function queryImpl(request, location, matches, requestContext, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n        return result;\n      }\n      let result = await loadRouteData(request, matches, requestContext, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      } // Redirects are always returned since they don't propagate to catch\n      // boundaries\n\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n  async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {\n    let result;\n    if (!actionMatch.route.action) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, basename, true, isRouteRequest, requestContext);\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted\");\n      }\n    }\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, requestContext, undefined, {\n        [boundaryMatch.route.id]: result.error\n      }); // action status codes take precedence over loader status codes\n\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    } // Create a GET request for the loaders\n\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n  async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null; // Short circuit if we have no loaders to run (queryRoute())\n\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader); // Short circuit if we have no loaders to run (query())\n\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {}\n      };\n    }\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, basename, true, isRouteRequest, requestContext))]);\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted\");\n    }\n    let executedLoaders = new Set();\n    results.forEach((result, i) => {\n      executedLoaders.add(matchesToLoad[i].route.id); // Can't do anything with these without the Remix side of things, so just\n      // cancel them for now\n\n      if (isDeferredResult(result)) {\n        result.deferredData.cancel();\n      }\n    }); // Process and commit output from loaders\n\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError); // Add a null for any non-loader matches for proper revalidation on the client\n\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches\n    });\n  }\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n  return newContext;\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && \"formData\" in opts;\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\nfunction normalizeNavigateOptions(to, opts, isFetcher) {\n  if (isFetcher === void 0) {\n    isFetcher = false;\n  }\n  let path = typeof to === \"string\" ? to : createPath(to); // Return location verbatim on non-submission navigations\n\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  } // Create a Submission on non-GET navigations\n\n  let submission;\n  if (opts.formData) {\n    submission = {\n      formMethod: opts.formMethod || \"get\",\n      formAction: stripHashFromPath(path),\n      formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n      formData: opts.formData\n    };\n    if (isMutationMethod(submission.formMethod)) {\n      return {\n        path,\n        submission\n      };\n    }\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n  let parsedPath = parsePath(path);\n  try {\n    let searchParams = convertFormDataToSearchParams(opts.formData); // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n\n    if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n      searchParams.append(\"index\", \"\");\n    }\n    parsedPath.search = \"?\" + searchParams;\n  } catch (e) {\n    return {\n      path,\n      error: getInternalRouterError(400)\n    };\n  }\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\nfunction getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined; // Pick navigation matches that are net-new or qualify for revalidation\n\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => match.route.loader != null && (isNewLoader(state.loaderData, state.matches[index], match) ||\n  // If this route had a pending deferred cancelled it must be revalidated\n  cancelledDeferredRoutes.some(id => id === match.route.id) || shouldRevalidateLoader(state.location, state.matches[index], submission, location, match, isRevalidationRequired, actionResult))); // Pick fetcher.loads that need to be revalidated\n\n  let revalidatingFetchers = [];\n  fetchLoadMatches && fetchLoadMatches.forEach((_ref10, key) => {\n    let [href, match, fetchMatches] = _ref10;\n\n    // This fetcher was cancelled from a prior action submission - force reload\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push([key, href, match, fetchMatches]);\n    } else if (isRevalidationRequired) {\n      let shouldRevalidate = shouldRevalidateLoader(href, match, submission, href, match, isRevalidationRequired, actionResult);\n      if (shouldRevalidate) {\n        revalidatingFetchers.push([key, href, match, fetchMatches]);\n      }\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  let isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(currentLocation, currentMatch, submission, location, match, isRevalidationRequired, actionResult) {\n  let currentUrl = createClientSideURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createClientSideURL(location);\n  let nextParams = match.params; // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n\n  let defaultShouldRevalidate = isNewRouteInstance(currentMatch, match) ||\n  // Clicked the same link, resubmitted a GET form\n  currentUrl.toString() === nextUrl.toString() ||\n  // Search params affect all loaders\n  currentUrl.search !== nextUrl.search ||\n  // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n  isRevalidationRequired;\n  if (match.route.shouldRevalidate) {\n    let routeChoice = match.route.shouldRevalidate(_extends({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate\n    }));\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return defaultShouldRevalidate;\n}\nasync function callLoaderOrAction(type, request, match, matches, basename, isStaticRequest, isRouteRequest, requestContext) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  if (isStaticRequest === void 0) {\n    isStaticRequest = false;\n  }\n  if (isRouteRequest === void 0) {\n    isRouteRequest = false;\n  }\n  let resultType;\n  let result; // Setup a promise we can race against so that abort signals short circuit\n\n  let reject;\n  let abortPromise = new Promise((_, r) => reject = r);\n  let onReject = () => reject();\n  request.signal.addEventListener(\"abort\", onReject);\n  try {\n    let handler = match.route[type];\n    invariant(handler, \"Could not find the \" + type + \" to run on the \\\"\" + match.route.id + \"\\\" route\");\n    result = await Promise.race([handler({\n      request,\n      params: match.params,\n      context: requestContext\n    }), abortPromise]);\n    invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n  if (isResponse(result)) {\n    let status = result.status; // Process redirects\n\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n      let isAbsolute = /^[a-z+]+:\\/\\//i.test(location) || location.startsWith(\"//\"); // Support relative routing in internal redirects\n\n      if (!isAbsolute) {\n        let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n        let routePathnames = getPathContributingMatches(activeMatches).map(match => match.pathnameBase);\n        let resolvedLocation = resolveTo(location, routePathnames, new URL(request.url).pathname);\n        invariant(createPath(resolvedLocation), \"Unable to resolve redirect location: \" + location); // Prepend the basename to the redirect location if we have one\n\n        if (basename) {\n          let path = resolvedLocation.pathname;\n          resolvedLocation.pathname = path === \"/\" ? basename : joinPaths([basename, path]);\n        }\n        location = createPath(resolvedLocation);\n      } // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n      };\n    } // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result\n      };\n    }\n    let data;\n    let contentType = result.headers.get(\"Content-Type\"); // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n  if (result instanceof DeferredData) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result\n    };\n  }\n  return {\n    type: ResultType.data,\n    data: result\n  };\n} // Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\n\nfunction createClientSideRequest(location, signal, submission) {\n  let url = createClientSideURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType,\n      formData\n    } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n  for (let [key, value] of formData.entries()) {\n    invariant(typeof value === \"string\", 'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' + 'please use \"multipart/form-data\" instead.');\n    searchParams.append(key, value);\n  }\n  return searchParams;\n}\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = errors || {}; // Prefer higher error values if lower errors bubble to the same boundary\n\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      } // Clear our any prior loaderData for the throwing route\n\n      loaderData[id] = undefined; // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds && activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data; // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data; // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds); // Process results from our revalidating fetchers\n\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key,, match] = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  return {\n    loaderData,\n    errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\nfunction getInternalRouterError(status, _temp4) {\n  let {\n    pathname,\n    routeId,\n    method\n  } = _temp4 === void 0 ? {} : _temp4;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else {\n      errorMessage = \"Cannot submit binary form data using GET\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponse(status || 500, statusText, new Error(errorMessage), true);\n} // Find any returned redirect errors, starting from the lowest match\n\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash;\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || ResultType.error);\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method);\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method);\n}\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signal, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\nfunction createUseMatchesMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  } // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n} //#endregion\n\nexports.AbortedDeferredError = AbortedDeferredError;\nexports.ErrorResponse = ErrorResponse;\nexports.IDLE_FETCHER = IDLE_FETCHER;\nexports.IDLE_NAVIGATION = IDLE_NAVIGATION;\nexports.UNSAFE_convertRoutesToDataRoutes = convertRoutesToDataRoutes;\nexports.UNSAFE_getPathContributingMatches = getPathContributingMatches;\nexports.createBrowserHistory = createBrowserHistory;\nexports.createHashHistory = createHashHistory;\nexports.createMemoryHistory = createMemoryHistory;\nexports.createPath = createPath;\nexports.createRouter = createRouter;\nexports.createStaticHandler = createStaticHandler;\nexports.defer = defer;\nexports.generatePath = generatePath;\nexports.getStaticContextFromError = getStaticContextFromError;\nexports.getToPathname = getToPathname;\nexports.invariant = invariant;\nexports.isRouteErrorResponse = isRouteErrorResponse;\nexports.joinPaths = joinPaths;\nexports.json = json;\nexports.matchPath = matchPath;\nexports.matchRoutes = matchRoutes;\nexports.normalizePathname = normalizePathname;\nexports.parsePath = parsePath;\nexports.redirect = redirect;\nexports.resolvePath = resolvePath;\nexports.resolveTo = resolveTo;\nexports.stripBasename = stripBasename;\nexports.warning = warning;","map":{"version":3,"names":["Object","defineProperty","exports","value","_extends","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","Action","PopStateEventType","createMemoryHistory","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","location","createLocation","pathname","warning$1","charAt","JSON","stringify","history","createHref","createPath","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","replace","Replace","go","delta","listen","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","substr","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","invariant","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","current","_ref","parsedPath","searchIndex","createClientSideURL","origin","URL","getLocation","validateLocation","defaultView","handlePop","historyState","pushState","error","replaceState","addEventListener","removeEventListener","ResultType","isIndexRoute","route","convertRoutesToDataRoutes","routes","parentPath","allIds","Set","treePath","id","join","children","has","add","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","matchRouteBranch","safelyDecodeURI","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","startsWith","joinPaths","routesMeta","concat","score","computeScore","forEach","_route$path","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","params","pathnameBase","normalizePathname","generatePath","originalPath","warning","_","prefix","__","str","star","pattern","matcher","paramNames","compilePath","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","regexpSource","RegExp","decodeURI","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","set","Response","AbortedDeferredError","DeferredData","constructor","pendingKeys","subscriber","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","trackPromise","promise","race","then","onSettle","catch","get","aborted","delete","done","subscribe","cancel","abort","v","k","resolveData","resolve","size","unwrappedData","_ref2","unwrapTrackedPromise","isTrackedPromise","_tracked","_error","_data","defer","redirect","ErrorResponse","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","isBrowser","createElement","isServer","createRouter","dataRoutes","unlistenHistory","subscribers","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","initialized","m","loader","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","pendingAction","pendingPreventScrollReset","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","initialize","startNavigation","dispose","clear","deleteFetcher","updateState","newState","completeNavigation","_location$state","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","getSavedScrollPosition","navigate","opts","submission","normalizeNavigateOptions","userReplace","pendingError","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createClientSideRequest","pendingActionData","findNearestBoundary","actionOutput","handleAction","shortCircuited","pendingActionError","Request","handleLoaders","actionMatch","getTargetMatch","type","method","routeId","callLoaderOrAction","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","activeSubmission","matchesToLoad","revalidatingFetchers","getMatchesToLoad","fetcher","revalidatingFetcher","_ref3","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","_ref4","findRedirect","processLoaderData","deferredData","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","getFetcher","fetch","abortFetcher","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","isFetchActionRedirect","revalidationRequest","loadId","loadFetcher","_ref5","staleKey","_ref6","_ref7","doneFetcher","resolveDeferredData","_temp","_window","redirectLocation","_isFetchActionRedirect","newOrigin","redirectHistoryAction","currentMatches","fetchersToLoad","all","_ref8","fetchMatches","resolveDeferredResults","_ref9","markFetchersDone","doneKeys","landedId","yeetedKeys","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","userMatches","createUseMatchesMatch","_internalFetchControllers","_internalActiveDeferreds","createStaticHandler","query","_temp2","requestContext","isValidMethod","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","_temp3","find","values","routeData","routeMatch","submit","loadRouteData","isQueryRouteResponse","isRedirectResponse","response","isRouteRequest","Location","context","loaderRequest","getLoaderMatchesUntilBoundary","executedLoaders","processRouteLoaderData","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","isSubmissionNavigation","isFetcher","stripHashFromPath","searchParams","convertFormDataToSearchParams","hasNakedIndexQuery","append","boundaryId","boundaryMatches","findIndex","navigationMatches","isNewLoader","shouldRevalidateLoader","_ref10","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","isNewRouteInstance","currentPath","currentLocation","currentUrl","currentParams","nextUrl","nextParams","defaultShouldRevalidate","routeChoice","isStaticRequest","resultType","onReject","handler","isAbsolute","activeMatches","resolvedLocation","contentType","text","deferred","toUpperCase","body","URLSearchParams","foundError","newLoaderData","mergedLoaderData","eligibleMatches","reverse","hasErrorBoundary","_temp4","errorMessage","obj","isRevalidatingLoader","unwrap","getAll","handle","pathMatches","UNSAFE_convertRoutesToDataRoutes","UNSAFE_getPathContributingMatches"],"sources":["/Users/veyselkartalmis/Desktop/mern-blog/client/node_modules/@remix-run/router/dist/router.cjs.js"],"sourcesContent":["/**\n * @remix-run/router v1.2.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexports.Action = void 0;\n/**\n * The pathname, search, and hash values of a URL.\n */\n\n(function (Action) {\n  Action[\"Pop\"] = \"POP\";\n  Action[\"Push\"] = \"PUSH\";\n  Action[\"Replace\"] = \"REPLACE\";\n})(exports.Action || (exports.Action = {}));\n\nconst PopStateEventType = \"popstate\"; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = exports.Action.Pop;\n  let listener = null;\n\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n\n  function getCurrentLocation() {\n    return entries[index];\n  }\n\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n\n  let history = {\n    get index() {\n      return index;\n    },\n\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getCurrentLocation();\n    },\n\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n\n    push(to, state) {\n      action = exports.Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation\n        });\n      }\n    },\n\n    replace(to, state) {\n      action = exports.Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation\n        });\n      }\n    },\n\n    go(delta) {\n      action = exports.Action.Pop;\n      index = clampIndex(index + delta);\n\n      if (listener) {\n        listener({\n          action,\n          location: getCurrentLocation()\n        });\n      }\n    },\n\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n\n  };\n  return history;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location, to) {\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\n\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nfunction warning$1(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\n\nfunction getHistoryState(location) {\n  return {\n    usr: location.state,\n    key: location.key\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\nfunction parsePath(path) {\n  let parsedPath = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\nfunction createClientSideURL(location) {\n  // window.location.origin is \"null\" (the literal string value) in Firefox\n  // under certain conditions, notably when serving from a local HTML file\n  // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n  let base = typeof window !== \"undefined\" && typeof window.location !== \"undefined\" && window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n  let href = typeof location === \"string\" ? location : createPath(location);\n  invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n  return new URL(href, base);\n}\n\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = exports.Action.Pop;\n  let listener = null;\n\n  function handlePop() {\n    action = exports.Action.Pop;\n\n    if (listener) {\n      listener({\n        action,\n        location: history.location\n      });\n    }\n  }\n\n  function push(to, state) {\n    action = exports.Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location\n      });\n    }\n  }\n\n  function replace(to, state) {\n    action = exports.Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location\n      });\n    }\n  }\n\n  let history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n\n    createHref(to) {\n      return createHref(window, to);\n    },\n\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createClientSideURL(typeof to === \"string\" ? to : createPath(to));\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n\n    push,\n    replace,\n\n    go(n) {\n      return globalHistory.go(n);\n    }\n\n  };\n  return history;\n} //#endregion\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\n\nlet ResultType;\n/**\n * Successful result from a loader or action\n */\n\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\n\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\n\nfunction convertRoutesToDataRoutes(routes, parentPath, allIds) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n\n  if (allIds === void 0) {\n    allIds = new Set();\n  }\n\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!allIds.has(id), \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, {\n        id\n      });\n\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, {\n        id,\n        children: route.children ? convertRoutesToDataRoutes(route.children, treePath, allIds) : undefined\n      });\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n\n  return matches;\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant( // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n\n  routes.forEach((route, index) => {\n    var _route$path;\n\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\n\n\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments; // Optional path segments are denoted by a trailing `?`\n\n  let isOptional = first.endsWith(\"?\"); // Compute the corresponding required segment: `foo?` -> `foo`\n\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = []; // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\"))); // Then if this is an optional value, add all child versions without\n\n  if (isOptional) {\n    result.push(...restExploded);\n  } // for absolute paths, ensure `/` instead of empty segment\n\n\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\n\nconst isSplat = s => s === \"*\";\n\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\n\n\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  let path = originalPath;\n\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n\n  return path.replace(/^:(\\w+)/g, (_, key) => {\n    invariant(params[key] != null, \"Missing \\\":\" + key + \"\\\" param\");\n    return params[key];\n  }).replace(/\\/:(\\w+)/g, (_, key) => {\n    invariant(params[key] != null, \"Missing \\\":\" + key + \"\\\" param\");\n    return \"/\" + params[key];\n  }).replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n    const star = \"*\";\n\n    if (params[star] == null) {\n      // If no splat was provided, trim the trailing slash _unless_ it's\n      // the entire path\n      return str === \"/*\" ? \"/\" : \"\";\n    } // Apply the splat\n\n\n    return \"\" + prefix + params[star];\n  });\n}\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"/([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * @private\n */\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\n\n\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n/**\n * @private\n */\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n\n  let to;\n\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n/**\n * @private\n */\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data) {\n    this.pendingKeys = new Set();\n    this.subscriber = undefined;\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref) => {\n      let [key, value] = _ref;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n  }\n\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.pendingKeys.add(key); // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, null, data), error => this.onSettle(promise, key, error)); // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeys.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    const subscriber = this.subscriber;\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      subscriber && subscriber(false);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    subscriber && subscriber(false);\n    return data;\n  }\n\n  subscribe(fn) {\n    this.subscriber = fn;\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    let subscriber = this.subscriber;\n    subscriber && subscriber(true);\n  }\n\n  async resolveData(signal) {\n    let aborted = false;\n\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n\n}\n\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\n\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n\n  return value._data;\n}\n\nfunction defer(data) {\n  return new DeferredData(data);\n}\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n\n  let responseInit = init;\n\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\n\nclass ErrorResponse {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\n\nfunction isRouteErrorResponse(e) {\n  return e instanceof ErrorResponse;\n}\n\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let dataRoutes = convertRoutesToDataRoutes(init.routes); // Cleanup function for history\n\n  let unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  let subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  let savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  let getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  let getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, init.basename);\n  let initialErrors = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n\n  let initialized = !initialMatches.some(m => m.route.loader) || init.hydrationData != null;\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  let pendingAction = exports.Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  let pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  let pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  let isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n\n  let isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  let cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  let cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  let fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  let incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  let pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  let fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations from their actions\n\n  let fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  let fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  let activeDeferreds = new Map(); // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location\n      } = _ref;\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n\n    if (!state.initialized) {\n      startNavigation(exports.Action.Pop, state.location);\n    }\n\n    return router;\n  } // Clean up a router and it's side effects\n\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  } // Subscribe to state updates for the router\n\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  } // Update our state and notify the calling context of the change\n\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(subscriber => subscriber(state));\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n\n  function completeNavigation(location, newState) {\n    var _location$state;\n\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    } // Always preserve any existing loaderData from re-used routes\n\n\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;\n    updateState(_extends({}, newState, {\n      // matches, errors, fetchers go through as-is\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData ? false : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset\n    }));\n\n    if (isUninterruptedRevalidation) ; else if (pendingAction === exports.Action.Pop) ; else if (pendingAction === exports.Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === exports.Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n\n    pendingAction = exports.Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(to, opts);\n    let location = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n\n    location = _extends({}, location, init.history.encodeLocation(location));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = exports.Action.Push;\n\n    if (userReplace === true) {\n      historyAction = exports.Action.Replace;\n    } else if (userReplace === false) ; else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = exports.Action.Replace;\n    }\n\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace\n    });\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename); // Short circuit with a 404 on the root error boundary if we match nothing\n\n    if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes); // Cancel all pending deferred on 404s since we don't keep any routes\n\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      });\n      return;\n    } // Short circuit if it's only a hash change\n\n\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(location, {\n        matches\n      });\n      return;\n    } // Create a controller/Request for this navigation\n\n\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace\n      });\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation = _extends({\n        state: \"loading\",\n        location\n      }, opts.submission);\n\n      loadingNavigation = navigation; // Create a GET request for the loaders\n\n      request = new Request(request.url, {\n        signal: request.signal\n      });\n    } // Call loaders\n\n\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.replace, pendingActionData, pendingError);\n\n    if (shortCircuited) {\n      return;\n    } // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n\n\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches\n    }, pendingActionData ? {\n      actionData: pendingActionData\n    } : {}, {\n      loaderData,\n      errors\n    }));\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n\n  async function handleAction(request, location, submission, matches, opts) {\n    interruptActiveLoads(); // Put us in a submitting state\n\n    let navigation = _extends({\n      state: \"submitting\",\n      location\n    }, submission);\n\n    updateState({\n      navigation\n    }); // Call our action and get the result\n\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, router.basename);\n\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace;\n\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace = result.location === state.location.pathname + state.location.search;\n      }\n\n      await startRedirectNavigation(state, result, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n\n      if ((opts && opts.replace) !== true) {\n        pendingAction = exports.Action.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, replace, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n\n    if (!loadingNavigation) {\n      let navigation = _extends({\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      }, submission);\n\n      loadingNavigation = navigation;\n    } // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n\n\n    let activeSubmission = submission ? submission : loadingNavigation.formMethod && loadingNavigation.formAction && loadingNavigation.formData && loadingNavigation.formEncType ? {\n      formMethod: loadingNavigation.formMethod,\n      formAction: loadingNavigation.formAction,\n      formData: loadingNavigation.formData,\n      formEncType: loadingNavigation.formEncType\n    } : undefined;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches); // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId)); // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null\n      }, pendingActionData ? {\n        actionData: pendingActionData\n      } : {}));\n      return {\n        shortCircuited: true\n      };\n    } // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n\n\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(_ref2 => {\n        let [key] = _ref2;\n        let fetcher = state.fetchers.get(key);\n        let revalidatingFetcher = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(_extends({\n        navigation: loadingNavigation\n      }, actionData ? Object.keys(actionData).length === 0 ? {\n        actionData: null\n      } : {\n        actionData\n      } : {}, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(_ref3 => {\n      let [key] = _ref3;\n      return fetchControllers.set(key, pendingNavigationController);\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    } // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n\n\n    revalidatingFetchers.forEach(_ref4 => {\n      let [key] = _ref4;\n      return fetchControllers.delete(key);\n    }); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds); // Wire up subscribers to update loaderData as promises settle\n\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    return _extends({\n      loaderData,\n      errors\n    }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: href\n      }));\n      return;\n    }\n\n    let {\n      path,\n      submission\n    } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n\n    fetchLoadMatches.set(key, [path, match, matches]);\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    } // Put this fetcher into it's submitting state\n\n\n    let existingFetcher = state.fetchers.get(key);\n\n    let fetcher = _extends({\n      state: \"submitting\"\n    }, submission, {\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true\n    });\n\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the action for the fetcher\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, router.basename);\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n\n      let loadingFetcher = _extends({\n        state: \"loading\"\n      }, submission, {\n        data: undefined,\n        \" _hasFetcherDoneAnything \": true\n      });\n\n      state.fetchers.set(key, loadingFetcher);\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n      return startRedirectNavigation(state, actionResult, {\n        isFetchActionRedirect: true\n      });\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"defer() is not supported in actions\");\n    } // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n\n\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(nextLocation, abortController.signal);\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(dataRoutes, state.navigation.location, init.basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = _extends({\n      state: \"loading\",\n      data: actionResult.data\n    }, submission, {\n      \" _hasFetcherDoneAnything \": true\n    });\n\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, {\n      [match.route.id]: actionResult.data\n    }, undefined, // No need to send through errors since we short circuit above\n    fetchLoadMatches); // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n\n    revalidatingFetchers.filter(_ref5 => {\n      let [staleKey] = _ref5;\n      return staleKey !== key;\n    }).forEach(_ref6 => {\n      let [staleKey] = _ref6;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = {\n        state: \"loading\",\n        data: existingFetcher && existingFetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      fetchControllers.set(staleKey, abortController);\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(_ref7 => {\n      let [staleKey] = _ref7;\n      return fetchControllers.delete(staleKey);\n    });\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    let doneFetcher = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true\n    };\n    state.fetchers.set(key, doneFetcher);\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState(_extends({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors)\n      }, didAbortFetchLoads ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      isRevalidationRequired = false;\n    }\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n\n  async function handleFetcherLoader(key, routeId, path, match, matches, submission) {\n    let existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n\n    let loadingFetcher = _extends({\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    }, submission, {\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true\n    });\n\n    state.fetchers.set(key, loadingFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the loader for this fetcher route match\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match, matches, router.basename); // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    } // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n\n\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    } // If the loader threw a redirect Response, start a new REPLACE navigation\n\n\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result);\n      return;\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error\n        }\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n    let doneFetcher = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n\n  async function startRedirectNavigation(state, redirect, _temp) {\n    var _window;\n\n    let {\n      submission,\n      replace,\n      isFetchActionRedirect\n    } = _temp === void 0 ? {} : _temp;\n\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(state.location, redirect.location, // TODO: This can be removed once we get rid of useTransition in Remix v2\n    _extends({\n      _isRedirect: true\n    }, isFetchActionRedirect ? {\n      _isFetchActionRedirect: true\n    } : {}));\n    invariant(redirectLocation, \"Expected a location on the redirect navigation\"); // Check if this an external redirect that goes to a new origin\n\n    if (typeof ((_window = window) == null ? void 0 : _window.location) !== \"undefined\") {\n      let newOrigin = createClientSideURL(redirect.location).origin;\n\n      if (window.location.origin !== newOrigin) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n\n        return;\n      }\n    } // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n\n\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? exports.Action.Replace : exports.Action.Push; // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n\n    let {\n      formMethod,\n      formAction,\n      formEncType,\n      formData\n    } = state.navigation;\n\n    if (!submission && formMethod && formAction && formData && formEncType) {\n      submission = {\n        formMethod,\n        formAction,\n        formEncType,\n        formData\n      };\n    } // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n\n\n    if (redirectPreserveMethodStatusCodes.has(redirect.status) && submission && isMutationMethod(submission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, submission, {\n          formAction: redirect.location\n        })\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: submission ? submission.formMethod : undefined,\n          formAction: submission ? submission.formAction : undefined,\n          formEncType: submission ? submission.formEncType : undefined,\n          formData: submission ? submission.formData : undefined\n        }\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, router.basename)), ...fetchersToLoad.map(_ref8 => {\n      let [, href, match, fetchMatches] = _ref8;\n      return callLoaderOrAction(\"loader\", createClientSideRequest(href, request.signal), match, fetchMatches, router.basename);\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, request.signal, false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(_ref9 => {\n      let [,, match] = _ref9;\n      return match;\n    }), fetcherResults, request.signal, true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds()); // Abort in-flight fetcher loads\n\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key, routeId, error) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    });\n  }\n\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n\n    getScrollRestorationKey = getKey || (location => location.key); // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n\n    get state() {\n      return state;\n    },\n\n    get routes() {\n      return dataRoutes;\n    },\n\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n  let basename = (opts ? opts.basename : null) || \"/\";\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n\n  async function query(request, _temp2) {\n    let {\n      requestContext\n    } = _temp2 === void 0 ? {} : _temp2;\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"head\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n\n    if (isResponse(result)) {\n      return result;\n    } // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n\n\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n\n\n  async function queryRoute(request, _temp3) {\n    let {\n      routeId,\n      requestContext\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"head\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext, match);\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    } // Pick off the right state value to return\n\n\n    let routeData = [result.actionData, result.loaderData].find(v => v);\n    return Object.values(routeData || {})[0];\n  }\n\n  async function queryImpl(request, location, matches, requestContext, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n        return result;\n      }\n\n      let result = await loadRouteData(request, matches, requestContext, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n\n        return e.response;\n      } // Redirects are always returned since they don't propagate to catch\n      // boundaries\n\n\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n\n      throw e;\n    }\n  }\n\n  async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {\n    let result;\n\n    if (!actionMatch.route.action) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n\n      if (isRouteRequest) {\n        throw error;\n      }\n\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, basename, true, isRouteRequest, requestContext);\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted\");\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, requestContext, undefined, {\n        [boundaryMatch.route.id]: result.error\n      }); // action status codes take precedence over loader status codes\n\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    } // Create a GET request for the loaders\n\n\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n\n  async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null; // Short circuit if we have no loaders to run (queryRoute())\n\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader); // Short circuit if we have no loaders to run (query())\n\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {}\n      };\n    }\n\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, basename, true, isRouteRequest, requestContext))]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted\");\n    }\n\n    let executedLoaders = new Set();\n    results.forEach((result, i) => {\n      executedLoaders.add(matchesToLoad[i].route.id); // Can't do anything with these without the Remix side of things, so just\n      // cancel them for now\n\n      if (isDeferredResult(result)) {\n        result.deferredData.cancel();\n      }\n    }); // Process and commit output from loaders\n\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError); // Add a null for any non-loader matches for proper revalidation on the client\n\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches\n    });\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n\n  return newContext;\n}\n\nfunction isSubmissionNavigation(opts) {\n  return opts != null && \"formData\" in opts;\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\n\nfunction normalizeNavigateOptions(to, opts, isFetcher) {\n  if (isFetcher === void 0) {\n    isFetcher = false;\n  }\n\n  let path = typeof to === \"string\" ? to : createPath(to); // Return location verbatim on non-submission navigations\n\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  } // Create a Submission on non-GET navigations\n\n\n  let submission;\n\n  if (opts.formData) {\n    submission = {\n      formMethod: opts.formMethod || \"get\",\n      formAction: stripHashFromPath(path),\n      formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n      formData: opts.formData\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return {\n        path,\n        submission\n      };\n    }\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n\n  let parsedPath = parsePath(path);\n\n  try {\n    let searchParams = convertFormDataToSearchParams(opts.formData); // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n\n    if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n      searchParams.append(\"index\", \"\");\n    }\n\n    parsedPath.search = \"?\" + searchParams;\n  } catch (e) {\n    return {\n      path,\n      error: getInternalRouterError(400)\n    };\n  }\n\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined; // Pick navigation matches that are net-new or qualify for revalidation\n\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => match.route.loader != null && (isNewLoader(state.loaderData, state.matches[index], match) || // If this route had a pending deferred cancelled it must be revalidated\n  cancelledDeferredRoutes.some(id => id === match.route.id) || shouldRevalidateLoader(state.location, state.matches[index], submission, location, match, isRevalidationRequired, actionResult))); // Pick fetcher.loads that need to be revalidated\n\n  let revalidatingFetchers = [];\n  fetchLoadMatches && fetchLoadMatches.forEach((_ref10, key) => {\n    let [href, match, fetchMatches] = _ref10;\n\n    // This fetcher was cancelled from a prior action submission - force reload\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push([key, href, match, fetchMatches]);\n    } else if (isRevalidationRequired) {\n      let shouldRevalidate = shouldRevalidateLoader(href, match, submission, href, match, isRevalidationRequired, actionResult);\n\n      if (shouldRevalidate) {\n        revalidatingFetchers.push([key, href, match, fetchMatches]);\n      }\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew = // [a] -> [a, b]\n  !currentMatch || // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  let isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (// param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\n\nfunction shouldRevalidateLoader(currentLocation, currentMatch, submission, location, match, isRevalidationRequired, actionResult) {\n  let currentUrl = createClientSideURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createClientSideURL(location);\n  let nextParams = match.params; // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n\n  let defaultShouldRevalidate = isNewRouteInstance(currentMatch, match) || // Clicked the same link, resubmitted a GET form\n  currentUrl.toString() === nextUrl.toString() || // Search params affect all loaders\n  currentUrl.search !== nextUrl.search || // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n  isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    let routeChoice = match.route.shouldRevalidate(_extends({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate\n    }));\n\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(type, request, match, matches, basename, isStaticRequest, isRouteRequest, requestContext) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  if (isStaticRequest === void 0) {\n    isStaticRequest = false;\n  }\n\n  if (isRouteRequest === void 0) {\n    isRouteRequest = false;\n  }\n\n  let resultType;\n  let result; // Setup a promise we can race against so that abort signals short circuit\n\n  let reject;\n  let abortPromise = new Promise((_, r) => reject = r);\n\n  let onReject = () => reject();\n\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant(handler, \"Could not find the \" + type + \" to run on the \\\"\" + match.route.id + \"\\\" route\");\n    result = await Promise.race([handler({\n      request,\n      params: match.params,\n      context: requestContext\n    }), abortPromise]);\n    invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (isResponse(result)) {\n    let status = result.status; // Process redirects\n\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n      let isAbsolute = /^[a-z+]+:\\/\\//i.test(location) || location.startsWith(\"//\"); // Support relative routing in internal redirects\n\n      if (!isAbsolute) {\n        let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n        let routePathnames = getPathContributingMatches(activeMatches).map(match => match.pathnameBase);\n        let resolvedLocation = resolveTo(location, routePathnames, new URL(request.url).pathname);\n        invariant(createPath(resolvedLocation), \"Unable to resolve redirect location: \" + location); // Prepend the basename to the redirect location if we have one\n\n        if (basename) {\n          let path = resolvedLocation.pathname;\n          resolvedLocation.pathname = path === \"/\" ? basename : joinPaths([basename, path]);\n        }\n\n        location = createPath(resolvedLocation);\n      } // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n\n\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n      };\n    } // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n\n\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result\n      };\n    }\n\n    let data;\n    let contentType = result.headers.get(\"Content-Type\"); // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n\n  if (result instanceof DeferredData) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result\n    };\n  }\n\n  return {\n    type: ResultType.data,\n    data: result\n  };\n} // Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\n\n\nfunction createClientSideRequest(location, signal, submission) {\n  let url = createClientSideURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType,\n      formData\n    } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    invariant(typeof value === \"string\", 'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' + 'please use \"multipart/form-data\" instead.');\n    searchParams.append(key, value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {}; // Prefer higher error values if lower errors bubble to the same boundary\n\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      } // Clear our any prior loaderData for the throwing route\n\n\n      loaderData[id] = undefined; // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds && activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data; // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data; // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\n\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds); // Process results from our revalidating fetchers\n\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key,, match] = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return {\n    loaderData,\n    errors\n  };\n}\n\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n\n  for (let match of matches) {\n    let id = match.route.id;\n\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\n\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\n\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\n\nfunction getInternalRouterError(status, _temp4) {\n  let {\n    pathname,\n    routeId,\n    method\n  } = _temp4 === void 0 ? {} : _temp4;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else {\n      errorMessage = \"Cannot submit binary form data using GET\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n\n  return new ErrorResponse(status || 500, statusText, new Error(errorMessage), true);\n} // Find any returned redirect errors, starting from the lowest match\n\n\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\n\nfunction isHashChangeOnly(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash;\n}\n\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\n\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || ResultType.error);\n}\n\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method);\n}\n\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method);\n}\n\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signal, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n\n  let aborted = await result.deferredData.resolveData(signal);\n\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\n\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\n\nfunction createUseMatchesMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\n\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  } // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n\n\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n} //#endregion\n\nexports.AbortedDeferredError = AbortedDeferredError;\nexports.ErrorResponse = ErrorResponse;\nexports.IDLE_FETCHER = IDLE_FETCHER;\nexports.IDLE_NAVIGATION = IDLE_NAVIGATION;\nexports.UNSAFE_convertRoutesToDataRoutes = convertRoutesToDataRoutes;\nexports.UNSAFE_getPathContributingMatches = getPathContributingMatches;\nexports.createBrowserHistory = createBrowserHistory;\nexports.createHashHistory = createHashHistory;\nexports.createMemoryHistory = createMemoryHistory;\nexports.createPath = createPath;\nexports.createRouter = createRouter;\nexports.createStaticHandler = createStaticHandler;\nexports.defer = defer;\nexports.generatePath = generatePath;\nexports.getStaticContextFromError = getStaticContextFromError;\nexports.getToPathname = getToPathname;\nexports.invariant = invariant;\nexports.isRouteErrorResponse = isRouteErrorResponse;\nexports.joinPaths = joinPaths;\nexports.json = json;\nexports.matchPath = matchPath;\nexports.matchRoutes = matchRoutes;\nexports.normalizePathname = normalizePathname;\nexports.parsePath = parsePath;\nexports.redirect = redirect;\nexports.resolvePath = resolvePath;\nexports.resolveTo = resolveTo;\nexports.stripBasename = stripBasename;\nexports.warning = warning;\n//# sourceMappingURL=router.cjs.js.map\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAE7D,SAASC,QAAQA,CAAA,EAAG;EAClBA,QAAQ,GAAGJ,MAAM,CAACK,MAAM,GAAGL,MAAM,CAACK,MAAM,CAACC,IAAI,CAAC,CAAC,GAAG,UAAUC,MAAM,EAAE;IAClE,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,SAAS,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;MACzC,IAAIG,MAAM,GAAGF,SAAS,CAACD,CAAC,CAAC;MAEzB,KAAK,IAAII,GAAG,IAAID,MAAM,EAAE;QACtB,IAAIX,MAAM,CAACa,SAAS,CAACC,cAAc,CAACC,IAAI,CAACJ,MAAM,EAAEC,GAAG,CAAC,EAAE;UACrDL,MAAM,CAACK,GAAG,CAAC,GAAGD,MAAM,CAACC,GAAG,CAAC;QAC3B;MACF;IACF;IAEA,OAAOL,MAAM;EACf,CAAC;EACD,OAAOH,QAAQ,CAACY,KAAK,CAAC,IAAI,EAAEP,SAAS,CAAC;AACxC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACAP,OAAO,CAACe,MAAM,GAAG,KAAK,CAAC;AACvB;AACA;AACA;;AAEA,CAAC,UAAUA,MAAM,EAAE;EACjBA,MAAM,CAAC,KAAK,CAAC,GAAG,KAAK;EACrBA,MAAM,CAAC,MAAM,CAAC,GAAG,MAAM;EACvBA,MAAM,CAAC,SAAS,CAAC,GAAG,SAAS;AAC/B,CAAC,EAAEf,OAAO,CAACe,MAAM,KAAKf,OAAO,CAACe,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;AAE3C,MAAMC,iBAAiB,GAAG,UAAU,CAAC,CAAC;AACtC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAASC,mBAAmBA,CAACC,OAAO,EAAE;EACpC,IAAIA,OAAO,KAAK,KAAK,CAAC,EAAE;IACtBA,OAAO,GAAG,CAAC,CAAC;EACd;EAEA,IAAI;IACFC,cAAc,GAAG,CAAC,GAAG,CAAC;IACtBC,YAAY;IACZC,QAAQ,GAAG;EACb,CAAC,GAAGH,OAAO;EACX,IAAII,OAAO,CAAC,CAAC;;EAEbA,OAAO,GAAGH,cAAc,CAACI,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAKC,oBAAoB,CAACF,KAAK,EAAE,OAAOA,KAAK,KAAK,QAAQ,GAAG,IAAI,GAAGA,KAAK,CAACG,KAAK,EAAEF,KAAK,KAAK,CAAC,GAAG,SAAS,GAAGG,SAAS,CAAC,CAAC;EAChK,IAAIH,KAAK,GAAGI,UAAU,CAACT,YAAY,IAAI,IAAI,GAAGE,OAAO,CAACd,MAAM,GAAG,CAAC,GAAGY,YAAY,CAAC;EAChF,IAAIU,MAAM,GAAG9B,OAAO,CAACe,MAAM,CAACgB,GAAG;EAC/B,IAAIC,QAAQ,GAAG,IAAI;EAEnB,SAASH,UAAUA,CAACI,CAAC,EAAE;IACrB,OAAOC,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,GAAG,CAACH,CAAC,EAAE,CAAC,CAAC,EAAEX,OAAO,CAACd,MAAM,GAAG,CAAC,CAAC;EACrD;EAEA,SAAS6B,kBAAkBA,CAAA,EAAG;IAC5B,OAAOf,OAAO,CAACG,KAAK,CAAC;EACvB;EAEA,SAASC,oBAAoBA,CAACY,EAAE,EAAEX,KAAK,EAAEjB,GAAG,EAAE;IAC5C,IAAIiB,KAAK,KAAK,KAAK,CAAC,EAAE;MACpBA,KAAK,GAAG,IAAI;IACd;IAEA,IAAIY,QAAQ,GAAGC,cAAc,CAAClB,OAAO,GAAGe,kBAAkB,CAAC,CAAC,CAACI,QAAQ,GAAG,GAAG,EAAEH,EAAE,EAAEX,KAAK,EAAEjB,GAAG,CAAC;IAC5FgC,SAAS,CAACH,QAAQ,CAACE,QAAQ,CAACE,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE,0DAA0D,GAAGC,IAAI,CAACC,SAAS,CAACP,EAAE,CAAC,CAAC;IAC/H,OAAOC,QAAQ;EACjB;EAEA,IAAIO,OAAO,GAAG;IACZ,IAAIrB,KAAKA,CAAA,EAAG;MACV,OAAOA,KAAK;IACd,CAAC;IAED,IAAIK,MAAMA,CAAA,EAAG;MACX,OAAOA,MAAM;IACf,CAAC;IAED,IAAIS,QAAQA,CAAA,EAAG;MACb,OAAOF,kBAAkB,CAAC,CAAC;IAC7B,CAAC;IAEDU,UAAUA,CAACT,EAAE,EAAE;MACb,OAAO,OAAOA,EAAE,KAAK,QAAQ,GAAGA,EAAE,GAAGU,UAAU,CAACV,EAAE,CAAC;IACrD,CAAC;IAEDW,cAAcA,CAACX,EAAE,EAAE;MACjB,IAAIY,IAAI,GAAG,OAAOZ,EAAE,KAAK,QAAQ,GAAGa,SAAS,CAACb,EAAE,CAAC,GAAGA,EAAE;MACtD,OAAO;QACLG,QAAQ,EAAES,IAAI,CAACT,QAAQ,IAAI,EAAE;QAC7BW,MAAM,EAAEF,IAAI,CAACE,MAAM,IAAI,EAAE;QACzBC,IAAI,EAAEH,IAAI,CAACG,IAAI,IAAI;MACrB,CAAC;IACH,CAAC;IAEDC,IAAIA,CAAChB,EAAE,EAAEX,KAAK,EAAE;MACdG,MAAM,GAAG9B,OAAO,CAACe,MAAM,CAACwC,IAAI;MAC5B,IAAIC,YAAY,GAAG9B,oBAAoB,CAACY,EAAE,EAAEX,KAAK,CAAC;MAClDF,KAAK,IAAI,CAAC;MACVH,OAAO,CAACmC,MAAM,CAAChC,KAAK,EAAEH,OAAO,CAACd,MAAM,EAAEgD,YAAY,CAAC;MAEnD,IAAInC,QAAQ,IAAIW,QAAQ,EAAE;QACxBA,QAAQ,CAAC;UACPF,MAAM;UACNS,QAAQ,EAAEiB;QACZ,CAAC,CAAC;MACJ;IACF,CAAC;IAEDE,OAAOA,CAACpB,EAAE,EAAEX,KAAK,EAAE;MACjBG,MAAM,GAAG9B,OAAO,CAACe,MAAM,CAAC4C,OAAO;MAC/B,IAAIH,YAAY,GAAG9B,oBAAoB,CAACY,EAAE,EAAEX,KAAK,CAAC;MAClDL,OAAO,CAACG,KAAK,CAAC,GAAG+B,YAAY;MAE7B,IAAInC,QAAQ,IAAIW,QAAQ,EAAE;QACxBA,QAAQ,CAAC;UACPF,MAAM;UACNS,QAAQ,EAAEiB;QACZ,CAAC,CAAC;MACJ;IACF,CAAC;IAEDI,EAAEA,CAACC,KAAK,EAAE;MACR/B,MAAM,GAAG9B,OAAO,CAACe,MAAM,CAACgB,GAAG;MAC3BN,KAAK,GAAGI,UAAU,CAACJ,KAAK,GAAGoC,KAAK,CAAC;MAEjC,IAAI7B,QAAQ,EAAE;QACZA,QAAQ,CAAC;UACPF,MAAM;UACNS,QAAQ,EAAEF,kBAAkB,CAAC;QAC/B,CAAC,CAAC;MACJ;IACF,CAAC;IAEDyB,MAAMA,CAACC,EAAE,EAAE;MACT/B,QAAQ,GAAG+B,EAAE;MACb,OAAO,MAAM;QACX/B,QAAQ,GAAG,IAAI;MACjB,CAAC;IACH;EAEF,CAAC;EACD,OAAOc,OAAO;AAChB,CAAC,CAAC;AACF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASkB,oBAAoBA,CAAC9C,OAAO,EAAE;EACrC,IAAIA,OAAO,KAAK,KAAK,CAAC,EAAE;IACtBA,OAAO,GAAG,CAAC,CAAC;EACd;EAEA,SAAS+C,qBAAqBA,CAACC,MAAM,EAAEC,aAAa,EAAE;IACpD,IAAI;MACF1B,QAAQ;MACRW,MAAM;MACNC;IACF,CAAC,GAAGa,MAAM,CAAC3B,QAAQ;IACnB,OAAOC,cAAc,CAAC,EAAE,EAAE;MACxBC,QAAQ;MACRW,MAAM;MACNC;IACF,CAAC;IAAE;IACHc,aAAa,CAACxC,KAAK,IAAIwC,aAAa,CAACxC,KAAK,CAACyC,GAAG,IAAI,IAAI,EAAED,aAAa,CAACxC,KAAK,IAAIwC,aAAa,CAACxC,KAAK,CAACjB,GAAG,IAAI,SAAS,CAAC;EACtH;EAEA,SAAS2D,iBAAiBA,CAACH,MAAM,EAAE5B,EAAE,EAAE;IACrC,OAAO,OAAOA,EAAE,KAAK,QAAQ,GAAGA,EAAE,GAAGU,UAAU,CAACV,EAAE,CAAC;EACrD;EAEA,OAAOgC,kBAAkB,CAACL,qBAAqB,EAAEI,iBAAiB,EAAE,IAAI,EAAEnD,OAAO,CAAC;AACpF,CAAC,CAAC;AACF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASqD,iBAAiBA,CAACrD,OAAO,EAAE;EAClC,IAAIA,OAAO,KAAK,KAAK,CAAC,EAAE;IACtBA,OAAO,GAAG,CAAC,CAAC;EACd;EAEA,SAASsD,kBAAkBA,CAACN,MAAM,EAAEC,aAAa,EAAE;IACjD,IAAI;MACF1B,QAAQ,GAAG,GAAG;MACdW,MAAM,GAAG,EAAE;MACXC,IAAI,GAAG;IACT,CAAC,GAAGF,SAAS,CAACe,MAAM,CAAC3B,QAAQ,CAACc,IAAI,CAACoB,MAAM,CAAC,CAAC,CAAC,CAAC;IAC7C,OAAOjC,cAAc,CAAC,EAAE,EAAE;MACxBC,QAAQ;MACRW,MAAM;MACNC;IACF,CAAC;IAAE;IACHc,aAAa,CAACxC,KAAK,IAAIwC,aAAa,CAACxC,KAAK,CAACyC,GAAG,IAAI,IAAI,EAAED,aAAa,CAACxC,KAAK,IAAIwC,aAAa,CAACxC,KAAK,CAACjB,GAAG,IAAI,SAAS,CAAC;EACtH;EAEA,SAASgE,cAAcA,CAACR,MAAM,EAAE5B,EAAE,EAAE;IAClC,IAAIqC,IAAI,GAAGT,MAAM,CAACU,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC;IAChD,IAAIC,IAAI,GAAG,EAAE;IAEb,IAAIH,IAAI,IAAIA,IAAI,CAACI,YAAY,CAAC,MAAM,CAAC,EAAE;MACrC,IAAIC,GAAG,GAAGd,MAAM,CAAC3B,QAAQ,CAACuC,IAAI;MAC9B,IAAIG,SAAS,GAAGD,GAAG,CAACE,OAAO,CAAC,GAAG,CAAC;MAChCJ,IAAI,GAAGG,SAAS,KAAK,CAAC,CAAC,GAAGD,GAAG,GAAGA,GAAG,CAACG,KAAK,CAAC,CAAC,EAAEF,SAAS,CAAC;IACzD;IAEA,OAAOH,IAAI,GAAG,GAAG,IAAI,OAAOxC,EAAE,KAAK,QAAQ,GAAGA,EAAE,GAAGU,UAAU,CAACV,EAAE,CAAC,CAAC;EACpE;EAEA,SAAS8C,oBAAoBA,CAAC7C,QAAQ,EAAED,EAAE,EAAE;IAC1CI,SAAS,CAACH,QAAQ,CAACE,QAAQ,CAACE,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE,4DAA4D,GAAGC,IAAI,CAACC,SAAS,CAACP,EAAE,CAAC,GAAG,GAAG,CAAC;EACzI;EAEA,OAAOgC,kBAAkB,CAACE,kBAAkB,EAAEE,cAAc,EAAEU,oBAAoB,EAAElE,OAAO,CAAC;AAC9F,CAAC,CAAC;AACF;AACA;AACA;;AAEA;AACA;AACA;;AAEA,SAASmE,SAASA,CAACpF,KAAK,EAAEqF,OAAO,EAAE;EACjC,IAAIrF,KAAK,KAAK,KAAK,IAAIA,KAAK,KAAK,IAAI,IAAI,OAAOA,KAAK,KAAK,WAAW,EAAE;IACrE,MAAM,IAAIsF,KAAK,CAACD,OAAO,CAAC;EAC1B;AACF;AAEA,SAAS5C,SAASA,CAAC8C,IAAI,EAAEF,OAAO,EAAE;EAChC,IAAI,CAACE,IAAI,EAAE;IACT;IACA,IAAI,OAAOC,OAAO,KAAK,WAAW,EAAEA,OAAO,CAACC,IAAI,CAACJ,OAAO,CAAC;IAEzD,IAAI;MACF;MACA;MACA;MACA;MACA;MACA,MAAM,IAAIC,KAAK,CAACD,OAAO,CAAC,CAAC,CAAC;IAC5B,CAAC,CAAC,OAAOK,CAAC,EAAE,CAAC;EACf;AACF;AAEA,SAASC,SAASA,CAAA,EAAG;EACnB,OAAO1D,IAAI,CAAC2D,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACrB,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;AAChD;AACA;AACA;AACA;;AAGA,SAASsB,eAAeA,CAACxD,QAAQ,EAAE;EACjC,OAAO;IACL6B,GAAG,EAAE7B,QAAQ,CAACZ,KAAK;IACnBjB,GAAG,EAAE6B,QAAQ,CAAC7B;EAChB,CAAC;AACH;AACA;AACA;AACA;;AAGA,SAAS8B,cAAcA,CAACwD,OAAO,EAAE1D,EAAE,EAAEX,KAAK,EAAEjB,GAAG,EAAE;EAC/C,IAAIiB,KAAK,KAAK,KAAK,CAAC,EAAE;IACpBA,KAAK,GAAG,IAAI;EACd;EAEA,IAAIY,QAAQ,GAAGrC,QAAQ,CAAC;IACtBuC,QAAQ,EAAE,OAAOuD,OAAO,KAAK,QAAQ,GAAGA,OAAO,GAAGA,OAAO,CAACvD,QAAQ;IAClEW,MAAM,EAAE,EAAE;IACVC,IAAI,EAAE;EACR,CAAC,EAAE,OAAOf,EAAE,KAAK,QAAQ,GAAGa,SAAS,CAACb,EAAE,CAAC,GAAGA,EAAE,EAAE;IAC9CX,KAAK;IACL;IACA;IACA;IACA;IACAjB,GAAG,EAAE4B,EAAE,IAAIA,EAAE,CAAC5B,GAAG,IAAIA,GAAG,IAAIkF,SAAS,CAAC;EACxC,CAAC,CAAC;EAEF,OAAOrD,QAAQ;AACjB;AACA;AACA;AACA;;AAEA,SAASS,UAAUA,CAACiD,IAAI,EAAE;EACxB,IAAI;IACFxD,QAAQ,GAAG,GAAG;IACdW,MAAM,GAAG,EAAE;IACXC,IAAI,GAAG;EACT,CAAC,GAAG4C,IAAI;EACR,IAAI7C,MAAM,IAAIA,MAAM,KAAK,GAAG,EAAEX,QAAQ,IAAIW,MAAM,CAACT,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,GAAGS,MAAM,GAAG,GAAG,GAAGA,MAAM;EAC1F,IAAIC,IAAI,IAAIA,IAAI,KAAK,GAAG,EAAEZ,QAAQ,IAAIY,IAAI,CAACV,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,GAAGU,IAAI,GAAG,GAAG,GAAGA,IAAI;EAChF,OAAOZ,QAAQ;AACjB;AACA;AACA;AACA;;AAEA,SAASU,SAASA,CAACD,IAAI,EAAE;EACvB,IAAIgD,UAAU,GAAG,CAAC,CAAC;EAEnB,IAAIhD,IAAI,EAAE;IACR,IAAI+B,SAAS,GAAG/B,IAAI,CAACgC,OAAO,CAAC,GAAG,CAAC;IAEjC,IAAID,SAAS,IAAI,CAAC,EAAE;MAClBiB,UAAU,CAAC7C,IAAI,GAAGH,IAAI,CAACuB,MAAM,CAACQ,SAAS,CAAC;MACxC/B,IAAI,GAAGA,IAAI,CAACuB,MAAM,CAAC,CAAC,EAAEQ,SAAS,CAAC;IAClC;IAEA,IAAIkB,WAAW,GAAGjD,IAAI,CAACgC,OAAO,CAAC,GAAG,CAAC;IAEnC,IAAIiB,WAAW,IAAI,CAAC,EAAE;MACpBD,UAAU,CAAC9C,MAAM,GAAGF,IAAI,CAACuB,MAAM,CAAC0B,WAAW,CAAC;MAC5CjD,IAAI,GAAGA,IAAI,CAACuB,MAAM,CAAC,CAAC,EAAE0B,WAAW,CAAC;IACpC;IAEA,IAAIjD,IAAI,EAAE;MACRgD,UAAU,CAACzD,QAAQ,GAAGS,IAAI;IAC5B;EACF;EAEA,OAAOgD,UAAU;AACnB;AACA,SAASE,mBAAmBA,CAAC7D,QAAQ,EAAE;EACrC;EACA;EACA;EACA,IAAIoC,IAAI,GAAG,OAAOT,MAAM,KAAK,WAAW,IAAI,OAAOA,MAAM,CAAC3B,QAAQ,KAAK,WAAW,IAAI2B,MAAM,CAAC3B,QAAQ,CAAC8D,MAAM,KAAK,MAAM,GAAGnC,MAAM,CAAC3B,QAAQ,CAAC8D,MAAM,GAAGnC,MAAM,CAAC3B,QAAQ,CAACuC,IAAI;EACvK,IAAIA,IAAI,GAAG,OAAOvC,QAAQ,KAAK,QAAQ,GAAGA,QAAQ,GAAGS,UAAU,CAACT,QAAQ,CAAC;EACzE8C,SAAS,CAACV,IAAI,EAAE,qEAAqE,GAAGG,IAAI,CAAC;EAC7F,OAAO,IAAIwB,GAAG,CAACxB,IAAI,EAAEH,IAAI,CAAC;AAC5B;AAEA,SAASL,kBAAkBA,CAACiC,WAAW,EAAExD,UAAU,EAAEyD,gBAAgB,EAAEtF,OAAO,EAAE;EAC9E,IAAIA,OAAO,KAAK,KAAK,CAAC,EAAE;IACtBA,OAAO,GAAG,CAAC,CAAC;EACd;EAEA,IAAI;IACFgD,MAAM,GAAGU,QAAQ,CAAC6B,WAAW;IAC7BpF,QAAQ,GAAG;EACb,CAAC,GAAGH,OAAO;EACX,IAAIiD,aAAa,GAAGD,MAAM,CAACpB,OAAO;EAClC,IAAIhB,MAAM,GAAG9B,OAAO,CAACe,MAAM,CAACgB,GAAG;EAC/B,IAAIC,QAAQ,GAAG,IAAI;EAEnB,SAAS0E,SAASA,CAAA,EAAG;IACnB5E,MAAM,GAAG9B,OAAO,CAACe,MAAM,CAACgB,GAAG;IAE3B,IAAIC,QAAQ,EAAE;MACZA,QAAQ,CAAC;QACPF,MAAM;QACNS,QAAQ,EAAEO,OAAO,CAACP;MACpB,CAAC,CAAC;IACJ;EACF;EAEA,SAASe,IAAIA,CAAChB,EAAE,EAAEX,KAAK,EAAE;IACvBG,MAAM,GAAG9B,OAAO,CAACe,MAAM,CAACwC,IAAI;IAC5B,IAAIhB,QAAQ,GAAGC,cAAc,CAACM,OAAO,CAACP,QAAQ,EAAED,EAAE,EAAEX,KAAK,CAAC;IAC1D,IAAI6E,gBAAgB,EAAEA,gBAAgB,CAACjE,QAAQ,EAAED,EAAE,CAAC;IACpD,IAAIqE,YAAY,GAAGZ,eAAe,CAACxD,QAAQ,CAAC;IAC5C,IAAIyC,GAAG,GAAGlC,OAAO,CAACC,UAAU,CAACR,QAAQ,CAAC,CAAC,CAAC;;IAExC,IAAI;MACF4B,aAAa,CAACyC,SAAS,CAACD,YAAY,EAAE,EAAE,EAAE3B,GAAG,CAAC;IAChD,CAAC,CAAC,OAAO6B,KAAK,EAAE;MACd;MACA;MACA3C,MAAM,CAAC3B,QAAQ,CAACpC,MAAM,CAAC6E,GAAG,CAAC;IAC7B;IAEA,IAAI3D,QAAQ,IAAIW,QAAQ,EAAE;MACxBA,QAAQ,CAAC;QACPF,MAAM;QACNS,QAAQ,EAAEO,OAAO,CAACP;MACpB,CAAC,CAAC;IACJ;EACF;EAEA,SAASmB,OAAOA,CAACpB,EAAE,EAAEX,KAAK,EAAE;IAC1BG,MAAM,GAAG9B,OAAO,CAACe,MAAM,CAAC4C,OAAO;IAC/B,IAAIpB,QAAQ,GAAGC,cAAc,CAACM,OAAO,CAACP,QAAQ,EAAED,EAAE,EAAEX,KAAK,CAAC;IAC1D,IAAI6E,gBAAgB,EAAEA,gBAAgB,CAACjE,QAAQ,EAAED,EAAE,CAAC;IACpD,IAAIqE,YAAY,GAAGZ,eAAe,CAACxD,QAAQ,CAAC;IAC5C,IAAIyC,GAAG,GAAGlC,OAAO,CAACC,UAAU,CAACR,QAAQ,CAAC;IACtC4B,aAAa,CAAC2C,YAAY,CAACH,YAAY,EAAE,EAAE,EAAE3B,GAAG,CAAC;IAEjD,IAAI3D,QAAQ,IAAIW,QAAQ,EAAE;MACxBA,QAAQ,CAAC;QACPF,MAAM;QACNS,QAAQ,EAAEO,OAAO,CAACP;MACpB,CAAC,CAAC;IACJ;EACF;EAEA,IAAIO,OAAO,GAAG;IACZ,IAAIhB,MAAMA,CAAA,EAAG;MACX,OAAOA,MAAM;IACf,CAAC;IAED,IAAIS,QAAQA,CAAA,EAAG;MACb,OAAOgE,WAAW,CAACrC,MAAM,EAAEC,aAAa,CAAC;IAC3C,CAAC;IAEDL,MAAMA,CAACC,EAAE,EAAE;MACT,IAAI/B,QAAQ,EAAE;QACZ,MAAM,IAAIuD,KAAK,CAAC,4CAA4C,CAAC;MAC/D;MAEArB,MAAM,CAAC6C,gBAAgB,CAAC/F,iBAAiB,EAAE0F,SAAS,CAAC;MACrD1E,QAAQ,GAAG+B,EAAE;MACb,OAAO,MAAM;QACXG,MAAM,CAAC8C,mBAAmB,CAAChG,iBAAiB,EAAE0F,SAAS,CAAC;QACxD1E,QAAQ,GAAG,IAAI;MACjB,CAAC;IACH,CAAC;IAEDe,UAAUA,CAACT,EAAE,EAAE;MACb,OAAOS,UAAU,CAACmB,MAAM,EAAE5B,EAAE,CAAC;IAC/B,CAAC;IAEDW,cAAcA,CAACX,EAAE,EAAE;MACjB;MACA,IAAI0C,GAAG,GAAGoB,mBAAmB,CAAC,OAAO9D,EAAE,KAAK,QAAQ,GAAGA,EAAE,GAAGU,UAAU,CAACV,EAAE,CAAC,CAAC;MAC3E,OAAO;QACLG,QAAQ,EAAEuC,GAAG,CAACvC,QAAQ;QACtBW,MAAM,EAAE4B,GAAG,CAAC5B,MAAM;QAClBC,IAAI,EAAE2B,GAAG,CAAC3B;MACZ,CAAC;IACH,CAAC;IAEDC,IAAI;IACJI,OAAO;IAEPE,EAAEA,CAAC3B,CAAC,EAAE;MACJ,OAAOkC,aAAa,CAACP,EAAE,CAAC3B,CAAC,CAAC;IAC5B;EAEF,CAAC;EACD,OAAOa,OAAO;AAChB,CAAC,CAAC;;AAEF;AACA;AACA;;AAEA,IAAImE,UAAU;AACd;AACA;AACA;;AAEA,CAAC,UAAUA,UAAU,EAAE;EACrBA,UAAU,CAAC,MAAM,CAAC,GAAG,MAAM;EAC3BA,UAAU,CAAC,UAAU,CAAC,GAAG,UAAU;EACnCA,UAAU,CAAC,UAAU,CAAC,GAAG,UAAU;EACnCA,UAAU,CAAC,OAAO,CAAC,GAAG,OAAO;AAC/B,CAAC,EAAEA,UAAU,KAAKA,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC;AAEnC,SAASC,YAAYA,CAACC,KAAK,EAAE;EAC3B,OAAOA,KAAK,CAAC1F,KAAK,KAAK,IAAI;AAC7B,CAAC,CAAC;AACF;;AAGA,SAAS2F,yBAAyBA,CAACC,MAAM,EAAEC,UAAU,EAAEC,MAAM,EAAE;EAC7D,IAAID,UAAU,KAAK,KAAK,CAAC,EAAE;IACzBA,UAAU,GAAG,EAAE;EACjB;EAEA,IAAIC,MAAM,KAAK,KAAK,CAAC,EAAE;IACrBA,MAAM,GAAG,IAAIC,GAAG,CAAC,CAAC;EACpB;EAEA,OAAOH,MAAM,CAAC9F,GAAG,CAAC,CAAC4F,KAAK,EAAE1F,KAAK,KAAK;IAClC,IAAIgG,QAAQ,GAAG,CAAC,GAAGH,UAAU,EAAE7F,KAAK,CAAC;IACrC,IAAIiG,EAAE,GAAG,OAAOP,KAAK,CAACO,EAAE,KAAK,QAAQ,GAAGP,KAAK,CAACO,EAAE,GAAGD,QAAQ,CAACE,IAAI,CAAC,GAAG,CAAC;IACrEtC,SAAS,CAAC8B,KAAK,CAAC1F,KAAK,KAAK,IAAI,IAAI,CAAC0F,KAAK,CAACS,QAAQ,EAAE,2CAA2C,CAAC;IAC/FvC,SAAS,CAAC,CAACkC,MAAM,CAACM,GAAG,CAACH,EAAE,CAAC,EAAE,qCAAqC,GAAGA,EAAE,GAAG,aAAa,GAAG,wDAAwD,CAAC;IACjJH,MAAM,CAACO,GAAG,CAACJ,EAAE,CAAC;IAEd,IAAIR,YAAY,CAACC,KAAK,CAAC,EAAE;MACvB,IAAIY,UAAU,GAAG7H,QAAQ,CAAC,CAAC,CAAC,EAAEiH,KAAK,EAAE;QACnCO;MACF,CAAC,CAAC;MAEF,OAAOK,UAAU;IACnB,CAAC,MAAM;MACL,IAAIC,iBAAiB,GAAG9H,QAAQ,CAAC,CAAC,CAAC,EAAEiH,KAAK,EAAE;QAC1CO,EAAE;QACFE,QAAQ,EAAET,KAAK,CAACS,QAAQ,GAAGR,yBAAyB,CAACD,KAAK,CAACS,QAAQ,EAAEH,QAAQ,EAAEF,MAAM,CAAC,GAAG3F;MAC3F,CAAC,CAAC;MAEF,OAAOoG,iBAAiB;IAC1B;EACF,CAAC,CAAC;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,WAAWA,CAACZ,MAAM,EAAEa,WAAW,EAAEC,QAAQ,EAAE;EAClD,IAAIA,QAAQ,KAAK,KAAK,CAAC,EAAE;IACvBA,QAAQ,GAAG,GAAG;EAChB;EAEA,IAAI5F,QAAQ,GAAG,OAAO2F,WAAW,KAAK,QAAQ,GAAG/E,SAAS,CAAC+E,WAAW,CAAC,GAAGA,WAAW;EACrF,IAAIzF,QAAQ,GAAG2F,aAAa,CAAC7F,QAAQ,CAACE,QAAQ,IAAI,GAAG,EAAE0F,QAAQ,CAAC;EAEhE,IAAI1F,QAAQ,IAAI,IAAI,EAAE;IACpB,OAAO,IAAI;EACb;EAEA,IAAI4F,QAAQ,GAAGC,aAAa,CAACjB,MAAM,CAAC;EACpCkB,iBAAiB,CAACF,QAAQ,CAAC;EAC3B,IAAIG,OAAO,GAAG,IAAI;EAElB,KAAK,IAAIlI,CAAC,GAAG,CAAC,EAAEkI,OAAO,IAAI,IAAI,IAAIlI,CAAC,GAAG+H,QAAQ,CAAC7H,MAAM,EAAE,EAAEF,CAAC,EAAE;IAC3DkI,OAAO,GAAGC,gBAAgB,CAACJ,QAAQ,CAAC/H,CAAC,CAAC;IAAE;IACxC;IACA;IACA;IACA;IACA;IACAoI,eAAe,CAACjG,QAAQ,CAAC,CAAC;EAC5B;EAEA,OAAO+F,OAAO;AAChB;AAEA,SAASF,aAAaA,CAACjB,MAAM,EAAEgB,QAAQ,EAAEM,WAAW,EAAErB,UAAU,EAAE;EAChE,IAAIe,QAAQ,KAAK,KAAK,CAAC,EAAE;IACvBA,QAAQ,GAAG,EAAE;EACf;EAEA,IAAIM,WAAW,KAAK,KAAK,CAAC,EAAE;IAC1BA,WAAW,GAAG,EAAE;EAClB;EAEA,IAAIrB,UAAU,KAAK,KAAK,CAAC,EAAE;IACzBA,UAAU,GAAG,EAAE;EACjB;EAEA,IAAIsB,YAAY,GAAGA,CAACzB,KAAK,EAAE1F,KAAK,EAAEoH,YAAY,KAAK;IACjD,IAAIC,IAAI,GAAG;MACTD,YAAY,EAAEA,YAAY,KAAKjH,SAAS,GAAGuF,KAAK,CAACjE,IAAI,IAAI,EAAE,GAAG2F,YAAY;MAC1EE,aAAa,EAAE5B,KAAK,CAAC4B,aAAa,KAAK,IAAI;MAC3CC,aAAa,EAAEvH,KAAK;MACpB0F;IACF,CAAC;IAED,IAAI2B,IAAI,CAACD,YAAY,CAACI,UAAU,CAAC,GAAG,CAAC,EAAE;MACrC5D,SAAS,CAACyD,IAAI,CAACD,YAAY,CAACI,UAAU,CAAC3B,UAAU,CAAC,EAAE,wBAAwB,GAAGwB,IAAI,CAACD,YAAY,GAAG,uBAAuB,IAAI,IAAI,GAAGvB,UAAU,GAAG,gDAAgD,CAAC,GAAG,6DAA6D,CAAC;MACpQwB,IAAI,CAACD,YAAY,GAAGC,IAAI,CAACD,YAAY,CAAC1D,KAAK,CAACmC,UAAU,CAAC9G,MAAM,CAAC;IAChE;IAEA,IAAI0C,IAAI,GAAGgG,SAAS,CAAC,CAAC5B,UAAU,EAAEwB,IAAI,CAACD,YAAY,CAAC,CAAC;IACrD,IAAIM,UAAU,GAAGR,WAAW,CAACS,MAAM,CAACN,IAAI,CAAC,CAAC,CAAC;IAC3C;IACA;;IAEA,IAAI3B,KAAK,CAACS,QAAQ,IAAIT,KAAK,CAACS,QAAQ,CAACpH,MAAM,GAAG,CAAC,EAAE;MAC/C6E,SAAS;MAAE;MACX;MACA8B,KAAK,CAAC1F,KAAK,KAAK,IAAI,EAAE,yDAAyD,IAAI,qCAAqC,GAAGyB,IAAI,GAAG,KAAK,CAAC,CAAC;MACzIoF,aAAa,CAACnB,KAAK,CAACS,QAAQ,EAAES,QAAQ,EAAEc,UAAU,EAAEjG,IAAI,CAAC;IAC3D,CAAC,CAAC;IACF;;IAGA,IAAIiE,KAAK,CAACjE,IAAI,IAAI,IAAI,IAAI,CAACiE,KAAK,CAAC1F,KAAK,EAAE;MACtC;IACF;IAEA4G,QAAQ,CAAC/E,IAAI,CAAC;MACZJ,IAAI;MACJmG,KAAK,EAAEC,YAAY,CAACpG,IAAI,EAAEiE,KAAK,CAAC1F,KAAK,CAAC;MACtC0H;IACF,CAAC,CAAC;EACJ,CAAC;EAED9B,MAAM,CAACkC,OAAO,CAAC,CAACpC,KAAK,EAAE1F,KAAK,KAAK;IAC/B,IAAI+H,WAAW;;IAEf;IACA,IAAIrC,KAAK,CAACjE,IAAI,KAAK,EAAE,IAAI,EAAE,CAACsG,WAAW,GAAGrC,KAAK,CAACjE,IAAI,KAAK,IAAI,IAAIsG,WAAW,CAACC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE;MAC3Fb,YAAY,CAACzB,KAAK,EAAE1F,KAAK,CAAC;IAC5B,CAAC,MAAM;MACL,KAAK,IAAIiI,QAAQ,IAAIC,uBAAuB,CAACxC,KAAK,CAACjE,IAAI,CAAC,EAAE;QACxD0F,YAAY,CAACzB,KAAK,EAAE1F,KAAK,EAAEiI,QAAQ,CAAC;MACtC;IACF;EACF,CAAC,CAAC;EACF,OAAOrB,QAAQ;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASsB,uBAAuBA,CAACzG,IAAI,EAAE;EACrC,IAAI0G,QAAQ,GAAG1G,IAAI,CAAC2G,KAAK,CAAC,GAAG,CAAC;EAC9B,IAAID,QAAQ,CAACpJ,MAAM,KAAK,CAAC,EAAE,OAAO,EAAE;EACpC,IAAI,CAACsJ,KAAK,EAAE,GAAGC,IAAI,CAAC,GAAGH,QAAQ,CAAC,CAAC;;EAEjC,IAAII,UAAU,GAAGF,KAAK,CAACG,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;;EAEtC,IAAIC,QAAQ,GAAGJ,KAAK,CAACpG,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;EAEvC,IAAIqG,IAAI,CAACvJ,MAAM,KAAK,CAAC,EAAE;IACrB;IACA;IACA,OAAOwJ,UAAU,GAAG,CAACE,QAAQ,EAAE,EAAE,CAAC,GAAG,CAACA,QAAQ,CAAC;EACjD;EAEA,IAAIC,YAAY,GAAGR,uBAAuB,CAACI,IAAI,CAACpC,IAAI,CAAC,GAAG,CAAC,CAAC;EAC1D,IAAIyC,MAAM,GAAG,EAAE,CAAC,CAAC;EACjB;EACA;EACA;EACA;EACA;EACA;;EAEAA,MAAM,CAAC9G,IAAI,CAAC,GAAG6G,YAAY,CAAC5I,GAAG,CAAC8I,OAAO,IAAIA,OAAO,KAAK,EAAE,GAAGH,QAAQ,GAAG,CAACA,QAAQ,EAAEG,OAAO,CAAC,CAAC1C,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;;EAExG,IAAIqC,UAAU,EAAE;IACdI,MAAM,CAAC9G,IAAI,CAAC,GAAG6G,YAAY,CAAC;EAC9B,CAAC,CAAC;;EAGF,OAAOC,MAAM,CAAC7I,GAAG,CAACmI,QAAQ,IAAIxG,IAAI,CAAC+F,UAAU,CAAC,GAAG,CAAC,IAAIS,QAAQ,KAAK,EAAE,GAAG,GAAG,GAAGA,QAAQ,CAAC;AACzF;AAEA,SAASnB,iBAAiBA,CAACF,QAAQ,EAAE;EACnCA,QAAQ,CAACiC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAAClB,KAAK,KAAKmB,CAAC,CAACnB,KAAK,GAAGmB,CAAC,CAACnB,KAAK,GAAGkB,CAAC,CAAClB,KAAK,CAAC;EAAA,EAC9DoB,cAAc,CAACF,CAAC,CAACpB,UAAU,CAAC5H,GAAG,CAACuH,IAAI,IAAIA,IAAI,CAACE,aAAa,CAAC,EAAEwB,CAAC,CAACrB,UAAU,CAAC5H,GAAG,CAACuH,IAAI,IAAIA,IAAI,CAACE,aAAa,CAAC,CAAC,CAAC;AAC/G;AAEA,MAAM0B,OAAO,GAAG,QAAQ;AACxB,MAAMC,mBAAmB,GAAG,CAAC;AAC7B,MAAMC,eAAe,GAAG,CAAC;AACzB,MAAMC,iBAAiB,GAAG,CAAC;AAC3B,MAAMC,kBAAkB,GAAG,EAAE;AAC7B,MAAMC,YAAY,GAAG,CAAC,CAAC;AAEvB,MAAMC,OAAO,GAAGC,CAAC,IAAIA,CAAC,KAAK,GAAG;AAE9B,SAAS3B,YAAYA,CAACpG,IAAI,EAAEzB,KAAK,EAAE;EACjC,IAAImI,QAAQ,GAAG1G,IAAI,CAAC2G,KAAK,CAAC,GAAG,CAAC;EAC9B,IAAIqB,YAAY,GAAGtB,QAAQ,CAACpJ,MAAM;EAElC,IAAIoJ,QAAQ,CAACuB,IAAI,CAACH,OAAO,CAAC,EAAE;IAC1BE,YAAY,IAAIH,YAAY;EAC9B;EAEA,IAAItJ,KAAK,EAAE;IACTyJ,YAAY,IAAIN,eAAe;EACjC;EAEA,OAAOhB,QAAQ,CAACwB,MAAM,CAACH,CAAC,IAAI,CAACD,OAAO,CAACC,CAAC,CAAC,CAAC,CAACI,MAAM,CAAC,CAAChC,KAAK,EAAEiC,OAAO,KAAKjC,KAAK,IAAIqB,OAAO,CAACa,IAAI,CAACD,OAAO,CAAC,GAAGX,mBAAmB,GAAGW,OAAO,KAAK,EAAE,GAAGT,iBAAiB,GAAGC,kBAAkB,CAAC,EAAEI,YAAY,CAAC;AACpM;AAEA,SAAST,cAAcA,CAACF,CAAC,EAAEC,CAAC,EAAE;EAC5B,IAAIgB,QAAQ,GAAGjB,CAAC,CAAC/J,MAAM,KAAKgK,CAAC,CAAChK,MAAM,IAAI+J,CAAC,CAACpF,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACsG,KAAK,CAAC,CAACxJ,CAAC,EAAE3B,CAAC,KAAK2B,CAAC,KAAKuI,CAAC,CAAClK,CAAC,CAAC,CAAC;EAClF,OAAOkL,QAAQ;EAAG;EAClB;EACA;EACA;EACAjB,CAAC,CAACA,CAAC,CAAC/J,MAAM,GAAG,CAAC,CAAC,GAAGgK,CAAC,CAACA,CAAC,CAAChK,MAAM,GAAG,CAAC,CAAC;EAAG;EACpC;EACA,CAAC;AACH;AAEA,SAASiI,gBAAgBA,CAACiD,MAAM,EAAEjJ,QAAQ,EAAE;EAC1C,IAAI;IACF0G;EACF,CAAC,GAAGuC,MAAM;EACV,IAAIC,aAAa,GAAG,CAAC,CAAC;EACtB,IAAIC,eAAe,GAAG,GAAG;EACzB,IAAIpD,OAAO,GAAG,EAAE;EAEhB,KAAK,IAAIlI,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG6I,UAAU,CAAC3I,MAAM,EAAE,EAAEF,CAAC,EAAE;IAC1C,IAAIwI,IAAI,GAAGK,UAAU,CAAC7I,CAAC,CAAC;IACxB,IAAIuL,GAAG,GAAGvL,CAAC,KAAK6I,UAAU,CAAC3I,MAAM,GAAG,CAAC;IACrC,IAAIsL,iBAAiB,GAAGF,eAAe,KAAK,GAAG,GAAGnJ,QAAQ,GAAGA,QAAQ,CAAC0C,KAAK,CAACyG,eAAe,CAACpL,MAAM,CAAC,IAAI,GAAG;IAC1G,IAAIuL,KAAK,GAAGC,SAAS,CAAC;MACpB9I,IAAI,EAAE4F,IAAI,CAACD,YAAY;MACvBE,aAAa,EAAED,IAAI,CAACC,aAAa;MACjC8C;IACF,CAAC,EAAEC,iBAAiB,CAAC;IACrB,IAAI,CAACC,KAAK,EAAE,OAAO,IAAI;IACvBjM,MAAM,CAACK,MAAM,CAACwL,aAAa,EAAEI,KAAK,CAACE,MAAM,CAAC;IAC1C,IAAI9E,KAAK,GAAG2B,IAAI,CAAC3B,KAAK;IACtBqB,OAAO,CAAClF,IAAI,CAAC;MACX;MACA2I,MAAM,EAAEN,aAAa;MACrBlJ,QAAQ,EAAEyG,SAAS,CAAC,CAAC0C,eAAe,EAAEG,KAAK,CAACtJ,QAAQ,CAAC,CAAC;MACtDyJ,YAAY,EAAEC,iBAAiB,CAACjD,SAAS,CAAC,CAAC0C,eAAe,EAAEG,KAAK,CAACG,YAAY,CAAC,CAAC,CAAC;MACjF/E;IACF,CAAC,CAAC;IAEF,IAAI4E,KAAK,CAACG,YAAY,KAAK,GAAG,EAAE;MAC9BN,eAAe,GAAG1C,SAAS,CAAC,CAAC0C,eAAe,EAAEG,KAAK,CAACG,YAAY,CAAC,CAAC;IACpE;EACF;EAEA,OAAO1D,OAAO;AAChB;AACA;AACA;AACA;AACA;AACA;;AAGA,SAAS4D,YAAYA,CAACC,YAAY,EAAEJ,MAAM,EAAE;EAC1C,IAAIA,MAAM,KAAK,KAAK,CAAC,EAAE;IACrBA,MAAM,GAAG,CAAC,CAAC;EACb;EAEA,IAAI/I,IAAI,GAAGmJ,YAAY;EAEvB,IAAInJ,IAAI,CAAC+G,QAAQ,CAAC,GAAG,CAAC,IAAI/G,IAAI,KAAK,GAAG,IAAI,CAACA,IAAI,CAAC+G,QAAQ,CAAC,IAAI,CAAC,EAAE;IAC9DqC,OAAO,CAAC,KAAK,EAAE,eAAe,GAAGpJ,IAAI,GAAG,mCAAmC,IAAI,IAAI,GAAGA,IAAI,CAACQ,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,oCAAoC,CAAC,GAAG,kEAAkE,IAAI,oCAAoC,GAAGR,IAAI,CAACQ,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC;IAC1SR,IAAI,GAAGA,IAAI,CAACQ,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC;EAClC;EAEA,OAAOR,IAAI,CAACQ,OAAO,CAAC,UAAU,EAAE,CAAC6I,CAAC,EAAE7L,GAAG,KAAK;IAC1C2E,SAAS,CAAC4G,MAAM,CAACvL,GAAG,CAAC,IAAI,IAAI,EAAE,aAAa,GAAGA,GAAG,GAAG,UAAU,CAAC;IAChE,OAAOuL,MAAM,CAACvL,GAAG,CAAC;EACpB,CAAC,CAAC,CAACgD,OAAO,CAAC,WAAW,EAAE,CAAC6I,CAAC,EAAE7L,GAAG,KAAK;IAClC2E,SAAS,CAAC4G,MAAM,CAACvL,GAAG,CAAC,IAAI,IAAI,EAAE,aAAa,GAAGA,GAAG,GAAG,UAAU,CAAC;IAChE,OAAO,GAAG,GAAGuL,MAAM,CAACvL,GAAG,CAAC;EAC1B,CAAC,CAAC,CAACgD,OAAO,CAAC,SAAS,EAAE,CAAC6I,CAAC,EAAEC,MAAM,EAAEC,EAAE,EAAEC,GAAG,KAAK;IAC5C,MAAMC,IAAI,GAAG,GAAG;IAEhB,IAAIV,MAAM,CAACU,IAAI,CAAC,IAAI,IAAI,EAAE;MACxB;MACA;MACA,OAAOD,GAAG,KAAK,IAAI,GAAG,GAAG,GAAG,EAAE;IAChC,CAAC,CAAC;;IAGF,OAAO,EAAE,GAAGF,MAAM,GAAGP,MAAM,CAACU,IAAI,CAAC;EACnC,CAAC,CAAC;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASX,SAASA,CAACY,OAAO,EAAEnK,QAAQ,EAAE;EACpC,IAAI,OAAOmK,OAAO,KAAK,QAAQ,EAAE;IAC/BA,OAAO,GAAG;MACR1J,IAAI,EAAE0J,OAAO;MACb7D,aAAa,EAAE,KAAK;MACpB8C,GAAG,EAAE;IACP,CAAC;EACH;EAEA,IAAI,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGC,WAAW,CAACH,OAAO,CAAC1J,IAAI,EAAE0J,OAAO,CAAC7D,aAAa,EAAE6D,OAAO,CAACf,GAAG,CAAC;EACzF,IAAIE,KAAK,GAAGtJ,QAAQ,CAACsJ,KAAK,CAACc,OAAO,CAAC;EACnC,IAAI,CAACd,KAAK,EAAE,OAAO,IAAI;EACvB,IAAIH,eAAe,GAAGG,KAAK,CAAC,CAAC,CAAC;EAC9B,IAAIG,YAAY,GAAGN,eAAe,CAAClI,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC;EAC3D,IAAIsJ,aAAa,GAAGjB,KAAK,CAAC5G,KAAK,CAAC,CAAC,CAAC;EAClC,IAAI8G,MAAM,GAAGa,UAAU,CAACzB,MAAM,CAAC,CAAC4B,IAAI,EAAEC,SAAS,EAAEzL,KAAK,KAAK;IACzD;IACA;IACA,IAAIyL,SAAS,KAAK,GAAG,EAAE;MACrB,IAAIC,UAAU,GAAGH,aAAa,CAACvL,KAAK,CAAC,IAAI,EAAE;MAC3CyK,YAAY,GAAGN,eAAe,CAACzG,KAAK,CAAC,CAAC,EAAEyG,eAAe,CAACpL,MAAM,GAAG2M,UAAU,CAAC3M,MAAM,CAAC,CAACkD,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC;IAC9G;IAEAuJ,IAAI,CAACC,SAAS,CAAC,GAAGE,wBAAwB,CAACJ,aAAa,CAACvL,KAAK,CAAC,IAAI,EAAE,EAAEyL,SAAS,CAAC;IACjF,OAAOD,IAAI;EACb,CAAC,EAAE,CAAC,CAAC,CAAC;EACN,OAAO;IACLhB,MAAM;IACNxJ,QAAQ,EAAEmJ,eAAe;IACzBM,YAAY;IACZU;EACF,CAAC;AACH;AAEA,SAASG,WAAWA,CAAC7J,IAAI,EAAE6F,aAAa,EAAE8C,GAAG,EAAE;EAC7C,IAAI9C,aAAa,KAAK,KAAK,CAAC,EAAE;IAC5BA,aAAa,GAAG,KAAK;EACvB;EAEA,IAAI8C,GAAG,KAAK,KAAK,CAAC,EAAE;IAClBA,GAAG,GAAG,IAAI;EACZ;EAEAS,OAAO,CAACpJ,IAAI,KAAK,GAAG,IAAI,CAACA,IAAI,CAAC+G,QAAQ,CAAC,GAAG,CAAC,IAAI/G,IAAI,CAAC+G,QAAQ,CAAC,IAAI,CAAC,EAAE,eAAe,GAAG/G,IAAI,GAAG,mCAAmC,IAAI,IAAI,GAAGA,IAAI,CAACQ,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,oCAAoC,CAAC,GAAG,kEAAkE,IAAI,oCAAoC,GAAGR,IAAI,CAACQ,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC;EAC/V,IAAIoJ,UAAU,GAAG,EAAE;EACnB,IAAIO,YAAY,GAAG,GAAG,GAAGnK,IAAI,CAACQ,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;EAAA,CACpDA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;EAAA,CACrBA,OAAO,CAAC,qBAAqB,EAAE,MAAM,CAAC,CAAC;EAAA,CACvCA,OAAO,CAAC,WAAW,EAAE,CAAC6I,CAAC,EAAEW,SAAS,KAAK;IACtCJ,UAAU,CAACxJ,IAAI,CAAC4J,SAAS,CAAC;IAC1B,OAAO,YAAY;EACrB,CAAC,CAAC;EAEF,IAAIhK,IAAI,CAAC+G,QAAQ,CAAC,GAAG,CAAC,EAAE;IACtB6C,UAAU,CAACxJ,IAAI,CAAC,GAAG,CAAC;IACpB+J,YAAY,IAAInK,IAAI,KAAK,GAAG,IAAIA,IAAI,KAAK,IAAI,GAAG,OAAO,CAAC;IAAA,EACtD,mBAAmB,CAAC,CAAC;EACzB,CAAC,MAAM,IAAI2I,GAAG,EAAE;IACd;IACAwB,YAAY,IAAI,OAAO;EACzB,CAAC,MAAM,IAAInK,IAAI,KAAK,EAAE,IAAIA,IAAI,KAAK,GAAG,EAAE;IACtC;IACA;IACA;IACA;IACA;IACA;IACA;IACAmK,YAAY,IAAI,eAAe;EACjC,CAAC,MAAM;EAEP,IAAIR,OAAO,GAAG,IAAIS,MAAM,CAACD,YAAY,EAAEtE,aAAa,GAAGnH,SAAS,GAAG,GAAG,CAAC;EACvE,OAAO,CAACiL,OAAO,EAAEC,UAAU,CAAC;AAC9B;AAEA,SAASpE,eAAeA,CAACzI,KAAK,EAAE;EAC9B,IAAI;IACF,OAAOsN,SAAS,CAACtN,KAAK,CAAC;EACzB,CAAC,CAAC,OAAO4G,KAAK,EAAE;IACdyF,OAAO,CAAC,KAAK,EAAE,iBAAiB,GAAGrM,KAAK,GAAG,6CAA6C,GAAG,+DAA+D,IAAI,YAAY,GAAG4G,KAAK,GAAG,IAAI,CAAC,CAAC;IAC3L,OAAO5G,KAAK;EACd;AACF;AAEA,SAASmN,wBAAwBA,CAACnN,KAAK,EAAEiN,SAAS,EAAE;EAClD,IAAI;IACF,OAAOM,kBAAkB,CAACvN,KAAK,CAAC;EAClC,CAAC,CAAC,OAAO4G,KAAK,EAAE;IACdyF,OAAO,CAAC,KAAK,EAAE,gCAAgC,GAAGY,SAAS,GAAG,gCAAgC,IAAI,gBAAgB,GAAGjN,KAAK,GAAG,iDAAiD,CAAC,IAAI,kCAAkC,GAAG4G,KAAK,GAAG,IAAI,CAAC,CAAC;IACtO,OAAO5G,KAAK;EACd;AACF;AACA;AACA;AACA;;AAGA,SAASmI,aAAaA,CAAC3F,QAAQ,EAAE0F,QAAQ,EAAE;EACzC,IAAIA,QAAQ,KAAK,GAAG,EAAE,OAAO1F,QAAQ;EAErC,IAAI,CAACA,QAAQ,CAACgL,WAAW,CAAC,CAAC,CAACxE,UAAU,CAACd,QAAQ,CAACsF,WAAW,CAAC,CAAC,CAAC,EAAE;IAC9D,OAAO,IAAI;EACb,CAAC,CAAC;EACF;;EAGA,IAAIC,UAAU,GAAGvF,QAAQ,CAAC8B,QAAQ,CAAC,GAAG,CAAC,GAAG9B,QAAQ,CAAC3H,MAAM,GAAG,CAAC,GAAG2H,QAAQ,CAAC3H,MAAM;EAC/E,IAAImN,QAAQ,GAAGlL,QAAQ,CAACE,MAAM,CAAC+K,UAAU,CAAC;EAE1C,IAAIC,QAAQ,IAAIA,QAAQ,KAAK,GAAG,EAAE;IAChC;IACA,OAAO,IAAI;EACb;EAEA,OAAOlL,QAAQ,CAAC0C,KAAK,CAACuI,UAAU,CAAC,IAAI,GAAG;AAC1C;AACA;AACA;AACA;;AAEA,SAASpB,OAAOA,CAAC9G,IAAI,EAAEF,OAAO,EAAE;EAC9B,IAAI,CAACE,IAAI,EAAE;IACT;IACA,IAAI,OAAOC,OAAO,KAAK,WAAW,EAAEA,OAAO,CAACC,IAAI,CAACJ,OAAO,CAAC;IAEzD,IAAI;MACF;MACA;MACA;MACA;MACA;MACA,MAAM,IAAIC,KAAK,CAACD,OAAO,CAAC,CAAC,CAAC;IAC5B,CAAC,CAAC,OAAOK,CAAC,EAAE,CAAC;EACf;AACF;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASiI,WAAWA,CAACtL,EAAE,EAAEuL,YAAY,EAAE;EACrC,IAAIA,YAAY,KAAK,KAAK,CAAC,EAAE;IAC3BA,YAAY,GAAG,GAAG;EACpB;EAEA,IAAI;IACFpL,QAAQ,EAAEqL,UAAU;IACpB1K,MAAM,GAAG,EAAE;IACXC,IAAI,GAAG;EACT,CAAC,GAAG,OAAOf,EAAE,KAAK,QAAQ,GAAGa,SAAS,CAACb,EAAE,CAAC,GAAGA,EAAE;EAC/C,IAAIG,QAAQ,GAAGqL,UAAU,GAAGA,UAAU,CAAC7E,UAAU,CAAC,GAAG,CAAC,GAAG6E,UAAU,GAAGC,eAAe,CAACD,UAAU,EAAED,YAAY,CAAC,GAAGA,YAAY;EAC9H,OAAO;IACLpL,QAAQ;IACRW,MAAM,EAAE4K,eAAe,CAAC5K,MAAM,CAAC;IAC/BC,IAAI,EAAE4K,aAAa,CAAC5K,IAAI;EAC1B,CAAC;AACH;AAEA,SAAS0K,eAAeA,CAAClF,YAAY,EAAEgF,YAAY,EAAE;EACnD,IAAIjE,QAAQ,GAAGiE,YAAY,CAACnK,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAACmG,KAAK,CAAC,GAAG,CAAC;EAC1D,IAAIqE,gBAAgB,GAAGrF,YAAY,CAACgB,KAAK,CAAC,GAAG,CAAC;EAC9CqE,gBAAgB,CAAC3E,OAAO,CAAC+B,OAAO,IAAI;IAClC,IAAIA,OAAO,KAAK,IAAI,EAAE;MACpB;MACA,IAAI1B,QAAQ,CAACpJ,MAAM,GAAG,CAAC,EAAEoJ,QAAQ,CAACuE,GAAG,CAAC,CAAC;IACzC,CAAC,MAAM,IAAI7C,OAAO,KAAK,GAAG,EAAE;MAC1B1B,QAAQ,CAACtG,IAAI,CAACgI,OAAO,CAAC;IACxB;EACF,CAAC,CAAC;EACF,OAAO1B,QAAQ,CAACpJ,MAAM,GAAG,CAAC,GAAGoJ,QAAQ,CAACjC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG;AACvD;AAEA,SAASyG,mBAAmBA,CAACC,IAAI,EAAEC,KAAK,EAAEC,IAAI,EAAErL,IAAI,EAAE;EACpD,OAAO,oBAAoB,GAAGmL,IAAI,GAAG,sCAAsC,IAAI,MAAM,GAAGC,KAAK,GAAG,WAAW,GAAG1L,IAAI,CAACC,SAAS,CAACK,IAAI,CAAC,GAAG,oCAAoC,CAAC,IAAI,MAAM,GAAGqL,IAAI,GAAG,0DAA0D,CAAC,GAAG,qEAAqE;AACnU;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASC,0BAA0BA,CAAChG,OAAO,EAAE;EAC3C,OAAOA,OAAO,CAAC4C,MAAM,CAAC,CAACW,KAAK,EAAEtK,KAAK,KAAKA,KAAK,KAAK,CAAC,IAAIsK,KAAK,CAAC5E,KAAK,CAACjE,IAAI,IAAI6I,KAAK,CAAC5E,KAAK,CAACjE,IAAI,CAAC1C,MAAM,GAAG,CAAC,CAAC;AACzG;AACA;AACA;AACA;;AAEA,SAASiO,SAASA,CAACC,KAAK,EAAEC,cAAc,EAAEC,gBAAgB,EAAEC,cAAc,EAAE;EAC1E,IAAIA,cAAc,KAAK,KAAK,CAAC,EAAE;IAC7BA,cAAc,GAAG,KAAK;EACxB;EAEA,IAAIvM,EAAE;EAEN,IAAI,OAAOoM,KAAK,KAAK,QAAQ,EAAE;IAC7BpM,EAAE,GAAGa,SAAS,CAACuL,KAAK,CAAC;EACvB,CAAC,MAAM;IACLpM,EAAE,GAAGpC,QAAQ,CAAC,CAAC,CAAC,EAAEwO,KAAK,CAAC;IACxBrJ,SAAS,CAAC,CAAC/C,EAAE,CAACG,QAAQ,IAAI,CAACH,EAAE,CAACG,QAAQ,CAACgH,QAAQ,CAAC,GAAG,CAAC,EAAE2E,mBAAmB,CAAC,GAAG,EAAE,UAAU,EAAE,QAAQ,EAAE9L,EAAE,CAAC,CAAC;IACzG+C,SAAS,CAAC,CAAC/C,EAAE,CAACG,QAAQ,IAAI,CAACH,EAAE,CAACG,QAAQ,CAACgH,QAAQ,CAAC,GAAG,CAAC,EAAE2E,mBAAmB,CAAC,GAAG,EAAE,UAAU,EAAE,MAAM,EAAE9L,EAAE,CAAC,CAAC;IACvG+C,SAAS,CAAC,CAAC/C,EAAE,CAACc,MAAM,IAAI,CAACd,EAAE,CAACc,MAAM,CAACqG,QAAQ,CAAC,GAAG,CAAC,EAAE2E,mBAAmB,CAAC,GAAG,EAAE,QAAQ,EAAE,MAAM,EAAE9L,EAAE,CAAC,CAAC;EACnG;EAEA,IAAIwM,WAAW,GAAGJ,KAAK,KAAK,EAAE,IAAIpM,EAAE,CAACG,QAAQ,KAAK,EAAE;EACpD,IAAIqL,UAAU,GAAGgB,WAAW,GAAG,GAAG,GAAGxM,EAAE,CAACG,QAAQ;EAChD,IAAIsM,IAAI,CAAC,CAAC;EACV;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,IAAIF,cAAc,IAAIf,UAAU,IAAI,IAAI,EAAE;IACxCiB,IAAI,GAAGH,gBAAgB;EACzB,CAAC,MAAM;IACL,IAAII,kBAAkB,GAAGL,cAAc,CAACnO,MAAM,GAAG,CAAC;IAElD,IAAIsN,UAAU,CAAC7E,UAAU,CAAC,IAAI,CAAC,EAAE;MAC/B,IAAIgG,UAAU,GAAGnB,UAAU,CAACjE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;MACxC;MACA;;MAEA,OAAOoF,UAAU,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;QAC7BA,UAAU,CAACC,KAAK,CAAC,CAAC;QAClBF,kBAAkB,IAAI,CAAC;MACzB;MAEA1M,EAAE,CAACG,QAAQ,GAAGwM,UAAU,CAACtH,IAAI,CAAC,GAAG,CAAC;IACpC,CAAC,CAAC;IACF;;IAGAoH,IAAI,GAAGC,kBAAkB,IAAI,CAAC,GAAGL,cAAc,CAACK,kBAAkB,CAAC,GAAG,GAAG;EAC3E;EAEA,IAAI9L,IAAI,GAAG0K,WAAW,CAACtL,EAAE,EAAEyM,IAAI,CAAC,CAAC,CAAC;;EAElC,IAAII,wBAAwB,GAAGrB,UAAU,IAAIA,UAAU,KAAK,GAAG,IAAIA,UAAU,CAAC7D,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;;EAE7F,IAAImF,uBAAuB,GAAG,CAACN,WAAW,IAAIhB,UAAU,KAAK,GAAG,KAAKc,gBAAgB,CAAC3E,QAAQ,CAAC,GAAG,CAAC;EAEnG,IAAI,CAAC/G,IAAI,CAACT,QAAQ,CAACwH,QAAQ,CAAC,GAAG,CAAC,KAAKkF,wBAAwB,IAAIC,uBAAuB,CAAC,EAAE;IACzFlM,IAAI,CAACT,QAAQ,IAAI,GAAG;EACtB;EAEA,OAAOS,IAAI;AACb;AACA;AACA;AACA;;AAEA,SAASmM,aAAaA,CAAC/M,EAAE,EAAE;EACzB;EACA,OAAOA,EAAE,KAAK,EAAE,IAAIA,EAAE,CAACG,QAAQ,KAAK,EAAE,GAAG,GAAG,GAAG,OAAOH,EAAE,KAAK,QAAQ,GAAGa,SAAS,CAACb,EAAE,CAAC,CAACG,QAAQ,GAAGH,EAAE,CAACG,QAAQ;AAC9G;AACA;AACA;AACA;;AAEA,MAAMyG,SAAS,GAAGoG,KAAK,IAAIA,KAAK,CAAC3H,IAAI,CAAC,GAAG,CAAC,CAACjE,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC;AACjE;AACA;AACA;;AAEA,MAAMyI,iBAAiB,GAAG1J,QAAQ,IAAIA,QAAQ,CAACiB,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;AACvF;AACA;AACA;;AAEA,MAAMsK,eAAe,GAAG5K,MAAM,IAAI,CAACA,MAAM,IAAIA,MAAM,KAAK,GAAG,GAAG,EAAE,GAAGA,MAAM,CAAC6F,UAAU,CAAC,GAAG,CAAC,GAAG7F,MAAM,GAAG,GAAG,GAAGA,MAAM;AACjH;AACA;AACA;;AAEA,MAAM6K,aAAa,GAAG5K,IAAI,IAAI,CAACA,IAAI,IAAIA,IAAI,KAAK,GAAG,GAAG,EAAE,GAAGA,IAAI,CAAC4F,UAAU,CAAC,GAAG,CAAC,GAAG5F,IAAI,GAAG,GAAG,GAAGA,IAAI;;AAEnG;AACA;AACA;AACA;AACA,MAAMkM,IAAI,GAAG,SAASA,IAAIA,CAACC,IAAI,EAAEC,IAAI,EAAE;EACrC,IAAIA,IAAI,KAAK,KAAK,CAAC,EAAE;IACnBA,IAAI,GAAG,CAAC,CAAC;EACX;EAEA,IAAIC,YAAY,GAAG,OAAOD,IAAI,KAAK,QAAQ,GAAG;IAC5CE,MAAM,EAAEF;EACV,CAAC,GAAGA,IAAI;EACR,IAAIG,OAAO,GAAG,IAAIC,OAAO,CAACH,YAAY,CAACE,OAAO,CAAC;EAE/C,IAAI,CAACA,OAAO,CAAC/H,GAAG,CAAC,cAAc,CAAC,EAAE;IAChC+H,OAAO,CAACE,GAAG,CAAC,cAAc,EAAE,iCAAiC,CAAC;EAChE;EAEA,OAAO,IAAIC,QAAQ,CAACnN,IAAI,CAACC,SAAS,CAAC2M,IAAI,CAAC,EAAEtP,QAAQ,CAAC,CAAC,CAAC,EAAEwP,YAAY,EAAE;IACnEE;EACF,CAAC,CAAC,CAAC;AACL,CAAC;AACD,MAAMI,oBAAoB,SAASzK,KAAK,CAAC;AACzC,MAAM0K,YAAY,CAAC;EACjBC,WAAWA,CAACV,IAAI,EAAE;IAChB,IAAI,CAACW,WAAW,GAAG,IAAI3I,GAAG,CAAC,CAAC;IAC5B,IAAI,CAAC4I,UAAU,GAAGxO,SAAS;IAC3ByD,SAAS,CAACmK,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,IAAI,CAACa,KAAK,CAACC,OAAO,CAACd,IAAI,CAAC,EAAE,oCAAoC,CAAC,CAAC,CAAC;IAC3G;;IAEA,IAAIe,MAAM;IACV,IAAI,CAACC,YAAY,GAAG,IAAIC,OAAO,CAAC,CAAClE,CAAC,EAAEmE,CAAC,KAAKH,MAAM,GAAGG,CAAC,CAAC;IACrD,IAAI,CAACC,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;IAEvC,IAAIC,OAAO,GAAGA,CAAA,KAAMN,MAAM,CAAC,IAAIP,oBAAoB,CAAC,uBAAuB,CAAC,CAAC;IAE7E,IAAI,CAACc,mBAAmB,GAAG,MAAM,IAAI,CAACH,UAAU,CAACI,MAAM,CAAC/J,mBAAmB,CAAC,OAAO,EAAE6J,OAAO,CAAC;IAE7F,IAAI,CAACF,UAAU,CAACI,MAAM,CAAChK,gBAAgB,CAAC,OAAO,EAAE8J,OAAO,CAAC;IACzD,IAAI,CAACrB,IAAI,GAAG1P,MAAM,CAACwB,OAAO,CAACkO,IAAI,CAAC,CAACnE,MAAM,CAAC,CAAC2F,GAAG,EAAE/K,IAAI,KAAK;MACrD,IAAI,CAACvF,GAAG,EAAET,KAAK,CAAC,GAAGgG,IAAI;MACvB,OAAOnG,MAAM,CAACK,MAAM,CAAC6Q,GAAG,EAAE;QACxB,CAACtQ,GAAG,GAAG,IAAI,CAACuQ,YAAY,CAACvQ,GAAG,EAAET,KAAK;MACrC,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,CAAC,CAAC;EACR;EAEAgR,YAAYA,CAACvQ,GAAG,EAAET,KAAK,EAAE;IACvB,IAAI,EAAEA,KAAK,YAAYwQ,OAAO,CAAC,EAAE;MAC/B,OAAOxQ,KAAK;IACd;IAEA,IAAI,CAACkQ,WAAW,CAACrI,GAAG,CAACpH,GAAG,CAAC,CAAC,CAAC;IAC3B;;IAEA,IAAIwQ,OAAO,GAAGT,OAAO,CAACU,IAAI,CAAC,CAAClR,KAAK,EAAE,IAAI,CAACuQ,YAAY,CAAC,CAAC,CAACY,IAAI,CAAC5B,IAAI,IAAI,IAAI,CAAC6B,QAAQ,CAACH,OAAO,EAAExQ,GAAG,EAAE,IAAI,EAAE8O,IAAI,CAAC,EAAE3I,KAAK,IAAI,IAAI,CAACwK,QAAQ,CAACH,OAAO,EAAExQ,GAAG,EAAEmG,KAAK,CAAC,CAAC,CAAC,CAAC;IAC3J;;IAEAqK,OAAO,CAACI,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;IACvBxR,MAAM,CAACC,cAAc,CAACmR,OAAO,EAAE,UAAU,EAAE;MACzCK,GAAG,EAAEA,CAAA,KAAM;IACb,CAAC,CAAC;IACF,OAAOL,OAAO;EAChB;EAEAG,QAAQA,CAACH,OAAO,EAAExQ,GAAG,EAAEmG,KAAK,EAAE2I,IAAI,EAAE;IAClC,IAAI,IAAI,CAACmB,UAAU,CAACI,MAAM,CAACS,OAAO,IAAI3K,KAAK,YAAYmJ,oBAAoB,EAAE;MAC3E,IAAI,CAACc,mBAAmB,CAAC,CAAC;MAC1BhR,MAAM,CAACC,cAAc,CAACmR,OAAO,EAAE,QAAQ,EAAE;QACvCK,GAAG,EAAEA,CAAA,KAAM1K;MACb,CAAC,CAAC;MACF,OAAO4J,OAAO,CAACF,MAAM,CAAC1J,KAAK,CAAC;IAC9B;IAEA,IAAI,CAACsJ,WAAW,CAACsB,MAAM,CAAC/Q,GAAG,CAAC;IAE5B,IAAI,IAAI,CAACgR,IAAI,EAAE;MACb;MACA,IAAI,CAACZ,mBAAmB,CAAC,CAAC;IAC5B;IAEA,MAAMV,UAAU,GAAG,IAAI,CAACA,UAAU;IAElC,IAAIvJ,KAAK,EAAE;MACT/G,MAAM,CAACC,cAAc,CAACmR,OAAO,EAAE,QAAQ,EAAE;QACvCK,GAAG,EAAEA,CAAA,KAAM1K;MACb,CAAC,CAAC;MACFuJ,UAAU,IAAIA,UAAU,CAAC,KAAK,CAAC;MAC/B,OAAOK,OAAO,CAACF,MAAM,CAAC1J,KAAK,CAAC;IAC9B;IAEA/G,MAAM,CAACC,cAAc,CAACmR,OAAO,EAAE,OAAO,EAAE;MACtCK,GAAG,EAAEA,CAAA,KAAM/B;IACb,CAAC,CAAC;IACFY,UAAU,IAAIA,UAAU,CAAC,KAAK,CAAC;IAC/B,OAAOZ,IAAI;EACb;EAEAmC,SAASA,CAAC5N,EAAE,EAAE;IACZ,IAAI,CAACqM,UAAU,GAAGrM,EAAE;EACtB;EAEA6N,MAAMA,CAAA,EAAG;IACP,IAAI,CAACjB,UAAU,CAACkB,KAAK,CAAC,CAAC;IACvB,IAAI,CAAC1B,WAAW,CAAC5G,OAAO,CAAC,CAACuI,CAAC,EAAEC,CAAC,KAAK,IAAI,CAAC5B,WAAW,CAACsB,MAAM,CAACM,CAAC,CAAC,CAAC;IAC9D,IAAI3B,UAAU,GAAG,IAAI,CAACA,UAAU;IAChCA,UAAU,IAAIA,UAAU,CAAC,IAAI,CAAC;EAChC;EAEA,MAAM4B,WAAWA,CAACjB,MAAM,EAAE;IACxB,IAAIS,OAAO,GAAG,KAAK;IAEnB,IAAI,CAAC,IAAI,CAACE,IAAI,EAAE;MACd,IAAIb,OAAO,GAAGA,CAAA,KAAM,IAAI,CAACe,MAAM,CAAC,CAAC;MAEjCb,MAAM,CAAChK,gBAAgB,CAAC,OAAO,EAAE8J,OAAO,CAAC;MACzCW,OAAO,GAAG,MAAM,IAAIf,OAAO,CAACwB,OAAO,IAAI;QACrC,IAAI,CAACN,SAAS,CAACH,OAAO,IAAI;UACxBT,MAAM,CAAC/J,mBAAmB,CAAC,OAAO,EAAE6J,OAAO,CAAC;UAE5C,IAAIW,OAAO,IAAI,IAAI,CAACE,IAAI,EAAE;YACxBO,OAAO,CAACT,OAAO,CAAC;UAClB;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ;IAEA,OAAOA,OAAO;EAChB;EAEA,IAAIE,IAAIA,CAAA,EAAG;IACT,OAAO,IAAI,CAACvB,WAAW,CAAC+B,IAAI,KAAK,CAAC;EACpC;EAEA,IAAIC,aAAaA,CAAA,EAAG;IAClB9M,SAAS,CAAC,IAAI,CAACmK,IAAI,KAAK,IAAI,IAAI,IAAI,CAACkC,IAAI,EAAE,2DAA2D,CAAC;IACvG,OAAO5R,MAAM,CAACwB,OAAO,CAAC,IAAI,CAACkO,IAAI,CAAC,CAACnE,MAAM,CAAC,CAAC2F,GAAG,EAAEoB,KAAK,KAAK;MACtD,IAAI,CAAC1R,GAAG,EAAET,KAAK,CAAC,GAAGmS,KAAK;MACxB,OAAOtS,MAAM,CAACK,MAAM,CAAC6Q,GAAG,EAAE;QACxB,CAACtQ,GAAG,GAAG2R,oBAAoB,CAACpS,KAAK;MACnC,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,CAAC,CAAC;EACR;AAEF;AAEA,SAASqS,gBAAgBA,CAACrS,KAAK,EAAE;EAC/B,OAAOA,KAAK,YAAYwQ,OAAO,IAAIxQ,KAAK,CAACsS,QAAQ,KAAK,IAAI;AAC5D;AAEA,SAASF,oBAAoBA,CAACpS,KAAK,EAAE;EACnC,IAAI,CAACqS,gBAAgB,CAACrS,KAAK,CAAC,EAAE;IAC5B,OAAOA,KAAK;EACd;EAEA,IAAIA,KAAK,CAACuS,MAAM,EAAE;IAChB,MAAMvS,KAAK,CAACuS,MAAM;EACpB;EAEA,OAAOvS,KAAK,CAACwS,KAAK;AACpB;AAEA,SAASC,KAAKA,CAAClD,IAAI,EAAE;EACnB,OAAO,IAAIS,YAAY,CAACT,IAAI,CAAC;AAC/B;;AAEA;AACA;AACA;AACA;AACA,MAAMmD,QAAQ,GAAG,SAASA,QAAQA,CAAC3N,GAAG,EAAEyK,IAAI,EAAE;EAC5C,IAAIA,IAAI,KAAK,KAAK,CAAC,EAAE;IACnBA,IAAI,GAAG,GAAG;EACZ;EAEA,IAAIC,YAAY,GAAGD,IAAI;EAEvB,IAAI,OAAOC,YAAY,KAAK,QAAQ,EAAE;IACpCA,YAAY,GAAG;MACbC,MAAM,EAAED;IACV,CAAC;EACH,CAAC,MAAM,IAAI,OAAOA,YAAY,CAACC,MAAM,KAAK,WAAW,EAAE;IACrDD,YAAY,CAACC,MAAM,GAAG,GAAG;EAC3B;EAEA,IAAIC,OAAO,GAAG,IAAIC,OAAO,CAACH,YAAY,CAACE,OAAO,CAAC;EAC/CA,OAAO,CAACE,GAAG,CAAC,UAAU,EAAE9K,GAAG,CAAC;EAC5B,OAAO,IAAI+K,QAAQ,CAAC,IAAI,EAAE7P,QAAQ,CAAC,CAAC,CAAC,EAAEwP,YAAY,EAAE;IACnDE;EACF,CAAC,CAAC,CAAC;AACL,CAAC;AACD;AACA;AACA;AACA;;AAEA,MAAMgD,aAAa,CAAC;EAClB1C,WAAWA,CAACP,MAAM,EAAEkD,UAAU,EAAErD,IAAI,EAAEsD,QAAQ,EAAE;IAC9C,IAAIA,QAAQ,KAAK,KAAK,CAAC,EAAE;MACvBA,QAAQ,GAAG,KAAK;IAClB;IAEA,IAAI,CAACnD,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACkD,UAAU,GAAGA,UAAU,IAAI,EAAE;IAClC,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IAExB,IAAItD,IAAI,YAAYjK,KAAK,EAAE;MACzB,IAAI,CAACiK,IAAI,GAAGA,IAAI,CAAC1J,QAAQ,CAAC,CAAC;MAC3B,IAAI,CAACe,KAAK,GAAG2I,IAAI;IACnB,CAAC,MAAM;MACL,IAAI,CAACA,IAAI,GAAGA,IAAI;IAClB;EACF;AAEF;AACA;AACA;AACA;AACA;;AAEA,SAASuD,oBAAoBA,CAACpN,CAAC,EAAE;EAC/B,OAAOA,CAAC,YAAYiN,aAAa;AACnC;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,MAAMI,uBAAuB,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,CAAC;AAClE,MAAMC,oBAAoB,GAAG,IAAIzL,GAAG,CAACwL,uBAAuB,CAAC;AAC7D,MAAME,sBAAsB,GAAG,CAAC,KAAK,EAAE,GAAGF,uBAAuB,CAAC;AAClE,MAAMG,mBAAmB,GAAG,IAAI3L,GAAG,CAAC0L,sBAAsB,CAAC;AAC3D,MAAME,mBAAmB,GAAG,IAAI5L,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;AAC9D,MAAM6L,iCAAiC,GAAG,IAAI7L,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;AAC7D,MAAM8L,eAAe,GAAG;EACtB3R,KAAK,EAAE,MAAM;EACbY,QAAQ,EAAEX,SAAS;EACnB2R,UAAU,EAAE3R,SAAS;EACrB4R,UAAU,EAAE5R,SAAS;EACrB6R,WAAW,EAAE7R,SAAS;EACtB8R,QAAQ,EAAE9R;AACZ,CAAC;AACD,MAAM+R,YAAY,GAAG;EACnBhS,KAAK,EAAE,MAAM;EACb6N,IAAI,EAAE5N,SAAS;EACf2R,UAAU,EAAE3R,SAAS;EACrB4R,UAAU,EAAE5R,SAAS;EACrB6R,WAAW,EAAE7R,SAAS;EACtB8R,QAAQ,EAAE9R;AACZ,CAAC;AACD,MAAMgS,SAAS,GAAG,OAAO1P,MAAM,KAAK,WAAW,IAAI,OAAOA,MAAM,CAACU,QAAQ,KAAK,WAAW,IAAI,OAAOV,MAAM,CAACU,QAAQ,CAACiP,aAAa,KAAK,WAAW;AACjJ,MAAMC,QAAQ,GAAG,CAACF,SAAS,CAAC,CAAC;AAC7B;AACA;AACA;;AAEA;AACA;AACA;;AAEA,SAASG,YAAYA,CAACtE,IAAI,EAAE;EAC1BpK,SAAS,CAACoK,IAAI,CAACpI,MAAM,CAAC7G,MAAM,GAAG,CAAC,EAAE,2DAA2D,CAAC;EAC9F,IAAIwT,UAAU,GAAG5M,yBAAyB,CAACqI,IAAI,CAACpI,MAAM,CAAC,CAAC,CAAC;;EAEzD,IAAI4M,eAAe,GAAG,IAAI,CAAC,CAAC;;EAE5B,IAAIC,WAAW,GAAG,IAAI1M,GAAG,CAAC,CAAC,CAAC,CAAC;;EAE7B,IAAI2M,oBAAoB,GAAG,IAAI,CAAC,CAAC;;EAEjC,IAAIC,uBAAuB,GAAG,IAAI,CAAC,CAAC;;EAEpC,IAAIC,iBAAiB,GAAG,IAAI,CAAC,CAAC;EAC9B;EACA;EACA;EACA;EACA;;EAEA,IAAIC,qBAAqB,GAAG7E,IAAI,CAAC8E,aAAa,IAAI,IAAI;EACtD,IAAIC,cAAc,GAAGvM,WAAW,CAAC+L,UAAU,EAAEvE,IAAI,CAAC3M,OAAO,CAACP,QAAQ,EAAEkN,IAAI,CAACtH,QAAQ,CAAC;EAClF,IAAIsM,aAAa,GAAG,IAAI;EAExB,IAAID,cAAc,IAAI,IAAI,EAAE;IAC1B;IACA;IACA,IAAI3N,KAAK,GAAG6N,sBAAsB,CAAC,GAAG,EAAE;MACtCjS,QAAQ,EAAEgN,IAAI,CAAC3M,OAAO,CAACP,QAAQ,CAACE;IAClC,CAAC,CAAC;IACF,IAAI;MACF+F,OAAO;MACPrB;IACF,CAAC,GAAGwN,sBAAsB,CAACX,UAAU,CAAC;IACtCQ,cAAc,GAAGhM,OAAO;IACxBiM,aAAa,GAAG;MACd,CAACtN,KAAK,CAACO,EAAE,GAAGb;IACd,CAAC;EACH;EAEA,IAAI+N,WAAW,GAAG,CAACJ,cAAc,CAACrJ,IAAI,CAAC0J,CAAC,IAAIA,CAAC,CAAC1N,KAAK,CAAC2N,MAAM,CAAC,IAAIrF,IAAI,CAAC8E,aAAa,IAAI,IAAI;EACzF,IAAIQ,MAAM;EACV,IAAIpT,KAAK,GAAG;IACVqT,aAAa,EAAEvF,IAAI,CAAC3M,OAAO,CAAChB,MAAM;IAClCS,QAAQ,EAAEkN,IAAI,CAAC3M,OAAO,CAACP,QAAQ;IAC/BiG,OAAO,EAAEgM,cAAc;IACvBI,WAAW;IACXK,UAAU,EAAE3B,eAAe;IAC3B;IACA4B,qBAAqB,EAAEzF,IAAI,CAAC8E,aAAa,IAAI,IAAI,GAAG,KAAK,GAAG,IAAI;IAChEY,kBAAkB,EAAE,KAAK;IACzBC,YAAY,EAAE,MAAM;IACpBC,UAAU,EAAE5F,IAAI,CAAC8E,aAAa,IAAI9E,IAAI,CAAC8E,aAAa,CAACc,UAAU,IAAI,CAAC,CAAC;IACrEC,UAAU,EAAE7F,IAAI,CAAC8E,aAAa,IAAI9E,IAAI,CAAC8E,aAAa,CAACe,UAAU,IAAI,IAAI;IACvEC,MAAM,EAAE9F,IAAI,CAAC8E,aAAa,IAAI9E,IAAI,CAAC8E,aAAa,CAACgB,MAAM,IAAId,aAAa;IACxEe,QAAQ,EAAE,IAAIC,GAAG,CAAC;EACpB,CAAC,CAAC,CAAC;EACH;;EAEA,IAAIC,aAAa,GAAG1V,OAAO,CAACe,MAAM,CAACgB,GAAG,CAAC,CAAC;EACxC;;EAEA,IAAI4T,yBAAyB,GAAG,KAAK,CAAC,CAAC;;EAEvC,IAAIC,2BAA2B,CAAC,CAAC;EACjC;;EAEA,IAAIC,2BAA2B,GAAG,KAAK,CAAC,CAAC;EACzC;EACA;EACA;;EAEA,IAAIC,sBAAsB,GAAG,KAAK,CAAC,CAAC;EACpC;;EAEA,IAAIC,uBAAuB,GAAG,EAAE,CAAC,CAAC;EAClC;;EAEA,IAAIC,qBAAqB,GAAG,EAAE,CAAC,CAAC;;EAEhC,IAAIC,gBAAgB,GAAG,IAAIR,GAAG,CAAC,CAAC,CAAC,CAAC;;EAElC,IAAIS,kBAAkB,GAAG,CAAC,CAAC,CAAC;EAC5B;EACA;;EAEA,IAAIC,uBAAuB,GAAG,CAAC,CAAC,CAAC,CAAC;;EAElC,IAAIC,cAAc,GAAG,IAAIX,GAAG,CAAC,CAAC,CAAC,CAAC;;EAEhC,IAAIY,gBAAgB,GAAG,IAAI7O,GAAG,CAAC,CAAC,CAAC,CAAC;;EAElC,IAAI8O,gBAAgB,GAAG,IAAIb,GAAG,CAAC,CAAC,CAAC,CAAC;EAClC;EACA;EACA;;EAEA,IAAIc,eAAe,GAAG,IAAId,GAAG,CAAC,CAAC,CAAC,CAAC;EACjC;EACA;;EAEA,SAASe,UAAUA,CAAA,EAAG;IACpB;IACA;IACAvC,eAAe,GAAGxE,IAAI,CAAC3M,OAAO,CAACgB,MAAM,CAACmC,IAAI,IAAI;MAC5C,IAAI;QACFnE,MAAM,EAAEkT,aAAa;QACrBzS;MACF,CAAC,GAAG0D,IAAI;MACR,OAAOwQ,eAAe,CAACzB,aAAa,EAAEzS,QAAQ,CAAC;IACjD,CAAC,CAAC,CAAC,CAAC;;IAEJ,IAAI,CAACZ,KAAK,CAACiT,WAAW,EAAE;MACtB6B,eAAe,CAACzW,OAAO,CAACe,MAAM,CAACgB,GAAG,EAAEJ,KAAK,CAACY,QAAQ,CAAC;IACrD;IAEA,OAAOwS,MAAM;EACf,CAAC,CAAC;;EAGF,SAAS2B,OAAOA,CAAA,EAAG;IACjB,IAAIzC,eAAe,EAAE;MACnBA,eAAe,CAAC,CAAC;IACnB;IAEAC,WAAW,CAACyC,KAAK,CAAC,CAAC;IACnBf,2BAA2B,IAAIA,2BAA2B,CAAC/D,KAAK,CAAC,CAAC;IAClElQ,KAAK,CAAC6T,QAAQ,CAACjM,OAAO,CAAC,CAACgD,CAAC,EAAE7L,GAAG,KAAKkW,aAAa,CAAClW,GAAG,CAAC,CAAC;EACxD,CAAC,CAAC;;EAGF,SAASiR,SAASA,CAAC5N,EAAE,EAAE;IACrBmQ,WAAW,CAACpM,GAAG,CAAC/D,EAAE,CAAC;IACnB,OAAO,MAAMmQ,WAAW,CAACzC,MAAM,CAAC1N,EAAE,CAAC;EACrC,CAAC,CAAC;;EAGF,SAAS8S,WAAWA,CAACC,QAAQ,EAAE;IAC7BnV,KAAK,GAAGzB,QAAQ,CAAC,CAAC,CAAC,EAAEyB,KAAK,EAAEmV,QAAQ,CAAC;IACrC5C,WAAW,CAAC3K,OAAO,CAAC6G,UAAU,IAAIA,UAAU,CAACzO,KAAK,CAAC,CAAC;EACtD,CAAC,CAAC;EACF;EACA;EACA;EACA;;EAGA,SAASoV,kBAAkBA,CAACxU,QAAQ,EAAEuU,QAAQ,EAAE;IAC9C,IAAIE,eAAe;;IAEnB;IACA;IACA;IACA;IACA;IACA,IAAIC,cAAc,GAAGtV,KAAK,CAAC2T,UAAU,IAAI,IAAI,IAAI3T,KAAK,CAACsT,UAAU,CAAC1B,UAAU,IAAI,IAAI,IAAI2D,gBAAgB,CAACvV,KAAK,CAACsT,UAAU,CAAC1B,UAAU,CAAC,IAAI5R,KAAK,CAACsT,UAAU,CAACtT,KAAK,KAAK,SAAS,IAAI,CAAC,CAACqV,eAAe,GAAGzU,QAAQ,CAACZ,KAAK,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGqV,eAAe,CAACG,WAAW,MAAM,IAAI;IAC7Q,IAAI7B,UAAU;IAEd,IAAIwB,QAAQ,CAACxB,UAAU,EAAE;MACvB,IAAIxV,MAAM,CAACsX,IAAI,CAACN,QAAQ,CAACxB,UAAU,CAAC,CAAC9U,MAAM,GAAG,CAAC,EAAE;QAC/C8U,UAAU,GAAGwB,QAAQ,CAACxB,UAAU;MAClC,CAAC,MAAM;QACL;QACAA,UAAU,GAAG,IAAI;MACnB;IACF,CAAC,MAAM,IAAI2B,cAAc,EAAE;MACzB;MACA3B,UAAU,GAAG3T,KAAK,CAAC2T,UAAU;IAC/B,CAAC,MAAM;MACL;MACAA,UAAU,GAAG,IAAI;IACnB,CAAC,CAAC;;IAGF,IAAID,UAAU,GAAGyB,QAAQ,CAACzB,UAAU,GAAGgC,eAAe,CAAC1V,KAAK,CAAC0T,UAAU,EAAEyB,QAAQ,CAACzB,UAAU,EAAEyB,QAAQ,CAACtO,OAAO,IAAI,EAAE,EAAEsO,QAAQ,CAACvB,MAAM,CAAC,GAAG5T,KAAK,CAAC0T,UAAU;IACzJwB,WAAW,CAAC3W,QAAQ,CAAC,CAAC,CAAC,EAAE4W,QAAQ,EAAE;MACjC;MACAxB,UAAU;MACVD,UAAU;MACVL,aAAa,EAAEU,aAAa;MAC5BnT,QAAQ;MACRqS,WAAW,EAAE,IAAI;MACjBK,UAAU,EAAE3B,eAAe;MAC3B8B,YAAY,EAAE,MAAM;MACpB;MACAF,qBAAqB,EAAEvT,KAAK,CAACsT,UAAU,CAACvB,QAAQ,GAAG,KAAK,GAAG4D,sBAAsB,CAAC/U,QAAQ,EAAEuU,QAAQ,CAACtO,OAAO,IAAI7G,KAAK,CAAC6G,OAAO,CAAC;MAC9H2M,kBAAkB,EAAEQ;IACtB,CAAC,CAAC,CAAC;IAEH,IAAIE,2BAA2B,EAAE,CAAC,KAAM,IAAIH,aAAa,KAAK1V,OAAO,CAACe,MAAM,CAACgB,GAAG,EAAE,CAAC,KAAM,IAAI2T,aAAa,KAAK1V,OAAO,CAACe,MAAM,CAACwC,IAAI,EAAE;MAClIkM,IAAI,CAAC3M,OAAO,CAACQ,IAAI,CAACf,QAAQ,EAAEA,QAAQ,CAACZ,KAAK,CAAC;IAC7C,CAAC,MAAM,IAAI+T,aAAa,KAAK1V,OAAO,CAACe,MAAM,CAAC4C,OAAO,EAAE;MACnD8L,IAAI,CAAC3M,OAAO,CAACY,OAAO,CAACnB,QAAQ,EAAEA,QAAQ,CAACZ,KAAK,CAAC;IAChD,CAAC,CAAC;;IAGF+T,aAAa,GAAG1V,OAAO,CAACe,MAAM,CAACgB,GAAG;IAClC4T,yBAAyB,GAAG,KAAK;IACjCE,2BAA2B,GAAG,KAAK;IACnCC,sBAAsB,GAAG,KAAK;IAC9BC,uBAAuB,GAAG,EAAE;IAC5BC,qBAAqB,GAAG,EAAE;EAC5B,CAAC,CAAC;EACF;;EAGA,eAAeuB,QAAQA,CAACjV,EAAE,EAAEkV,IAAI,EAAE;IAChC,IAAI,OAAOlV,EAAE,KAAK,QAAQ,EAAE;MAC1BmN,IAAI,CAAC3M,OAAO,CAACc,EAAE,CAACtB,EAAE,CAAC;MACnB;IACF;IAEA,IAAI;MACFY,IAAI;MACJuU,UAAU;MACV5Q;IACF,CAAC,GAAG6Q,wBAAwB,CAACpV,EAAE,EAAEkV,IAAI,CAAC;IACtC,IAAIjV,QAAQ,GAAGC,cAAc,CAACb,KAAK,CAACY,QAAQ,EAAEW,IAAI,EAAEsU,IAAI,IAAIA,IAAI,CAAC7V,KAAK,CAAC,CAAC,CAAC;IACzE;IACA;IACA;IACA;;IAEAY,QAAQ,GAAGrC,QAAQ,CAAC,CAAC,CAAC,EAAEqC,QAAQ,EAAEkN,IAAI,CAAC3M,OAAO,CAACG,cAAc,CAACV,QAAQ,CAAC,CAAC;IACxE,IAAIoV,WAAW,GAAGH,IAAI,IAAIA,IAAI,CAAC9T,OAAO,IAAI,IAAI,GAAG8T,IAAI,CAAC9T,OAAO,GAAG9B,SAAS;IACzE,IAAIoT,aAAa,GAAGhV,OAAO,CAACe,MAAM,CAACwC,IAAI;IAEvC,IAAIoU,WAAW,KAAK,IAAI,EAAE;MACxB3C,aAAa,GAAGhV,OAAO,CAACe,MAAM,CAAC4C,OAAO;IACxC,CAAC,MAAM,IAAIgU,WAAW,KAAK,KAAK,EAAE,CAAC,KAAM,IAAIF,UAAU,IAAI,IAAI,IAAIP,gBAAgB,CAACO,UAAU,CAAClE,UAAU,CAAC,IAAIkE,UAAU,CAACjE,UAAU,KAAK7R,KAAK,CAACY,QAAQ,CAACE,QAAQ,GAAGd,KAAK,CAACY,QAAQ,CAACa,MAAM,EAAE;MACvL;MACA;MACA;MACA;MACA4R,aAAa,GAAGhV,OAAO,CAACe,MAAM,CAAC4C,OAAO;IACxC;IAEA,IAAIwR,kBAAkB,GAAGqC,IAAI,IAAI,oBAAoB,IAAIA,IAAI,GAAGA,IAAI,CAACrC,kBAAkB,KAAK,IAAI,GAAGvT,SAAS;IAC5G,OAAO,MAAM6U,eAAe,CAACzB,aAAa,EAAEzS,QAAQ,EAAE;MACpDkV,UAAU;MACV;MACA;MACAG,YAAY,EAAE/Q,KAAK;MACnBsO,kBAAkB;MAClBzR,OAAO,EAAE8T,IAAI,IAAIA,IAAI,CAAC9T;IACxB,CAAC,CAAC;EACJ,CAAC,CAAC;EACF;EACA;;EAGA,SAASmU,UAAUA,CAAA,EAAG;IACpBC,oBAAoB,CAAC,CAAC;IACtBjB,WAAW,CAAC;MACVzB,YAAY,EAAE;IAChB,CAAC,CAAC,CAAC,CAAC;IACJ;;IAEA,IAAIzT,KAAK,CAACsT,UAAU,CAACtT,KAAK,KAAK,YAAY,EAAE;MAC3C;IACF,CAAC,CAAC;IACF;IACA;;IAGA,IAAIA,KAAK,CAACsT,UAAU,CAACtT,KAAK,KAAK,MAAM,EAAE;MACrC8U,eAAe,CAAC9U,KAAK,CAACqT,aAAa,EAAErT,KAAK,CAACY,QAAQ,EAAE;QACnDwV,8BAA8B,EAAE;MAClC,CAAC,CAAC;MACF;IACF,CAAC,CAAC;IACF;IACA;;IAGAtB,eAAe,CAACf,aAAa,IAAI/T,KAAK,CAACqT,aAAa,EAAErT,KAAK,CAACsT,UAAU,CAAC1S,QAAQ,EAAE;MAC/EyV,kBAAkB,EAAErW,KAAK,CAACsT;IAC5B,CAAC,CAAC;EACJ,CAAC,CAAC;EACF;EACA;;EAGA,eAAewB,eAAeA,CAACzB,aAAa,EAAEzS,QAAQ,EAAEiV,IAAI,EAAE;IAC5D;IACA;IACA;IACA5B,2BAA2B,IAAIA,2BAA2B,CAAC/D,KAAK,CAAC,CAAC;IAClE+D,2BAA2B,GAAG,IAAI;IAClCF,aAAa,GAAGV,aAAa;IAC7Ba,2BAA2B,GAAG,CAAC2B,IAAI,IAAIA,IAAI,CAACO,8BAA8B,MAAM,IAAI,CAAC,CAAC;IACtF;;IAEAE,kBAAkB,CAACtW,KAAK,CAACY,QAAQ,EAAEZ,KAAK,CAAC6G,OAAO,CAAC;IACjDmN,yBAAyB,GAAG,CAAC6B,IAAI,IAAIA,IAAI,CAACrC,kBAAkB,MAAM,IAAI;IACtE,IAAI+C,iBAAiB,GAAGV,IAAI,IAAIA,IAAI,CAACQ,kBAAkB;IACvD,IAAIxP,OAAO,GAAGP,WAAW,CAAC+L,UAAU,EAAEzR,QAAQ,EAAEkN,IAAI,CAACtH,QAAQ,CAAC,CAAC,CAAC;;IAEhE,IAAI,CAACK,OAAO,EAAE;MACZ,IAAI3B,KAAK,GAAG6N,sBAAsB,CAAC,GAAG,EAAE;QACtCjS,QAAQ,EAAEF,QAAQ,CAACE;MACrB,CAAC,CAAC;MACF,IAAI;QACF+F,OAAO,EAAE2P,eAAe;QACxBhR;MACF,CAAC,GAAGwN,sBAAsB,CAACX,UAAU,CAAC,CAAC,CAAC;;MAExCoE,qBAAqB,CAAC,CAAC;MACvBrB,kBAAkB,CAACxU,QAAQ,EAAE;QAC3BiG,OAAO,EAAE2P,eAAe;QACxB9C,UAAU,EAAE,CAAC,CAAC;QACdE,MAAM,EAAE;UACN,CAACpO,KAAK,CAACO,EAAE,GAAGb;QACd;MACF,CAAC,CAAC;MACF;IACF,CAAC,CAAC;;IAGF,IAAIwR,gBAAgB,CAAC1W,KAAK,CAACY,QAAQ,EAAEA,QAAQ,CAAC,EAAE;MAC9CwU,kBAAkB,CAACxU,QAAQ,EAAE;QAC3BiG;MACF,CAAC,CAAC;MACF;IACF,CAAC,CAAC;;IAGFoN,2BAA2B,GAAG,IAAIhF,eAAe,CAAC,CAAC;IACnD,IAAI0H,OAAO,GAAGC,uBAAuB,CAAChW,QAAQ,EAAEqT,2BAA2B,CAAC7E,MAAM,EAAEyG,IAAI,IAAIA,IAAI,CAACC,UAAU,CAAC;IAC5G,IAAIe,iBAAiB;IACrB,IAAIZ,YAAY;IAEhB,IAAIJ,IAAI,IAAIA,IAAI,CAACI,YAAY,EAAE;MAC7B;MACA;MACA;MACA;MACAA,YAAY,GAAG;QACb,CAACa,mBAAmB,CAACjQ,OAAO,CAAC,CAACrB,KAAK,CAACO,EAAE,GAAG8P,IAAI,CAACI;MAChD,CAAC;IACH,CAAC,MAAM,IAAIJ,IAAI,IAAIA,IAAI,CAACC,UAAU,IAAIP,gBAAgB,CAACM,IAAI,CAACC,UAAU,CAAClE,UAAU,CAAC,EAAE;MAClF;MACA,IAAImF,YAAY,GAAG,MAAMC,YAAY,CAACL,OAAO,EAAE/V,QAAQ,EAAEiV,IAAI,CAACC,UAAU,EAAEjP,OAAO,EAAE;QACjF9E,OAAO,EAAE8T,IAAI,CAAC9T;MAChB,CAAC,CAAC;MAEF,IAAIgV,YAAY,CAACE,cAAc,EAAE;QAC/B;MACF;MAEAJ,iBAAiB,GAAGE,YAAY,CAACF,iBAAiB;MAClDZ,YAAY,GAAGc,YAAY,CAACG,kBAAkB;MAE9C,IAAI5D,UAAU,GAAG/U,QAAQ,CAAC;QACxByB,KAAK,EAAE,SAAS;QAChBY;MACF,CAAC,EAAEiV,IAAI,CAACC,UAAU,CAAC;MAEnBS,iBAAiB,GAAGjD,UAAU,CAAC,CAAC;;MAEhCqD,OAAO,GAAG,IAAIQ,OAAO,CAACR,OAAO,CAACtT,GAAG,EAAE;QACjC+L,MAAM,EAAEuH,OAAO,CAACvH;MAClB,CAAC,CAAC;IACJ,CAAC,CAAC;;IAGF,IAAI;MACF6H,cAAc;MACdvD,UAAU;MACVE;IACF,CAAC,GAAG,MAAMwD,aAAa,CAACT,OAAO,EAAE/V,QAAQ,EAAEiG,OAAO,EAAE0P,iBAAiB,EAAEV,IAAI,IAAIA,IAAI,CAACC,UAAU,EAAED,IAAI,IAAIA,IAAI,CAAC9T,OAAO,EAAE8U,iBAAiB,EAAEZ,YAAY,CAAC;IAEtJ,IAAIgB,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACF;IACA;;IAGAhD,2BAA2B,GAAG,IAAI;IAClCmB,kBAAkB,CAACxU,QAAQ,EAAErC,QAAQ,CAAC;MACpCsI;IACF,CAAC,EAAEgQ,iBAAiB,GAAG;MACrBlD,UAAU,EAAEkD;IACd,CAAC,GAAG,CAAC,CAAC,EAAE;MACNnD,UAAU;MACVE;IACF,CAAC,CAAC,CAAC;EACL,CAAC,CAAC;EACF;;EAGA,eAAeoD,YAAYA,CAACL,OAAO,EAAE/V,QAAQ,EAAEkV,UAAU,EAAEjP,OAAO,EAAEgP,IAAI,EAAE;IACxEM,oBAAoB,CAAC,CAAC,CAAC,CAAC;;IAExB,IAAI7C,UAAU,GAAG/U,QAAQ,CAAC;MACxByB,KAAK,EAAE,YAAY;MACnBY;IACF,CAAC,EAAEkV,UAAU,CAAC;IAEdZ,WAAW,CAAC;MACV5B;IACF,CAAC,CAAC,CAAC,CAAC;;IAEJ,IAAI7K,MAAM;IACV,IAAI4O,WAAW,GAAGC,cAAc,CAACzQ,OAAO,EAAEjG,QAAQ,CAAC;IAEnD,IAAI,CAACyW,WAAW,CAAC7R,KAAK,CAACrF,MAAM,EAAE;MAC7BsI,MAAM,GAAG;QACP8O,IAAI,EAAEjS,UAAU,CAACJ,KAAK;QACtBA,KAAK,EAAE6N,sBAAsB,CAAC,GAAG,EAAE;UACjCyE,MAAM,EAAEb,OAAO,CAACa,MAAM;UACtB1W,QAAQ,EAAEF,QAAQ,CAACE,QAAQ;UAC3B2W,OAAO,EAAEJ,WAAW,CAAC7R,KAAK,CAACO;QAC7B,CAAC;MACH,CAAC;IACH,CAAC,MAAM;MACL0C,MAAM,GAAG,MAAMiP,kBAAkB,CAAC,QAAQ,EAAEf,OAAO,EAAEU,WAAW,EAAExQ,OAAO,EAAEuM,MAAM,CAAC5M,QAAQ,CAAC;MAE3F,IAAImQ,OAAO,CAACvH,MAAM,CAACS,OAAO,EAAE;QAC1B,OAAO;UACLoH,cAAc,EAAE;QAClB,CAAC;MACH;IACF;IAEA,IAAIU,gBAAgB,CAAClP,MAAM,CAAC,EAAE;MAC5B,IAAI1G,OAAO;MAEX,IAAI8T,IAAI,IAAIA,IAAI,CAAC9T,OAAO,IAAI,IAAI,EAAE;QAChCA,OAAO,GAAG8T,IAAI,CAAC9T,OAAO;MACxB,CAAC,MAAM;QACL;QACA;QACA;QACAA,OAAO,GAAG0G,MAAM,CAAC7H,QAAQ,KAAKZ,KAAK,CAACY,QAAQ,CAACE,QAAQ,GAAGd,KAAK,CAACY,QAAQ,CAACa,MAAM;MAC/E;MAEA,MAAMmW,uBAAuB,CAAC5X,KAAK,EAAEyI,MAAM,EAAE;QAC3CqN,UAAU;QACV/T;MACF,CAAC,CAAC;MACF,OAAO;QACLkV,cAAc,EAAE;MAClB,CAAC;IACH;IAEA,IAAIY,aAAa,CAACpP,MAAM,CAAC,EAAE;MACzB;MACA;MACA,IAAIqP,aAAa,GAAGhB,mBAAmB,CAACjQ,OAAO,EAAEwQ,WAAW,CAAC7R,KAAK,CAACO,EAAE,CAAC,CAAC,CAAC;MACxE;MACA;MACA;;MAEA,IAAI,CAAC8P,IAAI,IAAIA,IAAI,CAAC9T,OAAO,MAAM,IAAI,EAAE;QACnCgS,aAAa,GAAG1V,OAAO,CAACe,MAAM,CAACwC,IAAI;MACrC;MAEA,OAAO;QACL;QACAiV,iBAAiB,EAAE,CAAC,CAAC;QACrBK,kBAAkB,EAAE;UAClB,CAACY,aAAa,CAACtS,KAAK,CAACO,EAAE,GAAG0C,MAAM,CAACvD;QACnC;MACF,CAAC;IACH;IAEA,IAAI6S,gBAAgB,CAACtP,MAAM,CAAC,EAAE;MAC5B,MAAM,IAAI7E,KAAK,CAAC,qCAAqC,CAAC;IACxD;IAEA,OAAO;MACLiT,iBAAiB,EAAE;QACjB,CAACQ,WAAW,CAAC7R,KAAK,CAACO,EAAE,GAAG0C,MAAM,CAACoF;MACjC;IACF,CAAC;EACH,CAAC,CAAC;EACF;;EAGA,eAAeuJ,aAAaA,CAACT,OAAO,EAAE/V,QAAQ,EAAEiG,OAAO,EAAEwP,kBAAkB,EAAEP,UAAU,EAAE/T,OAAO,EAAE8U,iBAAiB,EAAEZ,YAAY,EAAE;IACjI;IACA,IAAIM,iBAAiB,GAAGF,kBAAkB;IAE1C,IAAI,CAACE,iBAAiB,EAAE;MACtB,IAAIjD,UAAU,GAAG/U,QAAQ,CAAC;QACxByB,KAAK,EAAE,SAAS;QAChBY,QAAQ;QACRgR,UAAU,EAAE3R,SAAS;QACrB4R,UAAU,EAAE5R,SAAS;QACrB6R,WAAW,EAAE7R,SAAS;QACtB8R,QAAQ,EAAE9R;MACZ,CAAC,EAAE6V,UAAU,CAAC;MAEdS,iBAAiB,GAAGjD,UAAU;IAChC,CAAC,CAAC;IACF;;IAGA,IAAI0E,gBAAgB,GAAGlC,UAAU,GAAGA,UAAU,GAAGS,iBAAiB,CAAC3E,UAAU,IAAI2E,iBAAiB,CAAC1E,UAAU,IAAI0E,iBAAiB,CAACxE,QAAQ,IAAIwE,iBAAiB,CAACzE,WAAW,GAAG;MAC7KF,UAAU,EAAE2E,iBAAiB,CAAC3E,UAAU;MACxCC,UAAU,EAAE0E,iBAAiB,CAAC1E,UAAU;MACxCE,QAAQ,EAAEwE,iBAAiB,CAACxE,QAAQ;MACpCD,WAAW,EAAEyE,iBAAiB,CAACzE;IACjC,CAAC,GAAG7R,SAAS;IACb,IAAI,CAACgY,aAAa,EAAEC,oBAAoB,CAAC,GAAGC,gBAAgB,CAACnY,KAAK,EAAE6G,OAAO,EAAEmR,gBAAgB,EAAEpX,QAAQ,EAAEuT,sBAAsB,EAAEC,uBAAuB,EAAEC,qBAAqB,EAAEwC,iBAAiB,EAAEZ,YAAY,EAAEtB,gBAAgB,CAAC,CAAC,CAAC;IACrO;IACA;;IAEA8B,qBAAqB,CAACgB,OAAO,IAAI,EAAE5Q,OAAO,IAAIA,OAAO,CAAC2C,IAAI,CAAC0J,CAAC,IAAIA,CAAC,CAAC1N,KAAK,CAACO,EAAE,KAAK0R,OAAO,CAAC,CAAC,IAAIQ,aAAa,IAAIA,aAAa,CAACzO,IAAI,CAAC0J,CAAC,IAAIA,CAAC,CAAC1N,KAAK,CAACO,EAAE,KAAK0R,OAAO,CAAC,CAAC,CAAC,CAAC;;IAE/J,IAAIQ,aAAa,CAACpZ,MAAM,KAAK,CAAC,IAAIqZ,oBAAoB,CAACrZ,MAAM,KAAK,CAAC,EAAE;MACnEuW,kBAAkB,CAACxU,QAAQ,EAAErC,QAAQ,CAAC;QACpCsI,OAAO;QACP6M,UAAU,EAAE,CAAC,CAAC;QACd;QACAE,MAAM,EAAEqC,YAAY,IAAI;MAC1B,CAAC,EAAEY,iBAAiB,GAAG;QACrBlD,UAAU,EAAEkD;MACd,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACR,OAAO;QACLI,cAAc,EAAE;MAClB,CAAC;IACH,CAAC,CAAC;IACF;IACA;IACA;;IAGA,IAAI,CAAC/C,2BAA2B,EAAE;MAChCgE,oBAAoB,CAACtQ,OAAO,CAAC6I,KAAK,IAAI;QACpC,IAAI,CAAC1R,GAAG,CAAC,GAAG0R,KAAK;QACjB,IAAI2H,OAAO,GAAGpY,KAAK,CAAC6T,QAAQ,CAACjE,GAAG,CAAC7Q,GAAG,CAAC;QACrC,IAAIsZ,mBAAmB,GAAG;UACxBrY,KAAK,EAAE,SAAS;UAChB6N,IAAI,EAAEuK,OAAO,IAAIA,OAAO,CAACvK,IAAI;UAC7B+D,UAAU,EAAE3R,SAAS;UACrB4R,UAAU,EAAE5R,SAAS;UACrB6R,WAAW,EAAE7R,SAAS;UACtB8R,QAAQ,EAAE9R,SAAS;UACnB,2BAA2B,EAAE;QAC/B,CAAC;QACDD,KAAK,CAAC6T,QAAQ,CAAC1F,GAAG,CAACpP,GAAG,EAAEsZ,mBAAmB,CAAC;MAC9C,CAAC,CAAC;MACF,IAAI1E,UAAU,GAAGkD,iBAAiB,IAAI7W,KAAK,CAAC2T,UAAU;MACtDuB,WAAW,CAAC3W,QAAQ,CAAC;QACnB+U,UAAU,EAAEiD;MACd,CAAC,EAAE5C,UAAU,GAAGxV,MAAM,CAACsX,IAAI,CAAC9B,UAAU,CAAC,CAAC9U,MAAM,KAAK,CAAC,GAAG;QACrD8U,UAAU,EAAE;MACd,CAAC,GAAG;QACFA;MACF,CAAC,GAAG,CAAC,CAAC,EAAEuE,oBAAoB,CAACrZ,MAAM,GAAG,CAAC,GAAG;QACxCgV,QAAQ,EAAE,IAAIC,GAAG,CAAC9T,KAAK,CAAC6T,QAAQ;MAClC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACV;IAEAW,uBAAuB,GAAG,EAAED,kBAAkB;IAC9C2D,oBAAoB,CAACtQ,OAAO,CAAC0Q,KAAK,IAAI;MACpC,IAAI,CAACvZ,GAAG,CAAC,GAAGuZ,KAAK;MACjB,OAAOhE,gBAAgB,CAACnG,GAAG,CAACpP,GAAG,EAAEkV,2BAA2B,CAAC;IAC/D,CAAC,CAAC;IACF,IAAI;MACFsE,OAAO;MACPC,aAAa;MACbC;IACF,CAAC,GAAG,MAAMC,8BAA8B,CAAC1Y,KAAK,CAAC6G,OAAO,EAAEA,OAAO,EAAEoR,aAAa,EAAEC,oBAAoB,EAAEvB,OAAO,CAAC;IAE9G,IAAIA,OAAO,CAACvH,MAAM,CAACS,OAAO,EAAE;MAC1B,OAAO;QACLoH,cAAc,EAAE;MAClB,CAAC;IACH,CAAC,CAAC;IACF;IACA;;IAGAiB,oBAAoB,CAACtQ,OAAO,CAAC+Q,KAAK,IAAI;MACpC,IAAI,CAAC5Z,GAAG,CAAC,GAAG4Z,KAAK;MACjB,OAAOrE,gBAAgB,CAACxE,MAAM,CAAC/Q,GAAG,CAAC;IACrC,CAAC,CAAC,CAAC,CAAC;;IAEJ,IAAIiS,QAAQ,GAAG4H,YAAY,CAACL,OAAO,CAAC;IAEpC,IAAIvH,QAAQ,EAAE;MACZ,MAAM4G,uBAAuB,CAAC5X,KAAK,EAAEgR,QAAQ,EAAE;QAC7CjP;MACF,CAAC,CAAC;MACF,OAAO;QACLkV,cAAc,EAAE;MAClB,CAAC;IACH,CAAC,CAAC;;IAGF,IAAI;MACFvD,UAAU;MACVE;IACF,CAAC,GAAGiF,iBAAiB,CAAC7Y,KAAK,EAAE6G,OAAO,EAAEoR,aAAa,EAAEO,aAAa,EAAEvC,YAAY,EAAEiC,oBAAoB,EAAEO,cAAc,EAAE7D,eAAe,CAAC,CAAC,CAAC;;IAE1IA,eAAe,CAAChN,OAAO,CAAC,CAACkR,YAAY,EAAErB,OAAO,KAAK;MACjDqB,YAAY,CAAC9I,SAAS,CAACH,OAAO,IAAI;QAChC;QACA;QACA;QACA,IAAIA,OAAO,IAAIiJ,YAAY,CAAC/I,IAAI,EAAE;UAChC6E,eAAe,CAAC9E,MAAM,CAAC2H,OAAO,CAAC;QACjC;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IACFsB,sBAAsB,CAAC,CAAC;IACxB,IAAIC,kBAAkB,GAAGC,oBAAoB,CAACzE,uBAAuB,CAAC;IACtE,OAAOjW,QAAQ,CAAC;MACdmV,UAAU;MACVE;IACF,CAAC,EAAEoF,kBAAkB,IAAId,oBAAoB,CAACrZ,MAAM,GAAG,CAAC,GAAG;MACzDgV,QAAQ,EAAE,IAAIC,GAAG,CAAC9T,KAAK,CAAC6T,QAAQ;IAClC,CAAC,GAAG,CAAC,CAAC,CAAC;EACT;EAEA,SAASqF,UAAUA,CAACna,GAAG,EAAE;IACvB,OAAOiB,KAAK,CAAC6T,QAAQ,CAACjE,GAAG,CAAC7Q,GAAG,CAAC,IAAIiT,YAAY;EAChD,CAAC,CAAC;;EAGF,SAASmH,KAAKA,CAACpa,GAAG,EAAE0Y,OAAO,EAAEtU,IAAI,EAAE0S,IAAI,EAAE;IACvC,IAAI1D,QAAQ,EAAE;MACZ,MAAM,IAAIvO,KAAK,CAAC,2EAA2E,GAAG,8EAA8E,GAAG,6CAA6C,CAAC;IAC/N;IAEA,IAAI0Q,gBAAgB,CAACpO,GAAG,CAACnH,GAAG,CAAC,EAAEqa,YAAY,CAACra,GAAG,CAAC;IAChD,IAAI8H,OAAO,GAAGP,WAAW,CAAC+L,UAAU,EAAElP,IAAI,EAAE2K,IAAI,CAACtH,QAAQ,CAAC;IAE1D,IAAI,CAACK,OAAO,EAAE;MACZwS,eAAe,CAACta,GAAG,EAAE0Y,OAAO,EAAE1E,sBAAsB,CAAC,GAAG,EAAE;QACxDjS,QAAQ,EAAEqC;MACZ,CAAC,CAAC,CAAC;MACH;IACF;IAEA,IAAI;MACF5B,IAAI;MACJuU;IACF,CAAC,GAAGC,wBAAwB,CAAC5S,IAAI,EAAE0S,IAAI,EAAE,IAAI,CAAC;IAC9C,IAAIzL,KAAK,GAAGkN,cAAc,CAACzQ,OAAO,EAAEtF,IAAI,CAAC;IAEzC,IAAIuU,UAAU,IAAIP,gBAAgB,CAACO,UAAU,CAAClE,UAAU,CAAC,EAAE;MACzD0H,mBAAmB,CAACva,GAAG,EAAE0Y,OAAO,EAAElW,IAAI,EAAE6I,KAAK,EAAEvD,OAAO,EAAEiP,UAAU,CAAC;MACnE;IACF,CAAC,CAAC;IACF;;IAGAnB,gBAAgB,CAACxG,GAAG,CAACpP,GAAG,EAAE,CAACwC,IAAI,EAAE6I,KAAK,EAAEvD,OAAO,CAAC,CAAC;IACjD0S,mBAAmB,CAACxa,GAAG,EAAE0Y,OAAO,EAAElW,IAAI,EAAE6I,KAAK,EAAEvD,OAAO,EAAEiP,UAAU,CAAC;EACrE,CAAC,CAAC;EACF;;EAGA,eAAewD,mBAAmBA,CAACva,GAAG,EAAE0Y,OAAO,EAAElW,IAAI,EAAE6I,KAAK,EAAEoP,cAAc,EAAE1D,UAAU,EAAE;IACxFK,oBAAoB,CAAC,CAAC;IACtBxB,gBAAgB,CAAC7E,MAAM,CAAC/Q,GAAG,CAAC;IAE5B,IAAI,CAACqL,KAAK,CAAC5E,KAAK,CAACrF,MAAM,EAAE;MACvB,IAAI+E,KAAK,GAAG6N,sBAAsB,CAAC,GAAG,EAAE;QACtCyE,MAAM,EAAE1B,UAAU,CAAClE,UAAU;QAC7B9Q,QAAQ,EAAES,IAAI;QACdkW,OAAO,EAAEA;MACX,CAAC,CAAC;MACF4B,eAAe,CAACta,GAAG,EAAE0Y,OAAO,EAAEvS,KAAK,CAAC;MACpC;IACF,CAAC,CAAC;;IAGF,IAAIuU,eAAe,GAAGzZ,KAAK,CAAC6T,QAAQ,CAACjE,GAAG,CAAC7Q,GAAG,CAAC;IAE7C,IAAIqZ,OAAO,GAAG7Z,QAAQ,CAAC;MACrByB,KAAK,EAAE;IACT,CAAC,EAAE8V,UAAU,EAAE;MACbjI,IAAI,EAAE4L,eAAe,IAAIA,eAAe,CAAC5L,IAAI;MAC7C,2BAA2B,EAAE;IAC/B,CAAC,CAAC;IAEF7N,KAAK,CAAC6T,QAAQ,CAAC1F,GAAG,CAACpP,GAAG,EAAEqZ,OAAO,CAAC;IAChClD,WAAW,CAAC;MACVrB,QAAQ,EAAE,IAAIC,GAAG,CAAC9T,KAAK,CAAC6T,QAAQ;IAClC,CAAC,CAAC,CAAC,CAAC;;IAEJ,IAAI6F,eAAe,GAAG,IAAIzK,eAAe,CAAC,CAAC;IAC3C,IAAI0K,YAAY,GAAG/C,uBAAuB,CAACrV,IAAI,EAAEmY,eAAe,CAACtK,MAAM,EAAE0G,UAAU,CAAC;IACpFxB,gBAAgB,CAACnG,GAAG,CAACpP,GAAG,EAAE2a,eAAe,CAAC;IAC1C,IAAIE,YAAY,GAAG,MAAMlC,kBAAkB,CAAC,QAAQ,EAAEiC,YAAY,EAAEvP,KAAK,EAAEoP,cAAc,EAAEpG,MAAM,CAAC5M,QAAQ,CAAC;IAE3G,IAAImT,YAAY,CAACvK,MAAM,CAACS,OAAO,EAAE;MAC/B;MACA;MACA,IAAIyE,gBAAgB,CAAC1E,GAAG,CAAC7Q,GAAG,CAAC,KAAK2a,eAAe,EAAE;QACjDpF,gBAAgB,CAACxE,MAAM,CAAC/Q,GAAG,CAAC;MAC9B;MAEA;IACF;IAEA,IAAI4Y,gBAAgB,CAACiC,YAAY,CAAC,EAAE;MAClCtF,gBAAgB,CAACxE,MAAM,CAAC/Q,GAAG,CAAC;MAC5B2V,gBAAgB,CAACvO,GAAG,CAACpH,GAAG,CAAC;MAEzB,IAAI8a,cAAc,GAAGtb,QAAQ,CAAC;QAC5ByB,KAAK,EAAE;MACT,CAAC,EAAE8V,UAAU,EAAE;QACbjI,IAAI,EAAE5N,SAAS;QACf,2BAA2B,EAAE;MAC/B,CAAC,CAAC;MAEFD,KAAK,CAAC6T,QAAQ,CAAC1F,GAAG,CAACpP,GAAG,EAAE8a,cAAc,CAAC;MACvC3E,WAAW,CAAC;QACVrB,QAAQ,EAAE,IAAIC,GAAG,CAAC9T,KAAK,CAAC6T,QAAQ;MAClC,CAAC,CAAC;MACF,OAAO+D,uBAAuB,CAAC5X,KAAK,EAAE4Z,YAAY,EAAE;QAClDE,qBAAqB,EAAE;MACzB,CAAC,CAAC;IACJ,CAAC,CAAC;;IAGF,IAAIjC,aAAa,CAAC+B,YAAY,CAAC,EAAE;MAC/BP,eAAe,CAACta,GAAG,EAAE0Y,OAAO,EAAEmC,YAAY,CAAC1U,KAAK,CAAC;MACjD;IACF;IAEA,IAAI6S,gBAAgB,CAAC6B,YAAY,CAAC,EAAE;MAClClW,SAAS,CAAC,KAAK,EAAE,qCAAqC,CAAC;IACzD,CAAC,CAAC;IACF;;IAGA,IAAI7B,YAAY,GAAG7B,KAAK,CAACsT,UAAU,CAAC1S,QAAQ,IAAIZ,KAAK,CAACY,QAAQ;IAC9D,IAAImZ,mBAAmB,GAAGnD,uBAAuB,CAAC/U,YAAY,EAAE6X,eAAe,CAACtK,MAAM,CAAC;IACvF,IAAIvI,OAAO,GAAG7G,KAAK,CAACsT,UAAU,CAACtT,KAAK,KAAK,MAAM,GAAGsG,WAAW,CAAC+L,UAAU,EAAErS,KAAK,CAACsT,UAAU,CAAC1S,QAAQ,EAAEkN,IAAI,CAACtH,QAAQ,CAAC,GAAGxG,KAAK,CAAC6G,OAAO;IACnInD,SAAS,CAACmD,OAAO,EAAE,8CAA8C,CAAC;IAClE,IAAImT,MAAM,GAAG,EAAEzF,kBAAkB;IACjCE,cAAc,CAACtG,GAAG,CAACpP,GAAG,EAAEib,MAAM,CAAC;IAE/B,IAAIC,WAAW,GAAG1b,QAAQ,CAAC;MACzByB,KAAK,EAAE,SAAS;MAChB6N,IAAI,EAAE+L,YAAY,CAAC/L;IACrB,CAAC,EAAEiI,UAAU,EAAE;MACb,2BAA2B,EAAE;IAC/B,CAAC,CAAC;IAEF9V,KAAK,CAAC6T,QAAQ,CAAC1F,GAAG,CAACpP,GAAG,EAAEkb,WAAW,CAAC;IACpC,IAAI,CAAChC,aAAa,EAAEC,oBAAoB,CAAC,GAAGC,gBAAgB,CAACnY,KAAK,EAAE6G,OAAO,EAAEiP,UAAU,EAAEjU,YAAY,EAAEsS,sBAAsB,EAAEC,uBAAuB,EAAEC,qBAAqB,EAAE;MAC7K,CAACjK,KAAK,CAAC5E,KAAK,CAACO,EAAE,GAAG6T,YAAY,CAAC/L;IACjC,CAAC,EAAE5N,SAAS;IAAE;IACd0U,gBAAgB,CAAC,CAAC,CAAC;IACnB;IACA;;IAEAuD,oBAAoB,CAACzO,MAAM,CAACyQ,KAAK,IAAI;MACnC,IAAI,CAACC,QAAQ,CAAC,GAAGD,KAAK;MACtB,OAAOC,QAAQ,KAAKpb,GAAG;IACzB,CAAC,CAAC,CAAC6I,OAAO,CAACwS,KAAK,IAAI;MAClB,IAAI,CAACD,QAAQ,CAAC,GAAGC,KAAK;MACtB,IAAIX,eAAe,GAAGzZ,KAAK,CAAC6T,QAAQ,CAACjE,GAAG,CAACuK,QAAQ,CAAC;MAClD,IAAI9B,mBAAmB,GAAG;QACxBrY,KAAK,EAAE,SAAS;QAChB6N,IAAI,EAAE4L,eAAe,IAAIA,eAAe,CAAC5L,IAAI;QAC7C+D,UAAU,EAAE3R,SAAS;QACrB4R,UAAU,EAAE5R,SAAS;QACrB6R,WAAW,EAAE7R,SAAS;QACtB8R,QAAQ,EAAE9R,SAAS;QACnB,2BAA2B,EAAE;MAC/B,CAAC;MACDD,KAAK,CAAC6T,QAAQ,CAAC1F,GAAG,CAACgM,QAAQ,EAAE9B,mBAAmB,CAAC;MACjD/D,gBAAgB,CAACnG,GAAG,CAACgM,QAAQ,EAAET,eAAe,CAAC;IACjD,CAAC,CAAC;IACFxE,WAAW,CAAC;MACVrB,QAAQ,EAAE,IAAIC,GAAG,CAAC9T,KAAK,CAAC6T,QAAQ;IAClC,CAAC,CAAC;IACF,IAAI;MACF0E,OAAO;MACPC,aAAa;MACbC;IACF,CAAC,GAAG,MAAMC,8BAA8B,CAAC1Y,KAAK,CAAC6G,OAAO,EAAEA,OAAO,EAAEoR,aAAa,EAAEC,oBAAoB,EAAE6B,mBAAmB,CAAC;IAE1H,IAAIL,eAAe,CAACtK,MAAM,CAACS,OAAO,EAAE;MAClC;IACF;IAEA4E,cAAc,CAAC3E,MAAM,CAAC/Q,GAAG,CAAC;IAC1BuV,gBAAgB,CAACxE,MAAM,CAAC/Q,GAAG,CAAC;IAC5BmZ,oBAAoB,CAACtQ,OAAO,CAACyS,KAAK,IAAI;MACpC,IAAI,CAACF,QAAQ,CAAC,GAAGE,KAAK;MACtB,OAAO/F,gBAAgB,CAACxE,MAAM,CAACqK,QAAQ,CAAC;IAC1C,CAAC,CAAC;IACF,IAAInJ,QAAQ,GAAG4H,YAAY,CAACL,OAAO,CAAC;IAEpC,IAAIvH,QAAQ,EAAE;MACZ,OAAO4G,uBAAuB,CAAC5X,KAAK,EAAEgR,QAAQ,CAAC;IACjD,CAAC,CAAC;;IAGF,IAAI;MACF0C,UAAU;MACVE;IACF,CAAC,GAAGiF,iBAAiB,CAAC7Y,KAAK,EAAEA,KAAK,CAAC6G,OAAO,EAAEoR,aAAa,EAAEO,aAAa,EAAEvY,SAAS,EAAEiY,oBAAoB,EAAEO,cAAc,EAAE7D,eAAe,CAAC;IAC3I,IAAI0F,WAAW,GAAG;MAChBta,KAAK,EAAE,MAAM;MACb6N,IAAI,EAAE+L,YAAY,CAAC/L,IAAI;MACvB+D,UAAU,EAAE3R,SAAS;MACrB4R,UAAU,EAAE5R,SAAS;MACrB6R,WAAW,EAAE7R,SAAS;MACtB8R,QAAQ,EAAE9R,SAAS;MACnB,2BAA2B,EAAE;IAC/B,CAAC;IACDD,KAAK,CAAC6T,QAAQ,CAAC1F,GAAG,CAACpP,GAAG,EAAEub,WAAW,CAAC;IACpC,IAAItB,kBAAkB,GAAGC,oBAAoB,CAACe,MAAM,CAAC,CAAC,CAAC;IACvD;IACA;;IAEA,IAAIha,KAAK,CAACsT,UAAU,CAACtT,KAAK,KAAK,SAAS,IAAIga,MAAM,GAAGxF,uBAAuB,EAAE;MAC5E9Q,SAAS,CAACqQ,aAAa,EAAE,yBAAyB,CAAC;MACnDE,2BAA2B,IAAIA,2BAA2B,CAAC/D,KAAK,CAAC,CAAC;MAClEkF,kBAAkB,CAACpV,KAAK,CAACsT,UAAU,CAAC1S,QAAQ,EAAE;QAC5CiG,OAAO;QACP6M,UAAU;QACVE,MAAM;QACNC,QAAQ,EAAE,IAAIC,GAAG,CAAC9T,KAAK,CAAC6T,QAAQ;MAClC,CAAC,CAAC;IACJ,CAAC,MAAM;MACL;MACA;MACA;MACAqB,WAAW,CAAC3W,QAAQ,CAAC;QACnBqV,MAAM;QACNF,UAAU,EAAEgC,eAAe,CAAC1V,KAAK,CAAC0T,UAAU,EAAEA,UAAU,EAAE7M,OAAO,EAAE+M,MAAM;MAC3E,CAAC,EAAEoF,kBAAkB,GAAG;QACtBnF,QAAQ,EAAE,IAAIC,GAAG,CAAC9T,KAAK,CAAC6T,QAAQ;MAClC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACRM,sBAAsB,GAAG,KAAK;IAChC;EACF,CAAC,CAAC;;EAGF,eAAeoF,mBAAmBA,CAACxa,GAAG,EAAE0Y,OAAO,EAAElW,IAAI,EAAE6I,KAAK,EAAEvD,OAAO,EAAEiP,UAAU,EAAE;IACjF,IAAI2D,eAAe,GAAGzZ,KAAK,CAAC6T,QAAQ,CAACjE,GAAG,CAAC7Q,GAAG,CAAC,CAAC,CAAC;;IAE/C,IAAI8a,cAAc,GAAGtb,QAAQ,CAAC;MAC5ByB,KAAK,EAAE,SAAS;MAChB4R,UAAU,EAAE3R,SAAS;MACrB4R,UAAU,EAAE5R,SAAS;MACrB6R,WAAW,EAAE7R,SAAS;MACtB8R,QAAQ,EAAE9R;IACZ,CAAC,EAAE6V,UAAU,EAAE;MACbjI,IAAI,EAAE4L,eAAe,IAAIA,eAAe,CAAC5L,IAAI;MAC7C,2BAA2B,EAAE;IAC/B,CAAC,CAAC;IAEF7N,KAAK,CAAC6T,QAAQ,CAAC1F,GAAG,CAACpP,GAAG,EAAE8a,cAAc,CAAC;IACvC3E,WAAW,CAAC;MACVrB,QAAQ,EAAE,IAAIC,GAAG,CAAC9T,KAAK,CAAC6T,QAAQ;IAClC,CAAC,CAAC,CAAC,CAAC;;IAEJ,IAAI6F,eAAe,GAAG,IAAIzK,eAAe,CAAC,CAAC;IAC3C,IAAI0K,YAAY,GAAG/C,uBAAuB,CAACrV,IAAI,EAAEmY,eAAe,CAACtK,MAAM,CAAC;IACxEkF,gBAAgB,CAACnG,GAAG,CAACpP,GAAG,EAAE2a,eAAe,CAAC;IAC1C,IAAIjR,MAAM,GAAG,MAAMiP,kBAAkB,CAAC,QAAQ,EAAEiC,YAAY,EAAEvP,KAAK,EAAEvD,OAAO,EAAEuM,MAAM,CAAC5M,QAAQ,CAAC,CAAC,CAAC;IAChG;IACA;IACA;;IAEA,IAAIuR,gBAAgB,CAACtP,MAAM,CAAC,EAAE;MAC5BA,MAAM,GAAG,CAAC,MAAM8R,mBAAmB,CAAC9R,MAAM,EAAEkR,YAAY,CAACvK,MAAM,EAAE,IAAI,CAAC,KAAK3G,MAAM;IACnF,CAAC,CAAC;IACF;;IAGA,IAAI6L,gBAAgB,CAAC1E,GAAG,CAAC7Q,GAAG,CAAC,KAAK2a,eAAe,EAAE;MACjDpF,gBAAgB,CAACxE,MAAM,CAAC/Q,GAAG,CAAC;IAC9B;IAEA,IAAI4a,YAAY,CAACvK,MAAM,CAACS,OAAO,EAAE;MAC/B;IACF,CAAC,CAAC;;IAGF,IAAI8H,gBAAgB,CAAClP,MAAM,CAAC,EAAE;MAC5B,MAAMmP,uBAAuB,CAAC5X,KAAK,EAAEyI,MAAM,CAAC;MAC5C;IACF,CAAC,CAAC;;IAGF,IAAIoP,aAAa,CAACpP,MAAM,CAAC,EAAE;MACzB,IAAIqP,aAAa,GAAGhB,mBAAmB,CAAC9W,KAAK,CAAC6G,OAAO,EAAE4Q,OAAO,CAAC;MAC/DzX,KAAK,CAAC6T,QAAQ,CAAC/D,MAAM,CAAC/Q,GAAG,CAAC,CAAC,CAAC;MAC5B;MACA;;MAEAmW,WAAW,CAAC;QACVrB,QAAQ,EAAE,IAAIC,GAAG,CAAC9T,KAAK,CAAC6T,QAAQ,CAAC;QACjCD,MAAM,EAAE;UACN,CAACkE,aAAa,CAACtS,KAAK,CAACO,EAAE,GAAG0C,MAAM,CAACvD;QACnC;MACF,CAAC,CAAC;MACF;IACF;IAEAxB,SAAS,CAAC,CAACqU,gBAAgB,CAACtP,MAAM,CAAC,EAAE,iCAAiC,CAAC,CAAC,CAAC;;IAEzE,IAAI6R,WAAW,GAAG;MAChBta,KAAK,EAAE,MAAM;MACb6N,IAAI,EAAEpF,MAAM,CAACoF,IAAI;MACjB+D,UAAU,EAAE3R,SAAS;MACrB4R,UAAU,EAAE5R,SAAS;MACrB6R,WAAW,EAAE7R,SAAS;MACtB8R,QAAQ,EAAE9R,SAAS;MACnB,2BAA2B,EAAE;IAC/B,CAAC;IACDD,KAAK,CAAC6T,QAAQ,CAAC1F,GAAG,CAACpP,GAAG,EAAEub,WAAW,CAAC;IACpCpF,WAAW,CAAC;MACVrB,QAAQ,EAAE,IAAIC,GAAG,CAAC9T,KAAK,CAAC6T,QAAQ;IAClC,CAAC,CAAC;EACJ;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGE,eAAe+D,uBAAuBA,CAAC5X,KAAK,EAAEgR,QAAQ,EAAEwJ,KAAK,EAAE;IAC7D,IAAIC,OAAO;IAEX,IAAI;MACF3E,UAAU;MACV/T,OAAO;MACP+X;IACF,CAAC,GAAGU,KAAK,KAAK,KAAK,CAAC,GAAG,CAAC,CAAC,GAAGA,KAAK;IAEjC,IAAIxJ,QAAQ,CAACkF,UAAU,EAAE;MACvB/B,sBAAsB,GAAG,IAAI;IAC/B;IAEA,IAAIuG,gBAAgB,GAAG7Z,cAAc,CAACb,KAAK,CAACY,QAAQ,EAAEoQ,QAAQ,CAACpQ,QAAQ;IAAE;IACzErC,QAAQ,CAAC;MACPiX,WAAW,EAAE;IACf,CAAC,EAAEsE,qBAAqB,GAAG;MACzBa,sBAAsB,EAAE;IAC1B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACRjX,SAAS,CAACgX,gBAAgB,EAAE,gDAAgD,CAAC,CAAC,CAAC;;IAE/E,IAAI,QAAQ,CAACD,OAAO,GAAGlY,MAAM,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGkY,OAAO,CAAC7Z,QAAQ,CAAC,KAAK,WAAW,EAAE;MACnF,IAAIga,SAAS,GAAGnW,mBAAmB,CAACuM,QAAQ,CAACpQ,QAAQ,CAAC,CAAC8D,MAAM;MAE7D,IAAInC,MAAM,CAAC3B,QAAQ,CAAC8D,MAAM,KAAKkW,SAAS,EAAE;QACxC,IAAI7Y,OAAO,EAAE;UACXQ,MAAM,CAAC3B,QAAQ,CAACmB,OAAO,CAACiP,QAAQ,CAACpQ,QAAQ,CAAC;QAC5C,CAAC,MAAM;UACL2B,MAAM,CAAC3B,QAAQ,CAACpC,MAAM,CAACwS,QAAQ,CAACpQ,QAAQ,CAAC;QAC3C;QAEA;MACF;IACF,CAAC,CAAC;IACF;;IAGAqT,2BAA2B,GAAG,IAAI;IAClC,IAAI4G,qBAAqB,GAAG9Y,OAAO,KAAK,IAAI,GAAG1D,OAAO,CAACe,MAAM,CAAC4C,OAAO,GAAG3D,OAAO,CAACe,MAAM,CAACwC,IAAI,CAAC,CAAC;IAC7F;;IAEA,IAAI;MACFgQ,UAAU;MACVC,UAAU;MACVC,WAAW;MACXC;IACF,CAAC,GAAG/R,KAAK,CAACsT,UAAU;IAEpB,IAAI,CAACwC,UAAU,IAAIlE,UAAU,IAAIC,UAAU,IAAIE,QAAQ,IAAID,WAAW,EAAE;MACtEgE,UAAU,GAAG;QACXlE,UAAU;QACVC,UAAU;QACVC,WAAW;QACXC;MACF,CAAC;IACH,CAAC,CAAC;IACF;IACA;;IAGA,IAAIL,iCAAiC,CAACxL,GAAG,CAAC8K,QAAQ,CAAChD,MAAM,CAAC,IAAI8H,UAAU,IAAIP,gBAAgB,CAACO,UAAU,CAAClE,UAAU,CAAC,EAAE;MACnH,MAAMkD,eAAe,CAAC+F,qBAAqB,EAAEH,gBAAgB,EAAE;QAC7D5E,UAAU,EAAEvX,QAAQ,CAAC,CAAC,CAAC,EAAEuX,UAAU,EAAE;UACnCjE,UAAU,EAAEb,QAAQ,CAACpQ;QACvB,CAAC;MACH,CAAC,CAAC;IACJ,CAAC,MAAM;MACL;MACA;MACA,MAAMkU,eAAe,CAAC+F,qBAAqB,EAAEH,gBAAgB,EAAE;QAC7DrE,kBAAkB,EAAE;UAClBrW,KAAK,EAAE,SAAS;UAChBY,QAAQ,EAAE8Z,gBAAgB;UAC1B9I,UAAU,EAAEkE,UAAU,GAAGA,UAAU,CAAClE,UAAU,GAAG3R,SAAS;UAC1D4R,UAAU,EAAEiE,UAAU,GAAGA,UAAU,CAACjE,UAAU,GAAG5R,SAAS;UAC1D6R,WAAW,EAAEgE,UAAU,GAAGA,UAAU,CAAChE,WAAW,GAAG7R,SAAS;UAC5D8R,QAAQ,EAAE+D,UAAU,GAAGA,UAAU,CAAC/D,QAAQ,GAAG9R;QAC/C;MACF,CAAC,CAAC;IACJ;EACF;EAEA,eAAeyY,8BAA8BA,CAACoC,cAAc,EAAEjU,OAAO,EAAEoR,aAAa,EAAE8C,cAAc,EAAEpE,OAAO,EAAE;IAC7G;IACA;IACA;IACA,IAAI4B,OAAO,GAAG,MAAMzJ,OAAO,CAACkM,GAAG,CAAC,CAAC,GAAG/C,aAAa,CAACrY,GAAG,CAACwK,KAAK,IAAIsN,kBAAkB,CAAC,QAAQ,EAAEf,OAAO,EAAEvM,KAAK,EAAEvD,OAAO,EAAEuM,MAAM,CAAC5M,QAAQ,CAAC,CAAC,EAAE,GAAGuU,cAAc,CAACnb,GAAG,CAACqb,KAAK,IAAI;MACrK,IAAI,GAAG9X,IAAI,EAAEiH,KAAK,EAAE8Q,YAAY,CAAC,GAAGD,KAAK;MACzC,OAAOvD,kBAAkB,CAAC,QAAQ,EAAEd,uBAAuB,CAACzT,IAAI,EAAEwT,OAAO,CAACvH,MAAM,CAAC,EAAEhF,KAAK,EAAE8Q,YAAY,EAAE9H,MAAM,CAAC5M,QAAQ,CAAC;IAC1H,CAAC,CAAC,CAAC,CAAC;IACJ,IAAIgS,aAAa,GAAGD,OAAO,CAAC/U,KAAK,CAAC,CAAC,EAAEyU,aAAa,CAACpZ,MAAM,CAAC;IAC1D,IAAI4Z,cAAc,GAAGF,OAAO,CAAC/U,KAAK,CAACyU,aAAa,CAACpZ,MAAM,CAAC;IACxD,MAAMiQ,OAAO,CAACkM,GAAG,CAAC,CAACG,sBAAsB,CAACL,cAAc,EAAE7C,aAAa,EAAEO,aAAa,EAAE7B,OAAO,CAACvH,MAAM,EAAE,KAAK,EAAEpP,KAAK,CAAC0T,UAAU,CAAC,EAAEyH,sBAAsB,CAACL,cAAc,EAAEC,cAAc,CAACnb,GAAG,CAACwb,KAAK,IAAI;MACnM,IAAI,IAAIhR,KAAK,CAAC,GAAGgR,KAAK;MACtB,OAAOhR,KAAK;IACd,CAAC,CAAC,EAAEqO,cAAc,EAAE9B,OAAO,CAACvH,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC;IAC3C,OAAO;MACLmJ,OAAO;MACPC,aAAa;MACbC;IACF,CAAC;EACH;EAEA,SAAStC,oBAAoBA,CAAA,EAAG;IAC9B;IACAhC,sBAAsB,GAAG,IAAI,CAAC,CAAC;IAC/B;;IAEAC,uBAAuB,CAACzS,IAAI,CAAC,GAAG8U,qBAAqB,CAAC,CAAC,CAAC,CAAC,CAAC;;IAE1D9B,gBAAgB,CAAC/M,OAAO,CAAC,CAACgD,CAAC,EAAE7L,GAAG,KAAK;MACnC,IAAIuV,gBAAgB,CAACpO,GAAG,CAACnH,GAAG,CAAC,EAAE;QAC7BsV,qBAAqB,CAAC1S,IAAI,CAAC5C,GAAG,CAAC;QAC/Bqa,YAAY,CAACra,GAAG,CAAC;MACnB;IACF,CAAC,CAAC;EACJ;EAEA,SAASsa,eAAeA,CAACta,GAAG,EAAE0Y,OAAO,EAAEvS,KAAK,EAAE;IAC5C,IAAI4S,aAAa,GAAGhB,mBAAmB,CAAC9W,KAAK,CAAC6G,OAAO,EAAE4Q,OAAO,CAAC;IAC/DxC,aAAa,CAAClW,GAAG,CAAC;IAClBmW,WAAW,CAAC;MACVtB,MAAM,EAAE;QACN,CAACkE,aAAa,CAACtS,KAAK,CAACO,EAAE,GAAGb;MAC5B,CAAC;MACD2O,QAAQ,EAAE,IAAIC,GAAG,CAAC9T,KAAK,CAAC6T,QAAQ;IAClC,CAAC,CAAC;EACJ;EAEA,SAASoB,aAAaA,CAAClW,GAAG,EAAE;IAC1B,IAAIuV,gBAAgB,CAACpO,GAAG,CAACnH,GAAG,CAAC,EAAEqa,YAAY,CAACra,GAAG,CAAC;IAChD4V,gBAAgB,CAAC7E,MAAM,CAAC/Q,GAAG,CAAC;IAC5B0V,cAAc,CAAC3E,MAAM,CAAC/Q,GAAG,CAAC;IAC1B2V,gBAAgB,CAAC5E,MAAM,CAAC/Q,GAAG,CAAC;IAC5BiB,KAAK,CAAC6T,QAAQ,CAAC/D,MAAM,CAAC/Q,GAAG,CAAC;EAC5B;EAEA,SAASqa,YAAYA,CAACra,GAAG,EAAE;IACzB,IAAIiQ,UAAU,GAAGsF,gBAAgB,CAAC1E,GAAG,CAAC7Q,GAAG,CAAC;IAC1C2E,SAAS,CAACsL,UAAU,EAAE,6BAA6B,GAAGjQ,GAAG,CAAC;IAC1DiQ,UAAU,CAACkB,KAAK,CAAC,CAAC;IAClBoE,gBAAgB,CAACxE,MAAM,CAAC/Q,GAAG,CAAC;EAC9B;EAEA,SAASsc,gBAAgBA,CAAC5F,IAAI,EAAE;IAC9B,KAAK,IAAI1W,GAAG,IAAI0W,IAAI,EAAE;MACpB,IAAI2C,OAAO,GAAGc,UAAU,CAACna,GAAG,CAAC;MAC7B,IAAIub,WAAW,GAAG;QAChBta,KAAK,EAAE,MAAM;QACb6N,IAAI,EAAEuK,OAAO,CAACvK,IAAI;QAClB+D,UAAU,EAAE3R,SAAS;QACrB4R,UAAU,EAAE5R,SAAS;QACrB6R,WAAW,EAAE7R,SAAS;QACtB8R,QAAQ,EAAE9R,SAAS;QACnB,2BAA2B,EAAE;MAC/B,CAAC;MACDD,KAAK,CAAC6T,QAAQ,CAAC1F,GAAG,CAACpP,GAAG,EAAEub,WAAW,CAAC;IACtC;EACF;EAEA,SAASvB,sBAAsBA,CAAA,EAAG;IAChC,IAAIuC,QAAQ,GAAG,EAAE;IAEjB,KAAK,IAAIvc,GAAG,IAAI2V,gBAAgB,EAAE;MAChC,IAAI0D,OAAO,GAAGpY,KAAK,CAAC6T,QAAQ,CAACjE,GAAG,CAAC7Q,GAAG,CAAC;MACrC2E,SAAS,CAAC0U,OAAO,EAAE,oBAAoB,GAAGrZ,GAAG,CAAC;MAE9C,IAAIqZ,OAAO,CAACpY,KAAK,KAAK,SAAS,EAAE;QAC/B0U,gBAAgB,CAAC5E,MAAM,CAAC/Q,GAAG,CAAC;QAC5Buc,QAAQ,CAAC3Z,IAAI,CAAC5C,GAAG,CAAC;MACpB;IACF;IAEAsc,gBAAgB,CAACC,QAAQ,CAAC;EAC5B;EAEA,SAASrC,oBAAoBA,CAACsC,QAAQ,EAAE;IACtC,IAAIC,UAAU,GAAG,EAAE;IAEnB,KAAK,IAAI,CAACzc,GAAG,EAAEgH,EAAE,CAAC,IAAI0O,cAAc,EAAE;MACpC,IAAI1O,EAAE,GAAGwV,QAAQ,EAAE;QACjB,IAAInD,OAAO,GAAGpY,KAAK,CAAC6T,QAAQ,CAACjE,GAAG,CAAC7Q,GAAG,CAAC;QACrC2E,SAAS,CAAC0U,OAAO,EAAE,oBAAoB,GAAGrZ,GAAG,CAAC;QAE9C,IAAIqZ,OAAO,CAACpY,KAAK,KAAK,SAAS,EAAE;UAC/BoZ,YAAY,CAACra,GAAG,CAAC;UACjB0V,cAAc,CAAC3E,MAAM,CAAC/Q,GAAG,CAAC;UAC1Byc,UAAU,CAAC7Z,IAAI,CAAC5C,GAAG,CAAC;QACtB;MACF;IACF;IAEAsc,gBAAgB,CAACG,UAAU,CAAC;IAC5B,OAAOA,UAAU,CAAC3c,MAAM,GAAG,CAAC;EAC9B;EAEA,SAAS4X,qBAAqBA,CAACgF,SAAS,EAAE;IACxC,IAAIC,iBAAiB,GAAG,EAAE;IAC1B9G,eAAe,CAAChN,OAAO,CAAC,CAAC+T,GAAG,EAAElE,OAAO,KAAK;MACxC,IAAI,CAACgE,SAAS,IAAIA,SAAS,CAAChE,OAAO,CAAC,EAAE;QACpC;QACA;QACA;QACAkE,GAAG,CAAC1L,MAAM,CAAC,CAAC;QACZyL,iBAAiB,CAAC/Z,IAAI,CAAC8V,OAAO,CAAC;QAC/B7C,eAAe,CAAC9E,MAAM,CAAC2H,OAAO,CAAC;MACjC;IACF,CAAC,CAAC;IACF,OAAOiE,iBAAiB;EAC1B,CAAC,CAAC;EACF;;EAGA,SAASE,uBAAuBA,CAACC,SAAS,EAAEC,WAAW,EAAEC,MAAM,EAAE;IAC/DvJ,oBAAoB,GAAGqJ,SAAS;IAChCnJ,iBAAiB,GAAGoJ,WAAW;IAE/BrJ,uBAAuB,GAAGsJ,MAAM,KAAKnb,QAAQ,IAAIA,QAAQ,CAAC7B,GAAG,CAAC,CAAC,CAAC;IAChE;IACA;;IAGA,IAAI,CAAC4T,qBAAqB,IAAI3S,KAAK,CAACsT,UAAU,KAAK3B,eAAe,EAAE;MAClEgB,qBAAqB,GAAG,IAAI;MAC5B,IAAIqJ,CAAC,GAAGrG,sBAAsB,CAAC3V,KAAK,CAACY,QAAQ,EAAEZ,KAAK,CAAC6G,OAAO,CAAC;MAE7D,IAAImV,CAAC,IAAI,IAAI,EAAE;QACb9G,WAAW,CAAC;UACV3B,qBAAqB,EAAEyI;QACzB,CAAC,CAAC;MACJ;IACF;IAEA,OAAO,MAAM;MACXxJ,oBAAoB,GAAG,IAAI;MAC3BE,iBAAiB,GAAG,IAAI;MACxBD,uBAAuB,GAAG,IAAI;IAChC,CAAC;EACH;EAEA,SAAS6D,kBAAkBA,CAAC1V,QAAQ,EAAEiG,OAAO,EAAE;IAC7C,IAAI2L,oBAAoB,IAAIC,uBAAuB,IAAIC,iBAAiB,EAAE;MACxE,IAAIuJ,WAAW,GAAGpV,OAAO,CAACjH,GAAG,CAACsT,CAAC,IAAIgJ,qBAAqB,CAAChJ,CAAC,EAAElT,KAAK,CAAC0T,UAAU,CAAC,CAAC;MAC9E,IAAI3U,GAAG,GAAG0T,uBAAuB,CAAC7R,QAAQ,EAAEqb,WAAW,CAAC,IAAIrb,QAAQ,CAAC7B,GAAG;MACxEyT,oBAAoB,CAACzT,GAAG,CAAC,GAAG2T,iBAAiB,CAAC,CAAC;IACjD;EACF;EAEA,SAASiD,sBAAsBA,CAAC/U,QAAQ,EAAEiG,OAAO,EAAE;IACjD,IAAI2L,oBAAoB,IAAIC,uBAAuB,IAAIC,iBAAiB,EAAE;MACxE,IAAIuJ,WAAW,GAAGpV,OAAO,CAACjH,GAAG,CAACsT,CAAC,IAAIgJ,qBAAqB,CAAChJ,CAAC,EAAElT,KAAK,CAAC0T,UAAU,CAAC,CAAC;MAC9E,IAAI3U,GAAG,GAAG0T,uBAAuB,CAAC7R,QAAQ,EAAEqb,WAAW,CAAC,IAAIrb,QAAQ,CAAC7B,GAAG;MACxE,IAAIid,CAAC,GAAGxJ,oBAAoB,CAACzT,GAAG,CAAC;MAEjC,IAAI,OAAOid,CAAC,KAAK,QAAQ,EAAE;QACzB,OAAOA,CAAC;MACV;IACF;IAEA,OAAO,IAAI;EACb;EAEA5I,MAAM,GAAG;IACP,IAAI5M,QAAQA,CAAA,EAAG;MACb,OAAOsH,IAAI,CAACtH,QAAQ;IACtB,CAAC;IAED,IAAIxG,KAAKA,CAAA,EAAG;MACV,OAAOA,KAAK;IACd,CAAC;IAED,IAAI0F,MAAMA,CAAA,EAAG;MACX,OAAO2M,UAAU;IACnB,CAAC;IAEDwC,UAAU;IACV7E,SAAS;IACT4L,uBAAuB;IACvBhG,QAAQ;IACRuD,KAAK;IACLjD,UAAU;IACV;IACA;IACA9U,UAAU,EAAET,EAAE,IAAImN,IAAI,CAAC3M,OAAO,CAACC,UAAU,CAACT,EAAE,CAAC;IAC7CW,cAAc,EAAEX,EAAE,IAAImN,IAAI,CAAC3M,OAAO,CAACG,cAAc,CAACX,EAAE,CAAC;IACrDuY,UAAU;IACVjE,aAAa;IACbF,OAAO;IACPoH,yBAAyB,EAAE7H,gBAAgB;IAC3C8H,wBAAwB,EAAExH;EAC5B,CAAC;EACD,OAAOxB,MAAM;AACf,CAAC,CAAC;AACF;AACA;AACA;;AAEA,SAASiJ,mBAAmBA,CAAC3W,MAAM,EAAEmQ,IAAI,EAAE;EACzCnS,SAAS,CAACgC,MAAM,CAAC7G,MAAM,GAAG,CAAC,EAAE,kEAAkE,CAAC;EAChG,IAAIwT,UAAU,GAAG5M,yBAAyB,CAACC,MAAM,CAAC;EAClD,IAAIc,QAAQ,GAAG,CAACqP,IAAI,GAAGA,IAAI,CAACrP,QAAQ,GAAG,IAAI,KAAK,GAAG;EACnD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE,eAAe8V,KAAKA,CAAC3F,OAAO,EAAE4F,MAAM,EAAE;IACpC,IAAI;MACFC;IACF,CAAC,GAAGD,MAAM,KAAK,KAAK,CAAC,GAAG,CAAC,CAAC,GAAGA,MAAM;IACnC,IAAIlZ,GAAG,GAAG,IAAIsB,GAAG,CAACgS,OAAO,CAACtT,GAAG,CAAC;IAC9B,IAAImU,MAAM,GAAGb,OAAO,CAACa,MAAM,CAAC1L,WAAW,CAAC,CAAC;IACzC,IAAIlL,QAAQ,GAAGC,cAAc,CAAC,EAAE,EAAEQ,UAAU,CAACgC,GAAG,CAAC,EAAE,IAAI,EAAE,SAAS,CAAC;IACnE,IAAIwD,OAAO,GAAGP,WAAW,CAAC+L,UAAU,EAAEzR,QAAQ,EAAE4F,QAAQ,CAAC,CAAC,CAAC;;IAE3D,IAAI,CAACiW,aAAa,CAACjF,MAAM,CAAC,IAAIA,MAAM,KAAK,MAAM,EAAE;MAC/C,IAAItS,KAAK,GAAG6N,sBAAsB,CAAC,GAAG,EAAE;QACtCyE;MACF,CAAC,CAAC;MACF,IAAI;QACF3Q,OAAO,EAAE6V,uBAAuB;QAChClX;MACF,CAAC,GAAGwN,sBAAsB,CAACX,UAAU,CAAC;MACtC,OAAO;QACL7L,QAAQ;QACR5F,QAAQ;QACRiG,OAAO,EAAE6V,uBAAuB;QAChChJ,UAAU,EAAE,CAAC,CAAC;QACdC,UAAU,EAAE,IAAI;QAChBC,MAAM,EAAE;UACN,CAACpO,KAAK,CAACO,EAAE,GAAGb;QACd,CAAC;QACDyX,UAAU,EAAEzX,KAAK,CAAC8I,MAAM;QACxB4O,aAAa,EAAE,CAAC,CAAC;QACjBC,aAAa,EAAE,CAAC;MAClB,CAAC;IACH,CAAC,MAAM,IAAI,CAAChW,OAAO,EAAE;MACnB,IAAI3B,KAAK,GAAG6N,sBAAsB,CAAC,GAAG,EAAE;QACtCjS,QAAQ,EAAEF,QAAQ,CAACE;MACrB,CAAC,CAAC;MACF,IAAI;QACF+F,OAAO,EAAE2P,eAAe;QACxBhR;MACF,CAAC,GAAGwN,sBAAsB,CAACX,UAAU,CAAC;MACtC,OAAO;QACL7L,QAAQ;QACR5F,QAAQ;QACRiG,OAAO,EAAE2P,eAAe;QACxB9C,UAAU,EAAE,CAAC,CAAC;QACdC,UAAU,EAAE,IAAI;QAChBC,MAAM,EAAE;UACN,CAACpO,KAAK,CAACO,EAAE,GAAGb;QACd,CAAC;QACDyX,UAAU,EAAEzX,KAAK,CAAC8I,MAAM;QACxB4O,aAAa,EAAE,CAAC,CAAC;QACjBC,aAAa,EAAE,CAAC;MAClB,CAAC;IACH;IAEA,IAAIpU,MAAM,GAAG,MAAMqU,SAAS,CAACnG,OAAO,EAAE/V,QAAQ,EAAEiG,OAAO,EAAE2V,cAAc,CAAC;IAExE,IAAIO,UAAU,CAACtU,MAAM,CAAC,EAAE;MACtB,OAAOA,MAAM;IACf,CAAC,CAAC;IACF;IACA;;IAGA,OAAOlK,QAAQ,CAAC;MACdqC,QAAQ;MACR4F;IACF,CAAC,EAAEiC,MAAM,CAAC;EACZ;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGE,eAAeuU,UAAUA,CAACrG,OAAO,EAAEsG,MAAM,EAAE;IACzC,IAAI;MACFxF,OAAO;MACP+E;IACF,CAAC,GAAGS,MAAM,KAAK,KAAK,CAAC,GAAG,CAAC,CAAC,GAAGA,MAAM;IACnC,IAAI5Z,GAAG,GAAG,IAAIsB,GAAG,CAACgS,OAAO,CAACtT,GAAG,CAAC;IAC9B,IAAImU,MAAM,GAAGb,OAAO,CAACa,MAAM,CAAC1L,WAAW,CAAC,CAAC;IACzC,IAAIlL,QAAQ,GAAGC,cAAc,CAAC,EAAE,EAAEQ,UAAU,CAACgC,GAAG,CAAC,EAAE,IAAI,EAAE,SAAS,CAAC;IACnE,IAAIwD,OAAO,GAAGP,WAAW,CAAC+L,UAAU,EAAEzR,QAAQ,EAAE4F,QAAQ,CAAC,CAAC,CAAC;;IAE3D,IAAI,CAACiW,aAAa,CAACjF,MAAM,CAAC,IAAIA,MAAM,KAAK,MAAM,EAAE;MAC/C,MAAMzE,sBAAsB,CAAC,GAAG,EAAE;QAChCyE;MACF,CAAC,CAAC;IACJ,CAAC,MAAM,IAAI,CAAC3Q,OAAO,EAAE;MACnB,MAAMkM,sBAAsB,CAAC,GAAG,EAAE;QAChCjS,QAAQ,EAAEF,QAAQ,CAACE;MACrB,CAAC,CAAC;IACJ;IAEA,IAAIsJ,KAAK,GAAGqN,OAAO,GAAG5Q,OAAO,CAACqW,IAAI,CAAChK,CAAC,IAAIA,CAAC,CAAC1N,KAAK,CAACO,EAAE,KAAK0R,OAAO,CAAC,GAAGH,cAAc,CAACzQ,OAAO,EAAEjG,QAAQ,CAAC;IAEnG,IAAI6W,OAAO,IAAI,CAACrN,KAAK,EAAE;MACrB,MAAM2I,sBAAsB,CAAC,GAAG,EAAE;QAChCjS,QAAQ,EAAEF,QAAQ,CAACE,QAAQ;QAC3B2W;MACF,CAAC,CAAC;IACJ,CAAC,MAAM,IAAI,CAACrN,KAAK,EAAE;MACjB;MACA,MAAM2I,sBAAsB,CAAC,GAAG,EAAE;QAChCjS,QAAQ,EAAEF,QAAQ,CAACE;MACrB,CAAC,CAAC;IACJ;IAEA,IAAI2H,MAAM,GAAG,MAAMqU,SAAS,CAACnG,OAAO,EAAE/V,QAAQ,EAAEiG,OAAO,EAAE2V,cAAc,EAAEpS,KAAK,CAAC;IAE/E,IAAI2S,UAAU,CAACtU,MAAM,CAAC,EAAE;MACtB,OAAOA,MAAM;IACf;IAEA,IAAIvD,KAAK,GAAGuD,MAAM,CAACmL,MAAM,GAAGzV,MAAM,CAACgf,MAAM,CAAC1U,MAAM,CAACmL,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG3T,SAAS;IAEvE,IAAIiF,KAAK,KAAKjF,SAAS,EAAE;MACvB;MACA;MACA;MACA;MACA,MAAMiF,KAAK;IACb,CAAC,CAAC;;IAGF,IAAIkY,SAAS,GAAG,CAAC3U,MAAM,CAACkL,UAAU,EAAElL,MAAM,CAACiL,UAAU,CAAC,CAACwJ,IAAI,CAAC/M,CAAC,IAAIA,CAAC,CAAC;IACnE,OAAOhS,MAAM,CAACgf,MAAM,CAACC,SAAS,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC1C;EAEA,eAAeN,SAASA,CAACnG,OAAO,EAAE/V,QAAQ,EAAEiG,OAAO,EAAE2V,cAAc,EAAEa,UAAU,EAAE;IAC/E3Z,SAAS,CAACiT,OAAO,CAACvH,MAAM,EAAE,sEAAsE,CAAC;IAEjG,IAAI;MACF,IAAImG,gBAAgB,CAACoB,OAAO,CAACa,MAAM,CAAC1L,WAAW,CAAC,CAAC,CAAC,EAAE;QAClD,IAAIrD,MAAM,GAAG,MAAM6U,MAAM,CAAC3G,OAAO,EAAE9P,OAAO,EAAEwW,UAAU,IAAI/F,cAAc,CAACzQ,OAAO,EAAEjG,QAAQ,CAAC,EAAE4b,cAAc,EAAEa,UAAU,IAAI,IAAI,CAAC;QAChI,OAAO5U,MAAM;MACf;MAEA,IAAIA,MAAM,GAAG,MAAM8U,aAAa,CAAC5G,OAAO,EAAE9P,OAAO,EAAE2V,cAAc,EAAEa,UAAU,CAAC;MAC9E,OAAON,UAAU,CAACtU,MAAM,CAAC,GAAGA,MAAM,GAAGlK,QAAQ,CAAC,CAAC,CAAC,EAAEkK,MAAM,EAAE;QACxDkL,UAAU,EAAE,IAAI;QAChBkJ,aAAa,EAAE,CAAC;MAClB,CAAC,CAAC;IACJ,CAAC,CAAC,OAAO7Y,CAAC,EAAE;MACV;MACA;MACA;MACA,IAAIwZ,oBAAoB,CAACxZ,CAAC,CAAC,EAAE;QAC3B,IAAIA,CAAC,CAACuT,IAAI,KAAKjS,UAAU,CAACJ,KAAK,IAAI,CAACuY,kBAAkB,CAACzZ,CAAC,CAAC0Z,QAAQ,CAAC,EAAE;UAClE,MAAM1Z,CAAC,CAAC0Z,QAAQ;QAClB;QAEA,OAAO1Z,CAAC,CAAC0Z,QAAQ;MACnB,CAAC,CAAC;MACF;;MAGA,IAAID,kBAAkB,CAACzZ,CAAC,CAAC,EAAE;QACzB,OAAOA,CAAC;MACV;MAEA,MAAMA,CAAC;IACT;EACF;EAEA,eAAesZ,MAAMA,CAAC3G,OAAO,EAAE9P,OAAO,EAAEwQ,WAAW,EAAEmF,cAAc,EAAEmB,cAAc,EAAE;IACnF,IAAIlV,MAAM;IAEV,IAAI,CAAC4O,WAAW,CAAC7R,KAAK,CAACrF,MAAM,EAAE;MAC7B,IAAI+E,KAAK,GAAG6N,sBAAsB,CAAC,GAAG,EAAE;QACtCyE,MAAM,EAAEb,OAAO,CAACa,MAAM;QACtB1W,QAAQ,EAAE,IAAI6D,GAAG,CAACgS,OAAO,CAACtT,GAAG,CAAC,CAACvC,QAAQ;QACvC2W,OAAO,EAAEJ,WAAW,CAAC7R,KAAK,CAACO;MAC7B,CAAC,CAAC;MAEF,IAAI4X,cAAc,EAAE;QAClB,MAAMzY,KAAK;MACb;MAEAuD,MAAM,GAAG;QACP8O,IAAI,EAAEjS,UAAU,CAACJ,KAAK;QACtBA;MACF,CAAC;IACH,CAAC,MAAM;MACLuD,MAAM,GAAG,MAAMiP,kBAAkB,CAAC,QAAQ,EAAEf,OAAO,EAAEU,WAAW,EAAExQ,OAAO,EAAEL,QAAQ,EAAE,IAAI,EAAEmX,cAAc,EAAEnB,cAAc,CAAC;MAE1H,IAAI7F,OAAO,CAACvH,MAAM,CAACS,OAAO,EAAE;QAC1B,IAAI2H,MAAM,GAAGmG,cAAc,GAAG,YAAY,GAAG,OAAO;QACpD,MAAM,IAAI/Z,KAAK,CAAC4T,MAAM,GAAG,iBAAiB,CAAC;MAC7C;IACF;IAEA,IAAIG,gBAAgB,CAAClP,MAAM,CAAC,EAAE;MAC5B;MACA;MACA;MACA;MACA,MAAM,IAAI2F,QAAQ,CAAC,IAAI,EAAE;QACvBJ,MAAM,EAAEvF,MAAM,CAACuF,MAAM;QACrBC,OAAO,EAAE;UACP2P,QAAQ,EAAEnV,MAAM,CAAC7H;QACnB;MACF,CAAC,CAAC;IACJ;IAEA,IAAImX,gBAAgB,CAACtP,MAAM,CAAC,EAAE;MAC5B,MAAM,IAAI7E,KAAK,CAAC,qCAAqC,CAAC;IACxD;IAEA,IAAI+Z,cAAc,EAAE;MAClB;MACA;MACA,IAAI9F,aAAa,CAACpP,MAAM,CAAC,EAAE;QACzB,MAAMA,MAAM,CAACvD,KAAK;MACpB;MAEA,OAAO;QACL2B,OAAO,EAAE,CAACwQ,WAAW,CAAC;QACtB3D,UAAU,EAAE,CAAC,CAAC;QACdC,UAAU,EAAE;UACV,CAAC0D,WAAW,CAAC7R,KAAK,CAACO,EAAE,GAAG0C,MAAM,CAACoF;QACjC,CAAC;QACD+F,MAAM,EAAE,IAAI;QACZ;QACA;QACA+I,UAAU,EAAE,GAAG;QACfC,aAAa,EAAE,CAAC,CAAC;QACjBC,aAAa,EAAE,CAAC;MAClB,CAAC;IACH;IAEA,IAAIhF,aAAa,CAACpP,MAAM,CAAC,EAAE;MACzB;MACA;MACA,IAAIqP,aAAa,GAAGhB,mBAAmB,CAACjQ,OAAO,EAAEwQ,WAAW,CAAC7R,KAAK,CAACO,EAAE,CAAC;MACtE,IAAI8X,OAAO,GAAG,MAAMN,aAAa,CAAC5G,OAAO,EAAE9P,OAAO,EAAE2V,cAAc,EAAEvc,SAAS,EAAE;QAC7E,CAAC6X,aAAa,CAACtS,KAAK,CAACO,EAAE,GAAG0C,MAAM,CAACvD;MACnC,CAAC,CAAC,CAAC,CAAC;;MAEJ,OAAO3G,QAAQ,CAAC,CAAC,CAAC,EAAEsf,OAAO,EAAE;QAC3BlB,UAAU,EAAEvL,oBAAoB,CAAC3I,MAAM,CAACvD,KAAK,CAAC,GAAGuD,MAAM,CAACvD,KAAK,CAAC8I,MAAM,GAAG,GAAG;QAC1E2F,UAAU,EAAE,IAAI;QAChBkJ,aAAa,EAAEte,QAAQ,CAAC,CAAC,CAAC,EAAEkK,MAAM,CAACwF,OAAO,GAAG;UAC3C,CAACoJ,WAAW,CAAC7R,KAAK,CAACO,EAAE,GAAG0C,MAAM,CAACwF;QACjC,CAAC,GAAG,CAAC,CAAC;MACR,CAAC,CAAC;IACJ,CAAC,CAAC;;IAGF,IAAI6P,aAAa,GAAG,IAAI3G,OAAO,CAACR,OAAO,CAACtT,GAAG,EAAE;MAC3C4K,OAAO,EAAE0I,OAAO,CAAC1I,OAAO;MACxB+C,QAAQ,EAAE2F,OAAO,CAAC3F,QAAQ;MAC1B5B,MAAM,EAAEuH,OAAO,CAACvH;IAClB,CAAC,CAAC;IACF,IAAIyO,OAAO,GAAG,MAAMN,aAAa,CAACO,aAAa,EAAEjX,OAAO,EAAE2V,cAAc,CAAC;IACzE,OAAOje,QAAQ,CAAC,CAAC,CAAC,EAAEsf,OAAO,EAAEpV,MAAM,CAACkU,UAAU,GAAG;MAC/CA,UAAU,EAAElU,MAAM,CAACkU;IACrB,CAAC,GAAG,CAAC,CAAC,EAAE;MACNhJ,UAAU,EAAE;QACV,CAAC0D,WAAW,CAAC7R,KAAK,CAACO,EAAE,GAAG0C,MAAM,CAACoF;MACjC,CAAC;MACDgP,aAAa,EAAEte,QAAQ,CAAC,CAAC,CAAC,EAAEkK,MAAM,CAACwF,OAAO,GAAG;QAC3C,CAACoJ,WAAW,CAAC7R,KAAK,CAACO,EAAE,GAAG0C,MAAM,CAACwF;MACjC,CAAC,GAAG,CAAC,CAAC;IACR,CAAC,CAAC;EACJ;EAEA,eAAesP,aAAaA,CAAC5G,OAAO,EAAE9P,OAAO,EAAE2V,cAAc,EAAEa,UAAU,EAAEnG,kBAAkB,EAAE;IAC7F,IAAIyG,cAAc,GAAGN,UAAU,IAAI,IAAI,CAAC,CAAC;;IAEzC,IAAIM,cAAc,IAAI,EAAEN,UAAU,IAAI,IAAI,IAAIA,UAAU,CAAC7X,KAAK,CAAC2N,MAAM,CAAC,EAAE;MACtE,MAAMJ,sBAAsB,CAAC,GAAG,EAAE;QAChCyE,MAAM,EAAEb,OAAO,CAACa,MAAM;QACtB1W,QAAQ,EAAE,IAAI6D,GAAG,CAACgS,OAAO,CAACtT,GAAG,CAAC,CAACvC,QAAQ;QACvC2W,OAAO,EAAE4F,UAAU,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,UAAU,CAAC7X,KAAK,CAACO;MAC1D,CAAC,CAAC;IACJ;IAEA,IAAIyT,cAAc,GAAG6D,UAAU,GAAG,CAACA,UAAU,CAAC,GAAGU,6BAA6B,CAAClX,OAAO,EAAE1I,MAAM,CAACsX,IAAI,CAACyB,kBAAkB,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACjI,IAAIe,aAAa,GAAGuB,cAAc,CAAC/P,MAAM,CAACyJ,CAAC,IAAIA,CAAC,CAAC1N,KAAK,CAAC2N,MAAM,CAAC,CAAC,CAAC;;IAEhE,IAAI8E,aAAa,CAACpZ,MAAM,KAAK,CAAC,EAAE;MAC9B,OAAO;QACLgI,OAAO;QACP;QACA6M,UAAU,EAAE7M,OAAO,CAAC6C,MAAM,CAAC,CAAC2F,GAAG,EAAE6D,CAAC,KAAK/U,MAAM,CAACK,MAAM,CAAC6Q,GAAG,EAAE;UACxD,CAAC6D,CAAC,CAAC1N,KAAK,CAACO,EAAE,GAAG;QAChB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACP6N,MAAM,EAAEsD,kBAAkB,IAAI,IAAI;QAClCyF,UAAU,EAAE,GAAG;QACfC,aAAa,EAAE,CAAC;MAClB,CAAC;IACH;IAEA,IAAIrE,OAAO,GAAG,MAAMzJ,OAAO,CAACkM,GAAG,CAAC,CAAC,GAAG/C,aAAa,CAACrY,GAAG,CAACwK,KAAK,IAAIsN,kBAAkB,CAAC,QAAQ,EAAEf,OAAO,EAAEvM,KAAK,EAAEvD,OAAO,EAAEL,QAAQ,EAAE,IAAI,EAAEmX,cAAc,EAAEnB,cAAc,CAAC,CAAC,CAAC,CAAC;IAEvK,IAAI7F,OAAO,CAACvH,MAAM,CAACS,OAAO,EAAE;MAC1B,IAAI2H,MAAM,GAAGmG,cAAc,GAAG,YAAY,GAAG,OAAO;MACpD,MAAM,IAAI/Z,KAAK,CAAC4T,MAAM,GAAG,iBAAiB,CAAC;IAC7C;IAEA,IAAIwG,eAAe,GAAG,IAAInY,GAAG,CAAC,CAAC;IAC/B0S,OAAO,CAAC3Q,OAAO,CAAC,CAACa,MAAM,EAAE9J,CAAC,KAAK;MAC7Bqf,eAAe,CAAC7X,GAAG,CAAC8R,aAAa,CAACtZ,CAAC,CAAC,CAAC6G,KAAK,CAACO,EAAE,CAAC,CAAC,CAAC;MAChD;;MAEA,IAAIgS,gBAAgB,CAACtP,MAAM,CAAC,EAAE;QAC5BA,MAAM,CAACqQ,YAAY,CAAC7I,MAAM,CAAC,CAAC;MAC9B;IACF,CAAC,CAAC,CAAC,CAAC;;IAEJ,IAAI4N,OAAO,GAAGI,sBAAsB,CAACpX,OAAO,EAAEoR,aAAa,EAAEM,OAAO,EAAErB,kBAAkB,CAAC,CAAC,CAAC;;IAE3FrQ,OAAO,CAACe,OAAO,CAACwC,KAAK,IAAI;MACvB,IAAI,CAAC4T,eAAe,CAAC9X,GAAG,CAACkE,KAAK,CAAC5E,KAAK,CAACO,EAAE,CAAC,EAAE;QACxC8X,OAAO,CAACnK,UAAU,CAACtJ,KAAK,CAAC5E,KAAK,CAACO,EAAE,CAAC,GAAG,IAAI;MAC3C;IACF,CAAC,CAAC;IACF,OAAOxH,QAAQ,CAAC,CAAC,CAAC,EAAEsf,OAAO,EAAE;MAC3BhX;IACF,CAAC,CAAC;EACJ;EAEA,OAAO;IACLwL,UAAU;IACViK,KAAK;IACLU;EACF,CAAC;AACH,CAAC,CAAC;AACF;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,SAASkB,yBAAyBA,CAACxY,MAAM,EAAEmY,OAAO,EAAE3Y,KAAK,EAAE;EACzD,IAAIiZ,UAAU,GAAG5f,QAAQ,CAAC,CAAC,CAAC,EAAEsf,OAAO,EAAE;IACrClB,UAAU,EAAE,GAAG;IACf/I,MAAM,EAAE;MACN,CAACiK,OAAO,CAACO,0BAA0B,IAAI1Y,MAAM,CAAC,CAAC,CAAC,CAACK,EAAE,GAAGb;IACxD;EACF,CAAC,CAAC;EAEF,OAAOiZ,UAAU;AACnB;AAEA,SAASE,sBAAsBA,CAACxI,IAAI,EAAE;EACpC,OAAOA,IAAI,IAAI,IAAI,IAAI,UAAU,IAAIA,IAAI;AAC3C,CAAC,CAAC;AACF;;AAGA,SAASE,wBAAwBA,CAACpV,EAAE,EAAEkV,IAAI,EAAEyI,SAAS,EAAE;EACrD,IAAIA,SAAS,KAAK,KAAK,CAAC,EAAE;IACxBA,SAAS,GAAG,KAAK;EACnB;EAEA,IAAI/c,IAAI,GAAG,OAAOZ,EAAE,KAAK,QAAQ,GAAGA,EAAE,GAAGU,UAAU,CAACV,EAAE,CAAC,CAAC,CAAC;;EAEzD,IAAI,CAACkV,IAAI,IAAI,CAACwI,sBAAsB,CAACxI,IAAI,CAAC,EAAE;IAC1C,OAAO;MACLtU;IACF,CAAC;EACH;EAEA,IAAIsU,IAAI,CAACjE,UAAU,IAAI,CAAC6K,aAAa,CAAC5G,IAAI,CAACjE,UAAU,CAAC,EAAE;IACtD,OAAO;MACLrQ,IAAI;MACJ2D,KAAK,EAAE6N,sBAAsB,CAAC,GAAG,EAAE;QACjCyE,MAAM,EAAE3B,IAAI,CAACjE;MACf,CAAC;IACH,CAAC;EACH,CAAC,CAAC;;EAGF,IAAIkE,UAAU;EAEd,IAAID,IAAI,CAAC9D,QAAQ,EAAE;IACjB+D,UAAU,GAAG;MACXlE,UAAU,EAAEiE,IAAI,CAACjE,UAAU,IAAI,KAAK;MACpCC,UAAU,EAAE0M,iBAAiB,CAAChd,IAAI,CAAC;MACnCuQ,WAAW,EAAE+D,IAAI,IAAIA,IAAI,CAAC/D,WAAW,IAAI,mCAAmC;MAC5EC,QAAQ,EAAE8D,IAAI,CAAC9D;IACjB,CAAC;IAED,IAAIwD,gBAAgB,CAACO,UAAU,CAAClE,UAAU,CAAC,EAAE;MAC3C,OAAO;QACLrQ,IAAI;QACJuU;MACF,CAAC;IACH;EACF,CAAC,CAAC;;EAGF,IAAIvR,UAAU,GAAG/C,SAAS,CAACD,IAAI,CAAC;EAEhC,IAAI;IACF,IAAIid,YAAY,GAAGC,6BAA6B,CAAC5I,IAAI,CAAC9D,QAAQ,CAAC,CAAC,CAAC;IACjE;IACA;;IAEA,IAAIuM,SAAS,IAAI/Z,UAAU,CAAC9C,MAAM,IAAIid,kBAAkB,CAACna,UAAU,CAAC9C,MAAM,CAAC,EAAE;MAC3E+c,YAAY,CAACG,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC;IAClC;IAEApa,UAAU,CAAC9C,MAAM,GAAG,GAAG,GAAG+c,YAAY;EACxC,CAAC,CAAC,OAAOxa,CAAC,EAAE;IACV,OAAO;MACLzC,IAAI;MACJ2D,KAAK,EAAE6N,sBAAsB,CAAC,GAAG;IACnC,CAAC;EACH;EAEA,OAAO;IACLxR,IAAI,EAAEF,UAAU,CAACkD,UAAU,CAAC;IAC5BuR;EACF,CAAC;AACH,CAAC,CAAC;AACF;;AAGA,SAASiI,6BAA6BA,CAAClX,OAAO,EAAE+X,UAAU,EAAE;EAC1D,IAAIC,eAAe,GAAGhY,OAAO;EAE7B,IAAI+X,UAAU,EAAE;IACd,IAAI9e,KAAK,GAAG+G,OAAO,CAACiY,SAAS,CAAC5L,CAAC,IAAIA,CAAC,CAAC1N,KAAK,CAACO,EAAE,KAAK6Y,UAAU,CAAC;IAE7D,IAAI9e,KAAK,IAAI,CAAC,EAAE;MACd+e,eAAe,GAAGhY,OAAO,CAACrD,KAAK,CAAC,CAAC,EAAE1D,KAAK,CAAC;IAC3C;EACF;EAEA,OAAO+e,eAAe;AACxB;AAEA,SAAS1G,gBAAgBA,CAACnY,KAAK,EAAE6G,OAAO,EAAEiP,UAAU,EAAElV,QAAQ,EAAEuT,sBAAsB,EAAEC,uBAAuB,EAAEC,qBAAqB,EAAEwC,iBAAiB,EAAEZ,YAAY,EAAEtB,gBAAgB,EAAE;EACzL,IAAIiF,YAAY,GAAG3D,YAAY,GAAG9X,MAAM,CAACgf,MAAM,CAAClH,YAAY,CAAC,CAAC,CAAC,CAAC,GAAGY,iBAAiB,GAAG1Y,MAAM,CAACgf,MAAM,CAACtG,iBAAiB,CAAC,CAAC,CAAC,CAAC,GAAG5W,SAAS,CAAC,CAAC;;EAExI,IAAI2e,UAAU,GAAG3I,YAAY,GAAG9X,MAAM,CAACsX,IAAI,CAACQ,YAAY,CAAC,CAAC,CAAC,CAAC,GAAGhW,SAAS;EACxE,IAAI4e,eAAe,GAAGd,6BAA6B,CAAClX,OAAO,EAAE+X,UAAU,CAAC;EACxE,IAAIG,iBAAiB,GAAGF,eAAe,CAACpV,MAAM,CAAC,CAACW,KAAK,EAAEtK,KAAK,KAAKsK,KAAK,CAAC5E,KAAK,CAAC2N,MAAM,IAAI,IAAI,KAAK6L,WAAW,CAAChf,KAAK,CAAC0T,UAAU,EAAE1T,KAAK,CAAC6G,OAAO,CAAC/G,KAAK,CAAC,EAAEsK,KAAK,CAAC;EAAI;EAC9JgK,uBAAuB,CAAC5K,IAAI,CAACzD,EAAE,IAAIA,EAAE,KAAKqE,KAAK,CAAC5E,KAAK,CAACO,EAAE,CAAC,IAAIkZ,sBAAsB,CAACjf,KAAK,CAACY,QAAQ,EAAEZ,KAAK,CAAC6G,OAAO,CAAC/G,KAAK,CAAC,EAAEgW,UAAU,EAAElV,QAAQ,EAAEwJ,KAAK,EAAE+J,sBAAsB,EAAEyF,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEhM,IAAI1B,oBAAoB,GAAG,EAAE;EAC7BvD,gBAAgB,IAAIA,gBAAgB,CAAC/M,OAAO,CAAC,CAACsX,MAAM,EAAEngB,GAAG,KAAK;IAC5D,IAAI,CAACoE,IAAI,EAAEiH,KAAK,EAAE8Q,YAAY,CAAC,GAAGgE,MAAM;;IAExC;IACA,IAAI7K,qBAAqB,CAACvM,QAAQ,CAAC/I,GAAG,CAAC,EAAE;MACvCmZ,oBAAoB,CAACvW,IAAI,CAAC,CAAC5C,GAAG,EAAEoE,IAAI,EAAEiH,KAAK,EAAE8Q,YAAY,CAAC,CAAC;IAC7D,CAAC,MAAM,IAAI/G,sBAAsB,EAAE;MACjC,IAAIgL,gBAAgB,GAAGF,sBAAsB,CAAC9b,IAAI,EAAEiH,KAAK,EAAE0L,UAAU,EAAE3S,IAAI,EAAEiH,KAAK,EAAE+J,sBAAsB,EAAEyF,YAAY,CAAC;MAEzH,IAAIuF,gBAAgB,EAAE;QACpBjH,oBAAoB,CAACvW,IAAI,CAAC,CAAC5C,GAAG,EAAEoE,IAAI,EAAEiH,KAAK,EAAE8Q,YAAY,CAAC,CAAC;MAC7D;IACF;EACF,CAAC,CAAC;EACF,OAAO,CAAC6D,iBAAiB,EAAE7G,oBAAoB,CAAC;AAClD;AAEA,SAAS8G,WAAWA,CAACI,iBAAiB,EAAEC,YAAY,EAAEjV,KAAK,EAAE;EAC3D,IAAIkV,KAAK;EAAG;EACZ,CAACD,YAAY;EAAI;EACjBjV,KAAK,CAAC5E,KAAK,CAACO,EAAE,KAAKsZ,YAAY,CAAC7Z,KAAK,CAACO,EAAE,CAAC,CAAC;EAC1C;;EAEA,IAAIwZ,aAAa,GAAGH,iBAAiB,CAAChV,KAAK,CAAC5E,KAAK,CAACO,EAAE,CAAC,KAAK9F,SAAS,CAAC,CAAC;;EAErE,OAAOqf,KAAK,IAAIC,aAAa;AAC/B;AAEA,SAASC,kBAAkBA,CAACH,YAAY,EAAEjV,KAAK,EAAE;EAC/C,IAAIqV,WAAW,GAAGJ,YAAY,CAAC7Z,KAAK,CAACjE,IAAI;EACzC;IAAQ;IACN8d,YAAY,CAACve,QAAQ,KAAKsJ,KAAK,CAACtJ,QAAQ;IAAI;IAC5C;IACA2e,WAAW,IAAIA,WAAW,CAACnX,QAAQ,CAAC,GAAG,CAAC,IAAI+W,YAAY,CAAC/U,MAAM,CAAC,GAAG,CAAC,KAAKF,KAAK,CAACE,MAAM,CAAC,GAAG;EAAC;AAE9F;AAEA,SAAS2U,sBAAsBA,CAACS,eAAe,EAAEL,YAAY,EAAEvJ,UAAU,EAAElV,QAAQ,EAAEwJ,KAAK,EAAE+J,sBAAsB,EAAEyF,YAAY,EAAE;EAChI,IAAI+F,UAAU,GAAGlb,mBAAmB,CAACib,eAAe,CAAC;EACrD,IAAIE,aAAa,GAAGP,YAAY,CAAC/U,MAAM;EACvC,IAAIuV,OAAO,GAAGpb,mBAAmB,CAAC7D,QAAQ,CAAC;EAC3C,IAAIkf,UAAU,GAAG1V,KAAK,CAACE,MAAM,CAAC,CAAC;EAC/B;EACA;EACA;EACA;EACA;;EAEA,IAAIyV,uBAAuB,GAAGP,kBAAkB,CAACH,YAAY,EAAEjV,KAAK,CAAC;EAAI;EACzEuV,UAAU,CAACxb,QAAQ,CAAC,CAAC,KAAK0b,OAAO,CAAC1b,QAAQ,CAAC,CAAC;EAAI;EAChDwb,UAAU,CAACle,MAAM,KAAKoe,OAAO,CAACpe,MAAM;EAAI;EACxC0S,sBAAsB;EAEtB,IAAI/J,KAAK,CAAC5E,KAAK,CAAC2Z,gBAAgB,EAAE;IAChC,IAAIa,WAAW,GAAG5V,KAAK,CAAC5E,KAAK,CAAC2Z,gBAAgB,CAAC5gB,QAAQ,CAAC;MACtDohB,UAAU;MACVC,aAAa;MACbC,OAAO;MACPC;IACF,CAAC,EAAEhK,UAAU,EAAE;MACb8D,YAAY;MACZmG;IACF,CAAC,CAAC,CAAC;IAEH,IAAI,OAAOC,WAAW,KAAK,SAAS,EAAE;MACpC,OAAOA,WAAW;IACpB;EACF;EAEA,OAAOD,uBAAuB;AAChC;AAEA,eAAerI,kBAAkBA,CAACH,IAAI,EAAEZ,OAAO,EAAEvM,KAAK,EAAEvD,OAAO,EAAEL,QAAQ,EAAEyZ,eAAe,EAAEtC,cAAc,EAAEnB,cAAc,EAAE;EAC1H,IAAIhW,QAAQ,KAAK,KAAK,CAAC,EAAE;IACvBA,QAAQ,GAAG,GAAG;EAChB;EAEA,IAAIyZ,eAAe,KAAK,KAAK,CAAC,EAAE;IAC9BA,eAAe,GAAG,KAAK;EACzB;EAEA,IAAItC,cAAc,KAAK,KAAK,CAAC,EAAE;IAC7BA,cAAc,GAAG,KAAK;EACxB;EAEA,IAAIuC,UAAU;EACd,IAAIzX,MAAM,CAAC,CAAC;;EAEZ,IAAImG,MAAM;EACV,IAAIC,YAAY,GAAG,IAAIC,OAAO,CAAC,CAAClE,CAAC,EAAEmE,CAAC,KAAKH,MAAM,GAAGG,CAAC,CAAC;EAEpD,IAAIoR,QAAQ,GAAGA,CAAA,KAAMvR,MAAM,CAAC,CAAC;EAE7B+H,OAAO,CAACvH,MAAM,CAAChK,gBAAgB,CAAC,OAAO,EAAE+a,QAAQ,CAAC;EAElD,IAAI;IACF,IAAIC,OAAO,GAAGhW,KAAK,CAAC5E,KAAK,CAAC+R,IAAI,CAAC;IAC/B7T,SAAS,CAAC0c,OAAO,EAAE,qBAAqB,GAAG7I,IAAI,GAAG,mBAAmB,GAAGnN,KAAK,CAAC5E,KAAK,CAACO,EAAE,GAAG,UAAU,CAAC;IACpG0C,MAAM,GAAG,MAAMqG,OAAO,CAACU,IAAI,CAAC,CAAC4Q,OAAO,CAAC;MACnCzJ,OAAO;MACPrM,MAAM,EAAEF,KAAK,CAACE,MAAM;MACpBuT,OAAO,EAAErB;IACX,CAAC,CAAC,EAAE3N,YAAY,CAAC,CAAC;IAClBnL,SAAS,CAAC+E,MAAM,KAAKxI,SAAS,EAAE,cAAc,IAAIsX,IAAI,KAAK,QAAQ,GAAG,WAAW,GAAG,UAAU,CAAC,GAAG,aAAa,IAAI,IAAI,GAAGnN,KAAK,CAAC5E,KAAK,CAACO,EAAE,GAAG,2CAA2C,GAAGwR,IAAI,GAAG,IAAI,CAAC,GAAG,4CAA4C,CAAC;EACvP,CAAC,CAAC,OAAOvT,CAAC,EAAE;IACVkc,UAAU,GAAG5a,UAAU,CAACJ,KAAK;IAC7BuD,MAAM,GAAGzE,CAAC;EACZ,CAAC,SAAS;IACR2S,OAAO,CAACvH,MAAM,CAAC/J,mBAAmB,CAAC,OAAO,EAAE8a,QAAQ,CAAC;EACvD;EAEA,IAAIpD,UAAU,CAACtU,MAAM,CAAC,EAAE;IACtB,IAAIuF,MAAM,GAAGvF,MAAM,CAACuF,MAAM,CAAC,CAAC;;IAE5B,IAAIyD,mBAAmB,CAACvL,GAAG,CAAC8H,MAAM,CAAC,EAAE;MACnC,IAAIpN,QAAQ,GAAG6H,MAAM,CAACwF,OAAO,CAAC2B,GAAG,CAAC,UAAU,CAAC;MAC7ClM,SAAS,CAAC9C,QAAQ,EAAE,4EAA4E,CAAC;MACjG,IAAIyf,UAAU,GAAG,gBAAgB,CAACzW,IAAI,CAAChJ,QAAQ,CAAC,IAAIA,QAAQ,CAAC0G,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;;MAE/E,IAAI,CAAC+Y,UAAU,EAAE;QACf,IAAIC,aAAa,GAAGzZ,OAAO,CAACrD,KAAK,CAAC,CAAC,EAAEqD,OAAO,CAACtD,OAAO,CAAC6G,KAAK,CAAC,GAAG,CAAC,CAAC;QAChE,IAAI4C,cAAc,GAAGH,0BAA0B,CAACyT,aAAa,CAAC,CAAC1gB,GAAG,CAACwK,KAAK,IAAIA,KAAK,CAACG,YAAY,CAAC;QAC/F,IAAIgW,gBAAgB,GAAGzT,SAAS,CAAClM,QAAQ,EAAEoM,cAAc,EAAE,IAAIrI,GAAG,CAACgS,OAAO,CAACtT,GAAG,CAAC,CAACvC,QAAQ,CAAC;QACzF4C,SAAS,CAACrC,UAAU,CAACkf,gBAAgB,CAAC,EAAE,uCAAuC,GAAG3f,QAAQ,CAAC,CAAC,CAAC;;QAE7F,IAAI4F,QAAQ,EAAE;UACZ,IAAIjF,IAAI,GAAGgf,gBAAgB,CAACzf,QAAQ;UACpCyf,gBAAgB,CAACzf,QAAQ,GAAGS,IAAI,KAAK,GAAG,GAAGiF,QAAQ,GAAGe,SAAS,CAAC,CAACf,QAAQ,EAAEjF,IAAI,CAAC,CAAC;QACnF;QAEAX,QAAQ,GAAGS,UAAU,CAACkf,gBAAgB,CAAC;MACzC,CAAC,CAAC;MACF;MACA;MACA;;MAGA,IAAIN,eAAe,EAAE;QACnBxX,MAAM,CAACwF,OAAO,CAACE,GAAG,CAAC,UAAU,EAAEvN,QAAQ,CAAC;QACxC,MAAM6H,MAAM;MACd;MAEA,OAAO;QACL8O,IAAI,EAAEjS,UAAU,CAAC0L,QAAQ;QACzBhD,MAAM;QACNpN,QAAQ;QACRsV,UAAU,EAAEzN,MAAM,CAACwF,OAAO,CAAC2B,GAAG,CAAC,oBAAoB,CAAC,KAAK;MAC3D,CAAC;IACH,CAAC,CAAC;IACF;IACA;;IAGA,IAAI+N,cAAc,EAAE;MAClB;MACA,MAAM;QACJpG,IAAI,EAAE2I,UAAU,IAAI5a,UAAU,CAACuI,IAAI;QACnC6P,QAAQ,EAAEjV;MACZ,CAAC;IACH;IAEA,IAAIoF,IAAI;IACR,IAAI2S,WAAW,GAAG/X,MAAM,CAACwF,OAAO,CAAC2B,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC;IACtD;;IAEA,IAAI4Q,WAAW,IAAI,uBAAuB,CAAC5W,IAAI,CAAC4W,WAAW,CAAC,EAAE;MAC5D3S,IAAI,GAAG,MAAMpF,MAAM,CAACmF,IAAI,CAAC,CAAC;IAC5B,CAAC,MAAM;MACLC,IAAI,GAAG,MAAMpF,MAAM,CAACgY,IAAI,CAAC,CAAC;IAC5B;IAEA,IAAIP,UAAU,KAAK5a,UAAU,CAACJ,KAAK,EAAE;MACnC,OAAO;QACLqS,IAAI,EAAE2I,UAAU;QAChBhb,KAAK,EAAE,IAAI+L,aAAa,CAACjD,MAAM,EAAEvF,MAAM,CAACyI,UAAU,EAAErD,IAAI,CAAC;QACzDI,OAAO,EAAExF,MAAM,CAACwF;MAClB,CAAC;IACH;IAEA,OAAO;MACLsJ,IAAI,EAAEjS,UAAU,CAACuI,IAAI;MACrBA,IAAI;MACJ8O,UAAU,EAAElU,MAAM,CAACuF,MAAM;MACzBC,OAAO,EAAExF,MAAM,CAACwF;IAClB,CAAC;EACH;EAEA,IAAIiS,UAAU,KAAK5a,UAAU,CAACJ,KAAK,EAAE;IACnC,OAAO;MACLqS,IAAI,EAAE2I,UAAU;MAChBhb,KAAK,EAAEuD;IACT,CAAC;EACH;EAEA,IAAIA,MAAM,YAAY6F,YAAY,EAAE;IAClC,OAAO;MACLiJ,IAAI,EAAEjS,UAAU,CAACob,QAAQ;MACzB5H,YAAY,EAAErQ;IAChB,CAAC;EACH;EAEA,OAAO;IACL8O,IAAI,EAAEjS,UAAU,CAACuI,IAAI;IACrBA,IAAI,EAAEpF;EACR,CAAC;AACH,CAAC,CAAC;AACF;AACA;;AAGA,SAASmO,uBAAuBA,CAAChW,QAAQ,EAAEwO,MAAM,EAAE0G,UAAU,EAAE;EAC7D,IAAIzS,GAAG,GAAGoB,mBAAmB,CAAC8Z,iBAAiB,CAAC3d,QAAQ,CAAC,CAAC,CAACuD,QAAQ,CAAC,CAAC;EACrE,IAAI2J,IAAI,GAAG;IACTsB;EACF,CAAC;EAED,IAAI0G,UAAU,IAAIP,gBAAgB,CAACO,UAAU,CAAClE,UAAU,CAAC,EAAE;IACzD,IAAI;MACFA,UAAU;MACVE,WAAW;MACXC;IACF,CAAC,GAAG+D,UAAU;IACdhI,IAAI,CAAC0J,MAAM,GAAG5F,UAAU,CAAC+O,WAAW,CAAC,CAAC;IACtC7S,IAAI,CAAC8S,IAAI,GAAG9O,WAAW,KAAK,mCAAmC,GAAG2M,6BAA6B,CAAC1M,QAAQ,CAAC,GAAGA,QAAQ;EACtH,CAAC,CAAC;;EAGF,OAAO,IAAIoF,OAAO,CAAC9T,GAAG,EAAEyK,IAAI,CAAC;AAC/B;AAEA,SAAS2Q,6BAA6BA,CAAC1M,QAAQ,EAAE;EAC/C,IAAIyM,YAAY,GAAG,IAAIqC,eAAe,CAAC,CAAC;EAExC,KAAK,IAAI,CAAC9hB,GAAG,EAAET,KAAK,CAAC,IAAIyT,QAAQ,CAACpS,OAAO,CAAC,CAAC,EAAE;IAC3C+D,SAAS,CAAC,OAAOpF,KAAK,KAAK,QAAQ,EAAE,kFAAkF,GAAG,2CAA2C,CAAC;IACtKkgB,YAAY,CAACG,MAAM,CAAC5f,GAAG,EAAET,KAAK,CAAC;EACjC;EAEA,OAAOkgB,YAAY;AACrB;AAEA,SAASP,sBAAsBA,CAACpX,OAAO,EAAEoR,aAAa,EAAEM,OAAO,EAAEtC,YAAY,EAAErB,eAAe,EAAE;EAC9F;EACA,IAAIlB,UAAU,GAAG,CAAC,CAAC;EACnB,IAAIE,MAAM,GAAG,IAAI;EACjB,IAAI+I,UAAU;EACd,IAAImE,UAAU,GAAG,KAAK;EACtB,IAAIlE,aAAa,GAAG,CAAC,CAAC,CAAC,CAAC;;EAExBrE,OAAO,CAAC3Q,OAAO,CAAC,CAACa,MAAM,EAAE3I,KAAK,KAAK;IACjC,IAAIiG,EAAE,GAAGkS,aAAa,CAACnY,KAAK,CAAC,CAAC0F,KAAK,CAACO,EAAE;IACtCrC,SAAS,CAAC,CAACiU,gBAAgB,CAAClP,MAAM,CAAC,EAAE,qDAAqD,CAAC;IAE3F,IAAIoP,aAAa,CAACpP,MAAM,CAAC,EAAE;MACzB;MACA;MACA,IAAIqP,aAAa,GAAGhB,mBAAmB,CAACjQ,OAAO,EAAEd,EAAE,CAAC;MACpD,IAAIb,KAAK,GAAGuD,MAAM,CAACvD,KAAK,CAAC,CAAC;MAC1B;MACA;;MAEA,IAAI+Q,YAAY,EAAE;QAChB/Q,KAAK,GAAG/G,MAAM,CAACgf,MAAM,CAAClH,YAAY,CAAC,CAAC,CAAC,CAAC;QACtCA,YAAY,GAAGhW,SAAS;MAC1B;MAEA2T,MAAM,GAAGA,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC;;MAEvB,IAAIA,MAAM,CAACkE,aAAa,CAACtS,KAAK,CAACO,EAAE,CAAC,IAAI,IAAI,EAAE;QAC1C6N,MAAM,CAACkE,aAAa,CAACtS,KAAK,CAACO,EAAE,CAAC,GAAGb,KAAK;MACxC,CAAC,CAAC;;MAGFwO,UAAU,CAAC3N,EAAE,CAAC,GAAG9F,SAAS,CAAC,CAAC;MAC5B;;MAEA,IAAI,CAAC6gB,UAAU,EAAE;QACfA,UAAU,GAAG,IAAI;QACjBnE,UAAU,GAAGvL,oBAAoB,CAAC3I,MAAM,CAACvD,KAAK,CAAC,GAAGuD,MAAM,CAACvD,KAAK,CAAC8I,MAAM,GAAG,GAAG;MAC7E;MAEA,IAAIvF,MAAM,CAACwF,OAAO,EAAE;QAClB2O,aAAa,CAAC7W,EAAE,CAAC,GAAG0C,MAAM,CAACwF,OAAO;MACpC;IACF,CAAC,MAAM,IAAI8J,gBAAgB,CAACtP,MAAM,CAAC,EAAE;MACnCmM,eAAe,IAAIA,eAAe,CAACzG,GAAG,CAACpI,EAAE,EAAE0C,MAAM,CAACqQ,YAAY,CAAC;MAC/DpF,UAAU,CAAC3N,EAAE,CAAC,GAAG0C,MAAM,CAACqQ,YAAY,CAACjL,IAAI,CAAC,CAAC;IAC7C,CAAC,MAAM;MACL6F,UAAU,CAAC3N,EAAE,CAAC,GAAG0C,MAAM,CAACoF,IAAI,CAAC,CAAC;MAC9B;;MAEA,IAAIpF,MAAM,CAACkU,UAAU,IAAI,IAAI,IAAIlU,MAAM,CAACkU,UAAU,KAAK,GAAG,IAAI,CAACmE,UAAU,EAAE;QACzEnE,UAAU,GAAGlU,MAAM,CAACkU,UAAU;MAChC;MAEA,IAAIlU,MAAM,CAACwF,OAAO,EAAE;QAClB2O,aAAa,CAAC7W,EAAE,CAAC,GAAG0C,MAAM,CAACwF,OAAO;MACpC;IACF;EACF,CAAC,CAAC,CAAC,CAAC;EACJ;EACA;;EAEA,IAAIgI,YAAY,EAAE;IAChBrC,MAAM,GAAGqC,YAAY;IACrBvC,UAAU,CAACvV,MAAM,CAACsX,IAAI,CAACQ,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGhW,SAAS;EACtD;EAEA,OAAO;IACLyT,UAAU;IACVE,MAAM;IACN+I,UAAU,EAAEA,UAAU,IAAI,GAAG;IAC7BC;EACF,CAAC;AACH;AAEA,SAAS/D,iBAAiBA,CAAC7Y,KAAK,EAAE6G,OAAO,EAAEoR,aAAa,EAAEM,OAAO,EAAEtC,YAAY,EAAEiC,oBAAoB,EAAEO,cAAc,EAAE7D,eAAe,EAAE;EACtI,IAAI;IACFlB,UAAU;IACVE;EACF,CAAC,GAAGqK,sBAAsB,CAACpX,OAAO,EAAEoR,aAAa,EAAEM,OAAO,EAAEtC,YAAY,EAAErB,eAAe,CAAC,CAAC,CAAC;;EAE5F,KAAK,IAAI9U,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGoY,oBAAoB,CAACrZ,MAAM,EAAEiB,KAAK,EAAE,EAAE;IAChE,IAAI,CAACf,GAAG,GAAGqL,KAAK,CAAC,GAAG8N,oBAAoB,CAACpY,KAAK,CAAC;IAC/C4D,SAAS,CAAC+U,cAAc,KAAKxY,SAAS,IAAIwY,cAAc,CAAC3Y,KAAK,CAAC,KAAKG,SAAS,EAAE,2CAA2C,CAAC;IAC3H,IAAIwI,MAAM,GAAGgQ,cAAc,CAAC3Y,KAAK,CAAC,CAAC,CAAC;;IAEpC,IAAI+X,aAAa,CAACpP,MAAM,CAAC,EAAE;MACzB,IAAIqP,aAAa,GAAGhB,mBAAmB,CAAC9W,KAAK,CAAC6G,OAAO,EAAEuD,KAAK,CAAC5E,KAAK,CAACO,EAAE,CAAC;MAEtE,IAAI,EAAE6N,MAAM,IAAIA,MAAM,CAACkE,aAAa,CAACtS,KAAK,CAACO,EAAE,CAAC,CAAC,EAAE;QAC/C6N,MAAM,GAAGrV,QAAQ,CAAC,CAAC,CAAC,EAAEqV,MAAM,EAAE;UAC5B,CAACkE,aAAa,CAACtS,KAAK,CAACO,EAAE,GAAG0C,MAAM,CAACvD;QACnC,CAAC,CAAC;MACJ;MAEAlF,KAAK,CAAC6T,QAAQ,CAAC/D,MAAM,CAAC/Q,GAAG,CAAC;IAC5B,CAAC,MAAM,IAAI4Y,gBAAgB,CAAClP,MAAM,CAAC,EAAE;MACnC;MACA;MACA,MAAM,IAAI7E,KAAK,CAAC,yCAAyC,CAAC;IAC5D,CAAC,MAAM,IAAImU,gBAAgB,CAACtP,MAAM,CAAC,EAAE;MACnC;MACA;MACA,MAAM,IAAI7E,KAAK,CAAC,iCAAiC,CAAC;IACpD,CAAC,MAAM;MACL,IAAI0W,WAAW,GAAG;QAChBta,KAAK,EAAE,MAAM;QACb6N,IAAI,EAAEpF,MAAM,CAACoF,IAAI;QACjB+D,UAAU,EAAE3R,SAAS;QACrB4R,UAAU,EAAE5R,SAAS;QACrB6R,WAAW,EAAE7R,SAAS;QACtB8R,QAAQ,EAAE9R,SAAS;QACnB,2BAA2B,EAAE;MAC/B,CAAC;MACDD,KAAK,CAAC6T,QAAQ,CAAC1F,GAAG,CAACpP,GAAG,EAAEub,WAAW,CAAC;IACtC;EACF;EAEA,OAAO;IACL5G,UAAU;IACVE;EACF,CAAC;AACH;AAEA,SAAS8B,eAAeA,CAAChC,UAAU,EAAEqN,aAAa,EAAEla,OAAO,EAAE+M,MAAM,EAAE;EACnE,IAAIoN,gBAAgB,GAAGziB,QAAQ,CAAC,CAAC,CAAC,EAAEwiB,aAAa,CAAC;EAElD,KAAK,IAAI3W,KAAK,IAAIvD,OAAO,EAAE;IACzB,IAAId,EAAE,GAAGqE,KAAK,CAAC5E,KAAK,CAACO,EAAE;IAEvB,IAAIgb,aAAa,CAAC9hB,cAAc,CAAC8G,EAAE,CAAC,EAAE;MACpC,IAAIgb,aAAa,CAAChb,EAAE,CAAC,KAAK9F,SAAS,EAAE;QACnC+gB,gBAAgB,CAACjb,EAAE,CAAC,GAAGgb,aAAa,CAAChb,EAAE,CAAC;MAC1C;IACF,CAAC,MAAM,IAAI2N,UAAU,CAAC3N,EAAE,CAAC,KAAK9F,SAAS,EAAE;MACvC+gB,gBAAgB,CAACjb,EAAE,CAAC,GAAG2N,UAAU,CAAC3N,EAAE,CAAC;IACvC;IAEA,IAAI6N,MAAM,IAAIA,MAAM,CAAC3U,cAAc,CAAC8G,EAAE,CAAC,EAAE;MACvC;MACA;IACF;EACF;EAEA,OAAOib,gBAAgB;AACzB,CAAC,CAAC;AACF;AACA;;AAGA,SAASlK,mBAAmBA,CAACjQ,OAAO,EAAE4Q,OAAO,EAAE;EAC7C,IAAIwJ,eAAe,GAAGxJ,OAAO,GAAG5Q,OAAO,CAACrD,KAAK,CAAC,CAAC,EAAEqD,OAAO,CAACiY,SAAS,CAAC5L,CAAC,IAAIA,CAAC,CAAC1N,KAAK,CAACO,EAAE,KAAK0R,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG5Q,OAAO,CAAC;EACnH,OAAOoa,eAAe,CAACC,OAAO,CAAC,CAAC,CAAChE,IAAI,CAAChK,CAAC,IAAIA,CAAC,CAAC1N,KAAK,CAAC2b,gBAAgB,KAAK,IAAI,CAAC,IAAIta,OAAO,CAAC,CAAC,CAAC;AAC7F;AAEA,SAASmM,sBAAsBA,CAACtN,MAAM,EAAE;EACtC;EACA,IAAIF,KAAK,GAAGE,MAAM,CAACwX,IAAI,CAACnO,CAAC,IAAIA,CAAC,CAACjP,KAAK,IAAI,CAACiP,CAAC,CAACxN,IAAI,IAAIwN,CAAC,CAACxN,IAAI,KAAK,GAAG,CAAC,IAAI;IACpEwE,EAAE,EAAE;EACN,CAAC;EACD,OAAO;IACLc,OAAO,EAAE,CAAC;MACRyD,MAAM,EAAE,CAAC,CAAC;MACVxJ,QAAQ,EAAE,EAAE;MACZyJ,YAAY,EAAE,EAAE;MAChB/E;IACF,CAAC,CAAC;IACFA;EACF,CAAC;AACH;AAEA,SAASuN,sBAAsBA,CAAC/E,MAAM,EAAEoT,MAAM,EAAE;EAC9C,IAAI;IACFtgB,QAAQ;IACR2W,OAAO;IACPD;EACF,CAAC,GAAG4J,MAAM,KAAK,KAAK,CAAC,GAAG,CAAC,CAAC,GAAGA,MAAM;EACnC,IAAIlQ,UAAU,GAAG,sBAAsB;EACvC,IAAImQ,YAAY,GAAG,iCAAiC;EAEpD,IAAIrT,MAAM,KAAK,GAAG,EAAE;IAClBkD,UAAU,GAAG,aAAa;IAE1B,IAAIsG,MAAM,IAAI1W,QAAQ,IAAI2W,OAAO,EAAE;MACjC4J,YAAY,GAAG,aAAa,GAAG7J,MAAM,GAAG,gBAAgB,GAAG1W,QAAQ,GAAG,SAAS,IAAI,yCAAyC,GAAG2W,OAAO,GAAG,MAAM,CAAC,GAAG,2CAA2C;IAChM,CAAC,MAAM;MACL4J,YAAY,GAAG,0CAA0C;IAC3D;EACF,CAAC,MAAM,IAAIrT,MAAM,KAAK,GAAG,EAAE;IACzBkD,UAAU,GAAG,WAAW;IACxBmQ,YAAY,GAAG,UAAU,GAAG5J,OAAO,GAAG,0BAA0B,GAAG3W,QAAQ,GAAG,IAAI;EACpF,CAAC,MAAM,IAAIkN,MAAM,KAAK,GAAG,EAAE;IACzBkD,UAAU,GAAG,WAAW;IACxBmQ,YAAY,GAAG,yBAAyB,GAAGvgB,QAAQ,GAAG,IAAI;EAC5D,CAAC,MAAM,IAAIkN,MAAM,KAAK,GAAG,EAAE;IACzBkD,UAAU,GAAG,oBAAoB;IAEjC,IAAIsG,MAAM,IAAI1W,QAAQ,IAAI2W,OAAO,EAAE;MACjC4J,YAAY,GAAG,aAAa,GAAG7J,MAAM,CAACmJ,WAAW,CAAC,CAAC,GAAG,gBAAgB,GAAG7f,QAAQ,GAAG,SAAS,IAAI,0CAA0C,GAAG2W,OAAO,GAAG,MAAM,CAAC,GAAG,2CAA2C;IAC/M,CAAC,MAAM,IAAID,MAAM,EAAE;MACjB6J,YAAY,GAAG,2BAA2B,GAAG7J,MAAM,CAACmJ,WAAW,CAAC,CAAC,GAAG,IAAI;IAC1E;EACF;EAEA,OAAO,IAAI1P,aAAa,CAACjD,MAAM,IAAI,GAAG,EAAEkD,UAAU,EAAE,IAAItN,KAAK,CAACyd,YAAY,CAAC,EAAE,IAAI,CAAC;AACpF,CAAC,CAAC;;AAGF,SAASzI,YAAYA,CAACL,OAAO,EAAE;EAC7B,KAAK,IAAI5Z,CAAC,GAAG4Z,OAAO,CAAC1Z,MAAM,GAAG,CAAC,EAAEF,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC5C,IAAI8J,MAAM,GAAG8P,OAAO,CAAC5Z,CAAC,CAAC;IAEvB,IAAIgZ,gBAAgB,CAAClP,MAAM,CAAC,EAAE;MAC5B,OAAOA,MAAM;IACf;EACF;AACF;AAEA,SAAS8V,iBAAiBA,CAAChd,IAAI,EAAE;EAC/B,IAAIgD,UAAU,GAAG,OAAOhD,IAAI,KAAK,QAAQ,GAAGC,SAAS,CAACD,IAAI,CAAC,GAAGA,IAAI;EAClE,OAAOF,UAAU,CAAC9C,QAAQ,CAAC,CAAC,CAAC,EAAEgG,UAAU,EAAE;IACzC7C,IAAI,EAAE;EACR,CAAC,CAAC,CAAC;AACL;AAEA,SAASgV,gBAAgBA,CAAC9N,CAAC,EAAEC,CAAC,EAAE;EAC9B,OAAOD,CAAC,CAAC9H,QAAQ,KAAK+H,CAAC,CAAC/H,QAAQ,IAAI8H,CAAC,CAACnH,MAAM,KAAKoH,CAAC,CAACpH,MAAM,IAAImH,CAAC,CAAClH,IAAI,KAAKmH,CAAC,CAACnH,IAAI;AAChF;AAEA,SAASqW,gBAAgBA,CAACtP,MAAM,EAAE;EAChC,OAAOA,MAAM,CAAC8O,IAAI,KAAKjS,UAAU,CAACob,QAAQ;AAC5C;AAEA,SAAS7I,aAAaA,CAACpP,MAAM,EAAE;EAC7B,OAAOA,MAAM,CAAC8O,IAAI,KAAKjS,UAAU,CAACJ,KAAK;AACzC;AAEA,SAASyS,gBAAgBA,CAAClP,MAAM,EAAE;EAChC,OAAO,CAACA,MAAM,IAAIA,MAAM,CAAC8O,IAAI,MAAMjS,UAAU,CAAC0L,QAAQ;AACxD;AAEA,SAAS+L,UAAUA,CAACze,KAAK,EAAE;EACzB,OAAOA,KAAK,IAAI,IAAI,IAAI,OAAOA,KAAK,CAAC0P,MAAM,KAAK,QAAQ,IAAI,OAAO1P,KAAK,CAAC4S,UAAU,KAAK,QAAQ,IAAI,OAAO5S,KAAK,CAAC2P,OAAO,KAAK,QAAQ,IAAI,OAAO3P,KAAK,CAACsiB,IAAI,KAAK,WAAW;AAC5K;AAEA,SAASnD,kBAAkBA,CAAChV,MAAM,EAAE;EAClC,IAAI,CAACsU,UAAU,CAACtU,MAAM,CAAC,EAAE;IACvB,OAAO,KAAK;EACd;EAEA,IAAIuF,MAAM,GAAGvF,MAAM,CAACuF,MAAM;EAC1B,IAAIpN,QAAQ,GAAG6H,MAAM,CAACwF,OAAO,CAAC2B,GAAG,CAAC,UAAU,CAAC;EAC7C,OAAO5B,MAAM,IAAI,GAAG,IAAIA,MAAM,IAAI,GAAG,IAAIpN,QAAQ,IAAI,IAAI;AAC3D;AAEA,SAAS4c,oBAAoBA,CAAC8D,GAAG,EAAE;EACjC,OAAOA,GAAG,IAAIvE,UAAU,CAACuE,GAAG,CAAC5D,QAAQ,CAAC,KAAK4D,GAAG,CAAC/J,IAAI,KAAKjS,UAAU,CAACuI,IAAI,IAAIvI,UAAU,CAACJ,KAAK,CAAC;AAC9F;AAEA,SAASuX,aAAaA,CAACjF,MAAM,EAAE;EAC7B,OAAOhG,mBAAmB,CAACtL,GAAG,CAACsR,MAAM,CAAC;AACxC;AAEA,SAASjC,gBAAgBA,CAACiC,MAAM,EAAE;EAChC,OAAOlG,oBAAoB,CAACpL,GAAG,CAACsR,MAAM,CAAC;AACzC;AAEA,eAAe2D,sBAAsBA,CAACL,cAAc,EAAE7C,aAAa,EAAEM,OAAO,EAAEnJ,MAAM,EAAEkP,SAAS,EAAEc,iBAAiB,EAAE;EAClH,KAAK,IAAItf,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGyY,OAAO,CAAC1Z,MAAM,EAAEiB,KAAK,EAAE,EAAE;IACnD,IAAI2I,MAAM,GAAG8P,OAAO,CAACzY,KAAK,CAAC;IAC3B,IAAIsK,KAAK,GAAG6N,aAAa,CAACnY,KAAK,CAAC;IAChC,IAAIuf,YAAY,GAAGvE,cAAc,CAACoC,IAAI,CAAChK,CAAC,IAAIA,CAAC,CAAC1N,KAAK,CAACO,EAAE,KAAKqE,KAAK,CAAC5E,KAAK,CAACO,EAAE,CAAC;IAC1E,IAAIwb,oBAAoB,GAAGlC,YAAY,IAAI,IAAI,IAAI,CAACG,kBAAkB,CAACH,YAAY,EAAEjV,KAAK,CAAC,IAAI,CAACgV,iBAAiB,IAAIA,iBAAiB,CAAChV,KAAK,CAAC5E,KAAK,CAACO,EAAE,CAAC,MAAM9F,SAAS;IAErK,IAAI8X,gBAAgB,CAACtP,MAAM,CAAC,KAAK6V,SAAS,IAAIiD,oBAAoB,CAAC,EAAE;MACnE;MACA;MACA;MACA,MAAMhH,mBAAmB,CAAC9R,MAAM,EAAE2G,MAAM,EAAEkP,SAAS,CAAC,CAAC7O,IAAI,CAAChH,MAAM,IAAI;QAClE,IAAIA,MAAM,EAAE;UACV8P,OAAO,CAACzY,KAAK,CAAC,GAAG2I,MAAM,IAAI8P,OAAO,CAACzY,KAAK,CAAC;QAC3C;MACF,CAAC,CAAC;IACJ;EACF;AACF;AAEA,eAAeya,mBAAmBA,CAAC9R,MAAM,EAAE2G,MAAM,EAAEoS,MAAM,EAAE;EACzD,IAAIA,MAAM,KAAK,KAAK,CAAC,EAAE;IACrBA,MAAM,GAAG,KAAK;EAChB;EAEA,IAAI3R,OAAO,GAAG,MAAMpH,MAAM,CAACqQ,YAAY,CAACzI,WAAW,CAACjB,MAAM,CAAC;EAE3D,IAAIS,OAAO,EAAE;IACX;EACF;EAEA,IAAI2R,MAAM,EAAE;IACV,IAAI;MACF,OAAO;QACLjK,IAAI,EAAEjS,UAAU,CAACuI,IAAI;QACrBA,IAAI,EAAEpF,MAAM,CAACqQ,YAAY,CAACtI;MAC5B,CAAC;IACH,CAAC,CAAC,OAAOxM,CAAC,EAAE;MACV;MACA,OAAO;QACLuT,IAAI,EAAEjS,UAAU,CAACJ,KAAK;QACtBA,KAAK,EAAElB;MACT,CAAC;IACH;EACF;EAEA,OAAO;IACLuT,IAAI,EAAEjS,UAAU,CAACuI,IAAI;IACrBA,IAAI,EAAEpF,MAAM,CAACqQ,YAAY,CAACjL;EAC5B,CAAC;AACH;AAEA,SAAS6Q,kBAAkBA,CAACjd,MAAM,EAAE;EAClC,OAAO,IAAIof,eAAe,CAACpf,MAAM,CAAC,CAACggB,MAAM,CAAC,OAAO,CAAC,CAACjY,IAAI,CAAC2G,CAAC,IAAIA,CAAC,KAAK,EAAE,CAAC;AACxE,CAAC,CAAC;AACF;;AAGA,SAAS+L,qBAAqBA,CAAC9R,KAAK,EAAEsJ,UAAU,EAAE;EAChD,IAAI;IACFlO,KAAK;IACL1E,QAAQ;IACRwJ;EACF,CAAC,GAAGF,KAAK;EACT,OAAO;IACLrE,EAAE,EAAEP,KAAK,CAACO,EAAE;IACZjF,QAAQ;IACRwJ,MAAM;IACNuD,IAAI,EAAE6F,UAAU,CAAClO,KAAK,CAACO,EAAE,CAAC;IAC1B2b,MAAM,EAAElc,KAAK,CAACkc;EAChB,CAAC;AACH;AAEA,SAASpK,cAAcA,CAACzQ,OAAO,EAAEjG,QAAQ,EAAE;EACzC,IAAIa,MAAM,GAAG,OAAOb,QAAQ,KAAK,QAAQ,GAAGY,SAAS,CAACZ,QAAQ,CAAC,CAACa,MAAM,GAAGb,QAAQ,CAACa,MAAM;EAExF,IAAIoF,OAAO,CAACA,OAAO,CAAChI,MAAM,GAAG,CAAC,CAAC,CAAC2G,KAAK,CAAC1F,KAAK,IAAI4e,kBAAkB,CAACjd,MAAM,IAAI,EAAE,CAAC,EAAE;IAC/E;IACA,OAAOoF,OAAO,CAACA,OAAO,CAAChI,MAAM,GAAG,CAAC,CAAC;EACpC,CAAC,CAAC;EACF;;EAGA,IAAI8iB,WAAW,GAAG9U,0BAA0B,CAAChG,OAAO,CAAC;EACrD,OAAO8a,WAAW,CAACA,WAAW,CAAC9iB,MAAM,GAAG,CAAC,CAAC;AAC5C,CAAC,CAAC;;AAEFR,OAAO,CAACgQ,oBAAoB,GAAGA,oBAAoB;AACnDhQ,OAAO,CAAC4S,aAAa,GAAGA,aAAa;AACrC5S,OAAO,CAAC2T,YAAY,GAAGA,YAAY;AACnC3T,OAAO,CAACsT,eAAe,GAAGA,eAAe;AACzCtT,OAAO,CAACujB,gCAAgC,GAAGnc,yBAAyB;AACpEpH,OAAO,CAACwjB,iCAAiC,GAAGhV,0BAA0B;AACtExO,OAAO,CAACgE,oBAAoB,GAAGA,oBAAoB;AACnDhE,OAAO,CAACuE,iBAAiB,GAAGA,iBAAiB;AAC7CvE,OAAO,CAACiB,mBAAmB,GAAGA,mBAAmB;AACjDjB,OAAO,CAACgD,UAAU,GAAGA,UAAU;AAC/BhD,OAAO,CAAC+T,YAAY,GAAGA,YAAY;AACnC/T,OAAO,CAACge,mBAAmB,GAAGA,mBAAmB;AACjDhe,OAAO,CAAC0S,KAAK,GAAGA,KAAK;AACrB1S,OAAO,CAACoM,YAAY,GAAGA,YAAY;AACnCpM,OAAO,CAAC6f,yBAAyB,GAAGA,yBAAyB;AAC7D7f,OAAO,CAACqP,aAAa,GAAGA,aAAa;AACrCrP,OAAO,CAACqF,SAAS,GAAGA,SAAS;AAC7BrF,OAAO,CAAC+S,oBAAoB,GAAGA,oBAAoB;AACnD/S,OAAO,CAACkJ,SAAS,GAAGA,SAAS;AAC7BlJ,OAAO,CAACuP,IAAI,GAAGA,IAAI;AACnBvP,OAAO,CAACgM,SAAS,GAAGA,SAAS;AAC7BhM,OAAO,CAACiI,WAAW,GAAGA,WAAW;AACjCjI,OAAO,CAACmM,iBAAiB,GAAGA,iBAAiB;AAC7CnM,OAAO,CAACmD,SAAS,GAAGA,SAAS;AAC7BnD,OAAO,CAAC2S,QAAQ,GAAGA,QAAQ;AAC3B3S,OAAO,CAAC4N,WAAW,GAAGA,WAAW;AACjC5N,OAAO,CAACyO,SAAS,GAAGA,SAAS;AAC7BzO,OAAO,CAACoI,aAAa,GAAGA,aAAa;AACrCpI,OAAO,CAACsM,OAAO,GAAGA,OAAO"},"metadata":{},"sourceType":"script","externalDependencies":[]}